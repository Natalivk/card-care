{"version":3,"sources":["webpack:///webpack/bootstrap 04684ec7d3eba61912a1","webpack:///./resources/assets/js/lib/formValidation/formValidation.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO,4DAA4D,UAAU;AAC5F;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA,oCAAoC;AACpC,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,sEAAsE,UAAU;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yDAAyD,oCAAoC;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uCAAuC;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,iDAAiD;AACjD,+CAA+C,4BAA4B;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8DAA8D;;AAE9D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,mBAAmB,SAAS;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,2BAA2B,WAAW;AACtC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,QAAQ;AAC3B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,WAAW;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,QAAQ;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB;AACrB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,QAAQ;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,MAAM;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE;AAClG;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE,YAAY,EAAE,aAAa,EAAE;AAC7D;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA,4DAA4D,kBAAkB;AAC9E;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA,gCAAgC,EAAE,eAAe,EAAE;AACnD,SAAS;;AAET;AACA,uDAAuD,IAAI,2BAA2B,IAAI;AAC1F,SAAS;;AAET;AACA,wDAAwD,IAAI,eAAe,EAAE;AAC7E,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA,sDAAsD,IAAI,2BAA2B,EAAE,gBAAgB,IAAI;AAC3G,mDAAmD,IAAI,eAAe,EAAE,aAAa,IAAI;AACzF;AACA,SAAS;;AAET;AACA,uDAAuD,IAAI,2BAA2B,EAAE;AACxF,oDAAoD,IAAI,eAAe,EAAE;AACzE;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,EAAE;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,IAAI;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrmBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,KAAK;AACxB,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,IAAI,GAAG,IAAI;AAChD;AACA,aAAa;AACb;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,EAAE,IAAI,GAAG,IAAI,GAAG;AACvC;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,EAAE,QAAQ,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,yFAAyF;AACzF,kGAAkG,sBAAsB;AACxH,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,yBAAyB,iDAAiD,KAAK,6CAA6C,KAAK;AACnL;;AAEA;AACA,yDAAyD;AACzD;;AAEA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,yBAAyB;AACpD;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA,uCAAuC,wCAAwC;AAC/E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,EAAE,iBAAiB,EAAE,iBAAiB,GAAG,iBAAiB,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG;AACvD,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AAC3D,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE;AAC9D,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG;AACpD,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG;AACvD,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,SAAS,EAAE,MAAM,GAAG;AAC/C,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AAC5D,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG;AACpE,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG,MAAM,EAAE;AAC/D,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG;AACvD,yBAAyB,EAAE,SAAS,EAAE,SAAS,GAAG;AAClD,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AACpE,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG;AACpD,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5D,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/D,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,GAAG;AAC7D,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG,MAAM,EAAE;AAC/D,yBAAyB,EAAE,SAAS,GAAG;AACvC,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AACpD,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG,MAAM,EAAE;AACvD,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,2BAA2B,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AACtD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG;AACvD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE;AAC5E,yBAAyB,EAAE,MAAM,GAAG;AACpC,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AAC5D,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AACpD,yBAAyB,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/C,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AACpD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACnD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG;AACpD,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,GAAG;AAC/D,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,2BAA2B,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;AACtD,yBAAyB,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,GAAG;AAC1D,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG;AAC5C,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,sBAAsB,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,sBAAsB,GAAG,wBAAwB,EAAE,KAAK,EAAE,KAAK,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;;AAEA,oBAAoB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7E;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,2BAA2B,IAAI,MAAM,EAAE,KAAK,IAAI,MAAM,EAAE,KAAK,IAAI,MAAM,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,sBAAsB,IAAI,IAAI,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAsB,GAAG,wBAAwB,GAAG,OAAO,EAAE;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,qBAAqB,SAAS;AAC9B,qBAAqB,SAAS;AAC9B,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,0B;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,EAAE,IAAI,IAAI,MAAM,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,gCAAgC,EAAE,IAAI,IAAI;AAC1C,mCAAmC,IAAI,MAAM,EAAE,IAAI,IAAI;AACvD,uCAAuC,IAAI,MAAM,EAAE,IAAI,IAAI;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,EAAE,WAAW,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,EAAE,IAAI,IAAI,MAAM,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,EAAE,IAAI,IAAI,MAAM,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,IAAI,IAAI,MAAM,EAAE,IAAI,IAAI,MAAM,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,GAAG,2BAA2B,EAAE,WAAW,EAAE;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,wBAAwB,EAAE;AAC1B,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,GAAG;AAC7B,0BAA0B,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC9C,0BAA0B,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AACjD;AACA;;AAEA,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE;AAChD,0BAA0B,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,EAAE;AAC5B;AACA;;AAEA;AACA;AACA,+CAA+C,EAAE;;AAEjD;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG,yBAAyB;;AAE7D;AACA,6EAA6E,EAAE;AAC/E,gDAAgD,IAAI,GAAG,EAAE,aAAa,IAAI,mBAAmB,IAAI,GAAG,EAAE,cAAc,IAAI,yEAAyE,EAAE,oBAAoB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,2EAA2E,EAAE,oBAAoB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,2EAA2E,EAAE,qBAAqB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE,qBAAqB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE,qBAAqB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE,yBAAyB,IAAI,EAAE,IAAI,iBAAiB,IAAI,EAAE,IAAI,yEAAyE,EAAE;AACnkC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,GAAG;AAC7E;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B,EAAE,IAAI,EAAE,IAAI,EAAE;AAC1C,6BAA6B,EAAE,KAAK,EAAE,KAAK,EAAE;AAC7C;AACA;AACA,8BAA8B,EAAE;AAChC,gCAAgC,EAAE,IAAI,EAAE,IAAI,EAAE;AAC9C,kCAAkC,EAAE,KAAK,EAAE,KAAK,EAAE;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,EAAE,KAAK,EAAE;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,EAAE,MAAM,EAAE,UAAU,EAAE;AACrD;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA,gCAAgC,EAAE,aAAa,EAAE,aAAa,EAAE;AAChE;AACA,0BAA0B,GAAG;AAC7B;AACA,0BAA0B,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;AACvD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;;AAEA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,GAAG;AACnC;AACA,gCAAgC,EAAE,aAAa,EAAE,aAAa,EAAE;AAChE;AACA,0BAA0B,GAAG;AAC7B;AACA,0BAA0B,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oIAAoI,EAAE;AACtI;;AAEA;AACA;AACA;AACA,wCAAwC,EAAE,OAAO,EAAE,KAAK,IAAI,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,gBAAgB,EAAE,eAAe,EAAE,WAAW,IAAI,UAAU,EAAE;AACpM;;AAEA;AACA;AACA;AACA,4DAA4D,GAAG,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,IAAI,MAAM,EAAE,IAAI,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI;AAChK;;AAEA;AACA;AACA,oEAAoE,EAAE,UAAU,EAAE,IAAI,EAAE;AACxF;;AAEA;AACA;AACA;AACA,sEAAsE,IAAI,yCAAyC,IAAI,iBAAiB,IAAI,cAAc,IAAI;AAC9J;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,EAAE;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,EAAE;AACjF;;AAEA;AACA;AACA;AACA,yEAAyE,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;AAC/G;;AAEA;AACA;AACA;AACA;AACA,4GAA4G,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,IAAI,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,IAAI;AACvO;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,GAAG,IAAI,GAAG,MAAM,EAAE,UAAU,EAAE;AAC1F;;AAEA;AACA;AACA;AACA;AACA,iFAAiF,EAAE,iCAAiC,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,EAAE;AACjJ;;AAEA;AACA;AACA;AACA,0CAA0C,EAAE,MAAM,EAAE;AACpD;;AAEA;AACA;AACA;AACA,iDAAiD,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE,mBAAmB,EAAE,aAAa,EAAE;AACzH;;AAEA;AACA;AACA,sEAAsE,EAAE,iCAAiC,KAAK;AAC9G;;AAEA;AACA;AACA,oEAAoE,EAAE,UAAU,EAAE,IAAI,EAAE;AACxF;;AAEA;AACA;AACA,8CAA8C,EAAE,UAAU,EAAE,UAAU,EAAE;AACxE;;AAEA;AACA;AACA;AACA,wHAAwH,EAAE;AAC1H;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,2DAA2D,EAAE,cAAc,EAAE,YAAY,EAAE;AAC3F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,kBAAkB;AAClB,mBAAmB,OAAO;AAC1B,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,EAAE;AACxB;AACA;;AAEA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,EAAE;AAC9B;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,GAAG,wBAAwB;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,IAAI,EAAE,EAAE;AAC3D,gEAAgE,IAAI,EAAE,EAAE;AACxE,qEAAqE,IAAI,EAAE,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,IAAI,qBAAqB,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,GAAG;AACtD;AACA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,GAAG;AACxF,oCAAoC,EAAE,UAAU,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,GAAG;AAC9F,oCAAoC,EAAE,UAAU,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,GAAG;AAC9F,oCAAoC,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,GAAG;AACvF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,wBAAwB,IAAI,MAAM,EAAE;AACpC;AACA;AACA,uBAAuB,IAAI,MAAM,EAAE;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,4BAA4B,EAAE,MAAM,EAAE,MAAM,EAAE;AAC9C;AACA;AACA,2BAA2B,EAAE,MAAM,EAAE,MAAM,EAAE;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+BAA+B;AACjE,oCAAoC;AACpC;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8BAA8B;AACjE,qCAAqC,iBAAiB;AACtD;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,6BAA6B,EAAE,MAAM,EAAE;AACvC;AACA;AACA,4BAA4B,EAAE,MAAM,EAAE;AACtC;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,EAAE;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B,6BAA6B,GAAG;AAChC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,GAAG;AAC/B,8BAA8B,EAAE;AAChC,8BAA8B,EAAE;AAChC,uCAAuC,EAAE;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,IAAI;AAC7D;AACA;AACA,yBAAyB,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,IAAI;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA,0BAA0B,IAAI;AAC9B;AACA;AACA,2BAA2B,IAAI;AAC/B,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,2BAA2B,EAAE,OAAO,EAAE,OAAO,GAAG,OAAO,EAAE;AACzD;AACA;AACA,0BAA0B,EAAE,OAAO,EAAE,OAAO,GAAG,OAAO,EAAE;AACxD;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE,OAAO,EAAE;AACrC;AACA;AACA,yBAAyB,EAAE,OAAO,EAAE;AACpC;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;;AAEA;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;AACA,8BAA8B,IAAI;AAClC;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,2BAA2B,GAAG,OAAO,GAAG;AACxC;AACA;AACA,0BAA0B,GAAG,OAAO,GAAG;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,qBAAqB;AACrB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;;AAEA,4BAA4B,EAAE;AAC9B;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,EAAE,uBAAuB,EAAE;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE,KAAK,EAAE;AAChD;;AAEA;AACA,oCAAoC,EAAE,YAAY,EAAE,YAAY,EAAE;AAClE;;AAEA;AACA,wEAAwE,EAAE,MAAM,EAAE,4CAA4C,EAAE,SAAS,EAAE,4CAA4C,EAAE,MAAM,EAAE;AACjM;;AAEA;AACA,uCAAuC,EAAE,KAAK,EAAE;AAChD;;AAEA;AACA;AACA,oCAAoC,EAAE,WAAW,EAAE;AACnD;;AAEA;AACA;AACA,yDAAyD,EAAE,SAAS,EAAE;AACtE;;AAEA;AACA,+CAA+C,EAAE;AACjD;;AAEA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;;AAEA;AACA;AACA,sCAAsC,EAAE;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,MAAM,EAAE;AAC7C;;AAEA;AACA;AACA;AACA,yDAAyD,EAAE,wBAAwB,EAAE;AACrF;;AAEA;AACA;AACA,4CAA4C,EAAE;AAC9C;;AAEA;AACA;AACA,2CAA2C,EAAE;AAC7C;;AAEA;AACA;AACA,2CAA2C,EAAE,oBAAoB,EAAE;AACnE;;AAEA;AACA;AACA,wCAAwC,EAAE,IAAI,EAAE;AAChD;;AAEA;AACA,wCAAwC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;AACrE;;AAEA;AACA,sCAAsC,EAAE;AACxC;;AAEA;AACA,wCAAwC,EAAE,MAAM,EAAE;AAClD;;AAEA;AACA,mFAAmF,EAAE;AACrF;;AAEA;AACA;AACA,oCAAoC,EAAE,WAAW,EAAE;AACnD;;AAEA;AACA;AACA;AACA,mCAAmC,IAAI,SAAS,EAAE;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,EAAE,yBAAyB,IAAI,cAAc,EAAE,kBAAkB,EAAE;AACvH;AACA,oDAAoD,EAAE,MAAM,EAAE,kBAAkB,EAAE,cAAc,EAAE,kBAAkB,EAAE;AACtH;AACA,oDAAoD,EAAE,mBAAmB,EAAE,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,kBAAkB,EAAE;;AAE7I,mDAAmD,EAAE,kBAAkB,EAAE,uBAAuB,EAAE;AAClG;AACA,wCAAwC,IAAI;AAC5C,+CAA+C,IAAI;AACnD,6BAA6B,EAAE;AAC/B;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC,U","file":"js/formValidationCore.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 04684ec7d3eba61912a1","/*!\r\n * FormValidation (http://formvalidation.io)\r\n * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit frameworks\r\n *\r\n * @version     v0.6.0, built on 2015-01-06 2:20:11 PM\r\n * @author      https://twitter.com/nghuuphuoc\r\n * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc\r\n * @license     http://formvalidation.io/license/\r\n */\r\n// Register the namespace\r\nwindow.FormValidation = {\r\n    AddOn:     {},  // Add-ons\r\n    Framework: {},  // Supported frameworks\r\n    I18n:      {},  // i18n\r\n    Validator: {}   // Available validators\r\n};\r\n\r\nif (typeof jQuery === 'undefined') {\r\n    throw new Error('FormValidation requires jQuery');\r\n}\r\n\r\n(function($) {\r\n    var version = $.fn.jquery.split(' ')[0].split('.');\r\n    if ((+version[0] < 2 && +version[1] < 9) || (+version[0] === 1 && +version[1] === 9 && +version[2] < 1)) {\r\n        throw new Error('FormValidation requires jQuery version 1.9.1 or higher');\r\n    }\r\n}(jQuery));\r\n\r\n(function($) {\r\n    // TODO: Remove backward compatibility in v0.7.0\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {jQuery|String} form The form element or selector\r\n     * @param {Object} options The options\r\n     * @param {String} [namespace] The optional namespace which is used for data-{namespace}-xxx attributes and internal data.\r\n     * Currently, it's used to support backward version\r\n     * @constructor\r\n     */\r\n    FormValidation.Base = function(form, options, namespace) {\r\n        this.$form      = $(form);\r\n        this.options    = $.extend({}, $.fn.formValidation.DEFAULT_OPTIONS, options);\r\n        this._namespace = namespace || 'fv';\r\n\r\n        this.$invalidFields = $([]);    // Array of invalid fields\r\n        this.$submitButton  = null;     // The submit button which is clicked to submit form\r\n        this.$hiddenButton  = null;\r\n\r\n        // Validating status\r\n        this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';\r\n        this.STATUS_VALIDATING    = 'VALIDATING';\r\n        this.STATUS_INVALID       = 'INVALID';\r\n        this.STATUS_VALID         = 'VALID';\r\n\r\n        // Determine the event that is fired when user change the field value\r\n        // Most modern browsers supports input event except IE 7, 8.\r\n        // IE 9 supports input event but the event is still not fired if I press the backspace key.\r\n        // Get IE version\r\n        // https://gist.github.com/padolsey/527683/#comment-7595\r\n        var ieVersion = (function() {\r\n            var v = 3, div = document.createElement('div'), a = div.all || [];\r\n            while (div.innerHTML = '<!--[if gt IE '+(++v)+']><br><![endif]-->', a[0]) {}\r\n            return v > 4 ? v : !v;\r\n        }());\r\n\r\n        var el = document.createElement('div');\r\n        this._changeEvent = (ieVersion === 9 || !('oninput' in el)) ? 'keyup' : 'input';\r\n\r\n        // The flag to indicate that the form is ready to submit when a remote/callback validator returns\r\n        this._submitIfValid = null;\r\n\r\n        // Field elements\r\n        this._cacheFields = {};\r\n\r\n        this._init();\r\n    };\r\n\r\n    FormValidation.Base.prototype = {\r\n        constructor: FormValidation.Base,\r\n\r\n        /**\r\n         * Check if the number of characters of field value exceed the threshold or not\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {Boolean}\r\n         */\r\n        _exceedThreshold: function($field) {\r\n            var ns        = this._namespace,\r\n                field     = $field.attr('data-' + ns + '-field'),\r\n                threshold = this.options.fields[field].threshold || this.options.threshold;\r\n            if (!threshold) {\r\n                return true;\r\n            }\r\n            var cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;\r\n            return (cannotType || $field.val().length >= threshold);\r\n        },\r\n\r\n        /**\r\n         * Init form\r\n         */\r\n        _init: function() {\r\n            var that    = this,\r\n                ns      = this._namespace,\r\n                options = {\r\n                    addOns:         {},\r\n                    autoFocus:      this.$form.attr('data-' + ns + '-autofocus'),\r\n                    button: {\r\n                        selector: this.$form.attr('data-' + ns + '-button-selector') || this.$form.attr('data-' + ns + '-submitbuttons'), // Support backward\r\n                        disabled: this.$form.attr('data-' + ns + '-button-disabled')\r\n                    },\r\n                    control: {\r\n                        valid:   this.$form.attr('data-' + ns + '-control-valid'),\r\n                        invalid: this.$form.attr('data-' + ns + '-control-invalid')\r\n                    },\r\n                    err: {\r\n                        clazz:     this.$form.attr('data-' + ns + '-err-clazz'),\r\n                        container: this.$form.attr('data-' + ns + '-err-container') || this.$form.attr('data-' + ns + '-container'), // Support backward\r\n                        parent:    this.$form.attr('data-' + ns + '-err-parent')\r\n                    },\r\n                    events: {\r\n                        formInit:         this.$form.attr('data-' + ns + '-events-form-init'),\r\n                        formError:        this.$form.attr('data-' + ns + '-events-form-error'),\r\n                        formSuccess:      this.$form.attr('data-' + ns + '-events-form-success'),\r\n                        fieldAdded:       this.$form.attr('data-' + ns + '-events-field-added'),\r\n                        fieldRemoved:     this.$form.attr('data-' + ns + '-events-field-removed'),\r\n                        fieldInit:        this.$form.attr('data-' + ns + '-events-field-init'),\r\n                        fieldError:       this.$form.attr('data-' + ns + '-events-field-error'),\r\n                        fieldSuccess:     this.$form.attr('data-' + ns + '-events-field-success'),\r\n                        fieldStatus:      this.$form.attr('data-' + ns + '-events-field-status'),\r\n                        localeChanged:    this.$form.attr('data-' + ns + '-events-locale-changed'),\r\n                        validatorError:   this.$form.attr('data-' + ns + '-events-validator-error'),\r\n                        validatorSuccess: this.$form.attr('data-' + ns + '-events-validator-success')\r\n                    },\r\n                    excluded:      this.$form.attr('data-' + ns + '-excluded'),\r\n                    icon: {\r\n                        valid:      this.$form.attr('data-' + ns + '-icon-valid')      || this.$form.attr('data-' + ns + '-feedbackicons-valid'),      // Support backward\r\n                        invalid:    this.$form.attr('data-' + ns + '-icon-invalid')    || this.$form.attr('data-' + ns + '-feedbackicons-invalid'),    // Support backward\r\n                        validating: this.$form.attr('data-' + ns + '-icon-validating') || this.$form.attr('data-' + ns + '-feedbackicons-validating'), // Support backward\r\n                        feedback:   this.$form.attr('data-' + ns + '-icon-feedback')\r\n                    },\r\n                    live:          this.$form.attr('data-' + ns + '-live'),\r\n                    locale:        this.$form.attr('data-' + ns + '-locale'),\r\n                    message:       this.$form.attr('data-' + ns + '-message'),\r\n                    onError:       this.$form.attr('data-' + ns + '-onerror'),\r\n                    onSuccess:     this.$form.attr('data-' + ns + '-onsuccess'),\r\n                    row: {\r\n                        selector: this.$form.attr('data-' + ns + '-row-selector') || this.$form.attr('data-' + ns + '-group'), // Support backward\r\n                        valid:    this.$form.attr('data-' + ns + '-row-valid'),\r\n                        invalid:  this.$form.attr('data-' + ns + '-row-invalid'),\r\n                        feedback: this.$form.attr('data-' + ns + '-row-feedback')\r\n                    },\r\n                    threshold:     this.$form.attr('data-' + ns + '-threshold'),\r\n                    trigger:       this.$form.attr('data-' + ns + '-trigger'),\r\n                    verbose:       this.$form.attr('data-' + ns + '-verbose'),\r\n                    fields:        {}\r\n                };\r\n\r\n            this.$form\r\n                // Disable client side validation in HTML 5\r\n                .attr('novalidate', 'novalidate')\r\n                .addClass(this.options.elementClass)\r\n                // Disable the default submission first\r\n                .on('submit.' + ns, function(e) {\r\n                    e.preventDefault();\r\n                    that.validate();\r\n                })\r\n                .on('click.' + ns, this.options.button.selector, function() {\r\n                    that.$submitButton  = $(this);\r\n                    // The user just click the submit button\r\n                    that._submitIfValid = true;\r\n                })\r\n                // Find all fields which have either \"name\" or \"data-{namespace}-field\" attribute\r\n                .find('[name], [data-' + ns + '-field]')\r\n                    .each(function() {\r\n                        var $field = $(this),\r\n                            field  = $field.attr('name') || $field.attr('data-' + ns + '-field'),\r\n                            opts   = that._parseOptions($field);\r\n                        if (opts) {\r\n                            $field.attr('data-' + ns + '-field', field);\r\n                            options.fields[field] = $.extend({}, opts, options.fields[field]);\r\n                        }\r\n                    });\r\n\r\n            this.options = $.extend(true, this.options, options);\r\n\r\n            // Normalize the err.parent option\r\n            if ('string' === typeof this.options.err.parent) {\r\n                this.options.err.parent = new RegExp(this.options.err.parent);\r\n            }\r\n\r\n            // Support backward\r\n            if (this.options.container) {\r\n                this.options.err.container = this.options.container;\r\n                delete this.options.container;\r\n            }\r\n            if (this.options.feedbackIcons) {\r\n                this.options.icon = $.extend(true, this.options.icon, this.options.feedbackIcons);\r\n                delete this.options.feedbackIcons;\r\n            }\r\n            if (this.options.group) {\r\n                this.options.row.selector = this.options.group;\r\n                delete this.options.group;\r\n            }\r\n            if (this.options.submitButtons) {\r\n                this.options.button.selector = this.options.submitButtons;\r\n                delete this.options.submitButtons;\r\n            }\r\n\r\n            // If the locale is not found, reset it to default one\r\n            if (!FormValidation.I18n[this.options.locale]) {\r\n                this.options.locale = $.fn.formValidation.DEFAULT_OPTIONS.locale;\r\n            }\r\n\r\n            // Parse the add-on options from HTML attributes\r\n            this.options = $.extend(true, this.options, { addOns: this._parseAddOnOptions() });\r\n\r\n            // When pressing Enter on any field in the form, the first submit button will do its job.\r\n            // The form then will be submitted.\r\n            // I create a first hidden submit button\r\n            this.$hiddenButton = $('<button/>')\r\n                                    .attr('type', 'submit')\r\n                                    .prependTo(this.$form)\r\n                                    .addClass('fv-hidden-submit')\r\n                                    .css({ display: 'none', width: 0, height: 0 });\r\n\r\n            this.$form\r\n                .on('click.' +  this._namespace, '[type=\"submit\"]', function(e) {\r\n                    // #746: Check if the button click handler returns false\r\n                    if (!e.isDefaultPrevented()) {\r\n                        var $target = $(e.target),\r\n                            // The button might contain HTML tag\r\n                            $button = $target.is('[type=\"submit\"]') ? $target.eq(0) : $target.parent('[type=\"submit\"]').eq(0);\r\n\r\n                        // Don't perform validation when clicking on the submit button/input\r\n                        // which aren't defined by the 'button.selector' option\r\n                        if (that.options.button.selector && !$button.is(that.options.button.selector) && !$button.is(that.$hiddenButton)) {\r\n                            that.$form.off('submit.' + that._namespace).submit();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            for (var field in this.options.fields) {\r\n                this._initField(field);\r\n            }\r\n\r\n            // Init the add-ons\r\n            for (var addOn in this.options.addOns) {\r\n                if ('function' === typeof FormValidation.AddOn[addOn].init) {\r\n                    FormValidation.AddOn[addOn].init(this, this.options.addOns[addOn]);\r\n                }\r\n            }\r\n\r\n            this.$form.trigger($.Event(this.options.events.formInit), {\r\n                bv: this,   // Support backward\r\n                fv: this,\r\n                options: this.options\r\n            });\r\n\r\n            // Prepare the events\r\n            if (this.options.onSuccess) {\r\n                this.$form.on(this.options.events.formSuccess, function(e) {\r\n                    FormValidation.Helper.call(that.options.onSuccess, [e]);\r\n                });\r\n            }\r\n            if (this.options.onError) {\r\n                this.$form.on(this.options.events.formError, function(e) {\r\n                    FormValidation.Helper.call(that.options.onError, [e]);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         */\r\n        _initField: function(field) {\r\n            var ns     = this._namespace,\r\n                fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-' + ns + '-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    fields.attr('data-' + ns + '-field', field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            // We don't need to validate non-existing fields\r\n            if (fields.length === 0) {\r\n                return;\r\n            }\r\n\r\n            if (this.options.fields[field] === null || this.options.fields[field].validators === null) {\r\n                return;\r\n            }\r\n\r\n            var validatorName;\r\n            for (validatorName in this.options.fields[field].validators) {\r\n                if (!FormValidation.Validator[validatorName]) {\r\n                    delete this.options.fields[field].validators[validatorName];\r\n                }\r\n            }\r\n            if (this.options.fields[field].enabled === null) {\r\n                this.options.fields[field].enabled = true;\r\n            }\r\n\r\n            var that      = this,\r\n                total     = fields.length,\r\n                type      = fields.attr('type'),\r\n                updateAll = (total === 1) || ('radio' === type) || ('checkbox' === type),\r\n                trigger   = this._getFieldTrigger(fields.eq(0)),\r\n                events    = $.map(trigger, function(item) {\r\n                    return item + '.update.' + ns;\r\n                }).join(' ');\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field    = fields.eq(i),\r\n                    row       = this.options.fields[field].row || this.options.row.selector,\r\n                    $parent   = $field.closest(row),\r\n                    // Allow user to indicate where the error messages are shown\r\n                    // Support backward\r\n                    container = ('function' === typeof (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container))\r\n                                ? (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container).call(this, $field, this)\r\n                                : (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container),\r\n                    $message  = (container && container !== 'tooltip' && container !== 'popover') ? $(container) : this._getMessageContainer($field, row);\r\n\r\n                if (container && container !== 'tooltip' && container !== 'popover') {\r\n                    $message.addClass(this.options.err.clazz);\r\n                }\r\n\r\n                // Remove all error messages and feedback icons\r\n                $message.find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for=\"' + field + '\"]').remove();\r\n                $parent.find('i[data-' + ns + '-icon-for=\"' + field + '\"]').remove();\r\n\r\n                // Whenever the user change the field value, mark it as not validated yet\r\n                $field.off(events).on(events, function() {\r\n                    that.updateStatus($(this), that.STATUS_NOT_VALIDATED);\r\n                });\r\n\r\n                // Create help block elements for showing the error messages\r\n                $field.data(ns + '.messages', $message);\r\n                for (validatorName in this.options.fields[field].validators) {\r\n                    $field.data(ns + '.result.' + validatorName, this.STATUS_NOT_VALIDATED);\r\n\r\n                    if (!updateAll || i === total - 1) {\r\n                        $('<small/>')\r\n                            .css('display', 'none')\r\n                            .addClass(this.options.err.clazz)\r\n                            .attr('data-' + ns + '-validator', validatorName)\r\n                            .attr('data-' + ns + '-for', field)\r\n                            .attr('data-' + ns + '-result', this.STATUS_NOT_VALIDATED)\r\n                            .html(this._getMessage(field, validatorName))\r\n                            .appendTo($message);\r\n                    }\r\n\r\n                    // Init the validator\r\n                    if ('function' === typeof FormValidation.Validator[validatorName].init) {\r\n                        FormValidation.Validator[validatorName].init(this, $field, this.options.fields[field].validators[validatorName]);\r\n                    }\r\n                }\r\n\r\n                // Prepare the feedback icons\r\n                // Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)\r\n                if (this.options.fields[field].icon !== false && this.options.fields[field].icon !== 'false'\r\n                    && this.options.icon\r\n                    && this.options.icon.valid && this.options.icon.invalid && this.options.icon.validating\r\n                    && (!updateAll || i === total - 1))\r\n                {\r\n                    // $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid).addClass(this.options.row.feedback);\r\n                    // Keep error messages which are populated from back-end\r\n                    $parent.addClass(this.options.row.feedback);\r\n                    var $icon = $('<i/>')\r\n                                    .css('display', 'none')\r\n                                    .addClass(this.options.icon.feedback)\r\n                                    .attr('data-' + ns + '-icon-for', field)\r\n                                    .insertAfter($field);\r\n\r\n                    // Store the icon as a data of field element\r\n                    (!updateAll ? $field : fields).data(ns + '.icon', $icon);\r\n\r\n                    if ('tooltip' === container || 'popover' === container) {\r\n                        (!updateAll ? $field : fields)\r\n                            .on(this.options.events.fieldError, function() {\r\n                                $parent.addClass('fv-has-tooltip');\r\n                            })\r\n                            .on(this.options.events.fieldSuccess, function() {\r\n                                $parent.removeClass('fv-has-tooltip');\r\n                            });\r\n\r\n                        $field\r\n                            // Show tooltip/popover message when field gets focus\r\n                            .off('focus.container.' + ns)\r\n                            .on('focus.container.' + ns, function() {\r\n                                that._showTooltip($field, container);\r\n                            })\r\n                            // and hide them when losing focus\r\n                            .off('blur.container.' + ns)\r\n                            .on('blur.container.' + ns, function() {\r\n                                that._hideTooltip($field, container);\r\n                            });\r\n                    }\r\n\r\n                    if ('string' === typeof this.options.fields[field].icon && this.options.fields[field].icon !== 'true') {\r\n                        $icon.appendTo($(this.options.fields[field].icon));\r\n                    } else {\r\n                        this._fixIcon($field, $icon);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Prepare the events\r\n            fields\r\n                .on(this.options.events.fieldSuccess, function(e, data) {\r\n                    var onSuccess = that.getOptions(data.field, null, 'onSuccess');\r\n                    if (onSuccess) {\r\n                        FormValidation.Helper.call(onSuccess, [e, data]);\r\n                    }\r\n                })\r\n                .on(this.options.events.fieldError, function(e, data) {\r\n                    var onError = that.getOptions(data.field, null, 'onError');\r\n                    if (onError) {\r\n                        FormValidation.Helper.call(onError, [e, data]);\r\n                    }\r\n                })\r\n                .on(this.options.events.fieldStatus, function(e, data) {\r\n                    var onStatus = that.getOptions(data.field, null, 'onStatus');\r\n                    if (onStatus) {\r\n                        FormValidation.Helper.call(onStatus, [e, data]);\r\n                    }\r\n                })\r\n                .on(this.options.events.validatorError, function(e, data) {\r\n                    var onError = that.getOptions(data.field, data.validator, 'onError');\r\n                    if (onError) {\r\n                        FormValidation.Helper.call(onError, [e, data]);\r\n                    }\r\n                })\r\n                .on(this.options.events.validatorSuccess, function(e, data) {\r\n                    var onSuccess = that.getOptions(data.field, data.validator, 'onSuccess');\r\n                    if (onSuccess) {\r\n                        FormValidation.Helper.call(onSuccess, [e, data]);\r\n                    }\r\n                });\r\n\r\n            // Set live mode\r\n            this.onLiveChange(fields, 'live', function() {\r\n                if (that._exceedThreshold($(this))) {\r\n                    that.validateField($(this));\r\n                }\r\n            });\r\n\r\n            fields.trigger($.Event(this.options.events.fieldInit), {\r\n                bv: this,   // Support backward\r\n                fv: this,\r\n                field: field,\r\n                element: fields\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Check if the field is excluded.\r\n         * Returning true means that the field will not be validated\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {Boolean}\r\n         */\r\n        _isExcluded: function($field) {\r\n            var ns           = this._namespace,\r\n                excludedAttr = $field.attr('data-' + ns + '-excluded'),\r\n                // I still need to check the 'name' attribute while initializing the field\r\n                field        = $field.attr('data-' + ns + '-field') || $field.attr('name');\r\n\r\n            switch (true) {\r\n                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true)):\r\n                case (excludedAttr === 'true'):\r\n                case (excludedAttr === ''):\r\n                    return true;\r\n\r\n                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false)):\r\n                case (excludedAttr === 'false'):\r\n                    return false;\r\n\r\n                default:\r\n                    if (this.options.excluded) {\r\n                        // Convert to array first\r\n                        if ('string' === typeof this.options.excluded) {\r\n                            this.options.excluded = $.map(this.options.excluded.split(','), function(item) {\r\n                                // Trim the spaces\r\n                                return $.trim(item);\r\n                            });\r\n                        }\r\n\r\n                        var length = this.options.excluded.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            if (('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))\r\n                                || ('function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true))\r\n                            {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get a field changed trigger event\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {String[]} The event names triggered on field change\r\n         */\r\n        _getFieldTrigger: function($field) {\r\n            var ns      = this._namespace,\r\n                trigger = $field.data(ns + '.trigger');\r\n            if (trigger) {\r\n                return trigger;\r\n            }\r\n\r\n            var type  = $field.attr('type'),\r\n                name  = $field.attr('data-' + ns + '-field'),\r\n                event = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $field.get(0).tagName) ? 'change' : this._changeEvent;\r\n            trigger   = ((this.options.fields[name] ? this.options.fields[name].trigger : null) || this.options.trigger || event).split(' ');\r\n\r\n            // Since the trigger data is used many times, I need to cache it to use later\r\n            $field.data(ns + '.trigger', trigger);\r\n\r\n            return trigger;\r\n        },\r\n\r\n        /**\r\n         * Get the error message for given field and validator\r\n         *\r\n         * @param {String} field The field name\r\n         * @param {String} validatorName The validator name\r\n         * @returns {String}\r\n         */\r\n        _getMessage: function(field, validatorName) {\r\n            if (!this.options.fields[field] || !FormValidation.Validator[validatorName]\r\n                || !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName])\r\n            {\r\n                return '';\r\n            }\r\n\r\n            switch (true) {\r\n                case !!this.options.fields[field].validators[validatorName].message:\r\n                    return this.options.fields[field].validators[validatorName].message;\r\n                case !!this.options.fields[field].message:\r\n                    return this.options.fields[field].message;\r\n                case !!FormValidation.I18n[this.options.locale][validatorName]['default']:\r\n                    return FormValidation.I18n[this.options.locale][validatorName]['default'];\r\n                default:\r\n                    return this.options.message;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the element to place the error messages\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} row\r\n         * @returns {jQuery}\r\n         */\r\n        _getMessageContainer: function($field, row) {\r\n            if (!this.options.err.parent) {\r\n                throw new Error('The err.parent option is not defined');\r\n            }\r\n\r\n            var $parent = $field.parent();\r\n            if ($parent.is(row)) {\r\n                return $parent;\r\n            }\r\n\r\n            var cssClasses = $parent.attr('class');\r\n            if (!cssClasses) {\r\n                return this._getMessageContainer($parent, row);\r\n            }\r\n\r\n            if (this.options.err.parent.test(cssClasses)) {\r\n                return $parent;\r\n            }\r\n\r\n            return this._getMessageContainer($parent, row);\r\n        },\r\n\r\n        /**\r\n         * Parse the add-on options from HTML attributes\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        _parseAddOnOptions: function() {\r\n            var ns     = this._namespace,\r\n                names  = this.$form.attr('data-' + ns + '-addons'),\r\n                addOns = this.options.addOns || {};\r\n\r\n            if (names) {\r\n                names = names.replace(/\\s/g, '').split(',');\r\n                for (var i = 0; i < names.length; i++) {\r\n                    if (!addOns[names[i]]) {\r\n                        addOns[names[i]] = {};\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Try to parse each add-on options\r\n            var addOn, attrMap, attr, option;\r\n            for (addOn in addOns) {\r\n                if (!FormValidation.AddOn[addOn]) {\r\n                    // Add-on is not found\r\n                    delete addOns[addOn];\r\n                    continue;\r\n                }\r\n\r\n                attrMap = FormValidation.AddOn[addOn].html5Attributes;\r\n                if (attrMap) {\r\n                    for (attr in attrMap) {\r\n                        option = this.$form.attr('data-' + ns + '-addons-' + addOn.toLowerCase() + '-' + attr.toLowerCase());\r\n                        if (option) {\r\n                            addOns[addOn][attrMap[attr]] = option;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return addOns;\r\n        },\r\n\r\n        /**\r\n         * Parse the validator options from HTML attributes\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {Object}\r\n         */\r\n        _parseOptions: function($field) {\r\n            var ns         = this._namespace,\r\n                field      = $field.attr('name') || $field.attr('data-' + ns + '-field'),\r\n                validators = {},\r\n                validator,\r\n                v,          // Validator name\r\n                attrName,\r\n                enabled,\r\n                optionName,\r\n                optionAttrName,\r\n                optionValue,\r\n                html5AttrName,\r\n                html5AttrMap;\r\n\r\n            for (v in FormValidation.Validator) {\r\n                validator    = FormValidation.Validator[v];\r\n                attrName     = 'data-' + ns + '-' + v.toLowerCase(),\r\n                enabled      = $field.attr(attrName) + '';\r\n                html5AttrMap = ('function' === typeof validator.enableByHtml5) ? validator.enableByHtml5($field) : null;\r\n\r\n                if ((html5AttrMap && enabled !== 'false')\r\n                    || (html5AttrMap !== true && ('' === enabled || 'true' === enabled || attrName === enabled.toLowerCase())))\r\n                {\r\n                    // Try to parse the options via attributes\r\n                    validator.html5Attributes = $.extend({}, {\r\n                                                    message: 'message',\r\n                                                    onerror: 'onError',\r\n                                                    onsuccess: 'onSuccess',\r\n                                                    transformer: 'transformer'\r\n                                                }, validator.html5Attributes);\r\n                    validators[v] = $.extend({}, html5AttrMap === true ? {} : html5AttrMap, validators[v]);\r\n\r\n                    for (html5AttrName in validator.html5Attributes) {\r\n                        optionName  = validator.html5Attributes[html5AttrName];\r\n                        optionAttrName = 'data-' + ns + '-' + v.toLowerCase() + '-' + html5AttrName,\r\n                        optionValue = $field.attr(optionAttrName);\r\n                        if (optionValue) {\r\n                            if ('true' === optionValue || optionAttrName === optionValue.toLowerCase()) {\r\n                                optionValue = true;\r\n                            } else if ('false' === optionValue) {\r\n                                optionValue = false;\r\n                            }\r\n                            validators[v][optionName] = optionValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            var opts = {\r\n                    autoFocus:   $field.attr('data-' + ns + '-autofocus'),\r\n                    err:         $field.attr('data-' + ns + '-err-container') || $field.attr('data-' + ns + '-container'), // Support backward\r\n                    excluded:    $field.attr('data-' + ns + '-excluded'),\r\n                    icon:        $field.attr('data-' + ns + '-icon') || $field.attr('data-' + ns + '-feedbackicons') || (this.options.fields && this.options.fields[field] ? this.options.fields[field].feedbackIcons : null), // Support backward\r\n                    message:     $field.attr('data-' + ns + '-message'),\r\n                    onError:     $field.attr('data-' + ns + '-onerror'),\r\n                    onStatus:    $field.attr('data-' + ns + '-onstatus'),\r\n                    onSuccess:   $field.attr('data-' + ns + '-onsuccess'),\r\n                    row:         $field.attr('data-' + ns + '-row') || $field.attr('data-' + ns + '-group') || (this.options.fields && this.options.fields[field] ? this.options.fields[field].group : null), // Support backward\r\n                    selector:    $field.attr('data-' + ns + '-selector'),\r\n                    threshold:   $field.attr('data-' + ns + '-threshold'),\r\n                    transformer: $field.attr('data-' + ns + '-transformer'),\r\n                    trigger:     $field.attr('data-' + ns + '-trigger'),\r\n                    verbose:     $field.attr('data-' + ns + '-verbose'),\r\n                    validators:  validators\r\n                },\r\n                emptyOptions    = $.isEmptyObject(opts),        // Check if the field options are set using HTML attributes\r\n                emptyValidators = $.isEmptyObject(validators);  // Check if the field validators are set using HTML attributes\r\n\r\n            if (!emptyValidators || (!emptyOptions && this.options.fields && this.options.fields[field])) {\r\n                opts.validators = validators;\r\n                return opts;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Called when all validations are completed\r\n         */\r\n        _submit: function() {\r\n            var isValid   = this.isValid(),\r\n                eventType = isValid ? this.options.events.formSuccess : this.options.events.formError,\r\n                e         = $.Event(eventType);\r\n\r\n            this.$form.trigger(e);\r\n\r\n            // Call default handler\r\n            // Check if whether the submit button is clicked\r\n            if (this.$submitButton) {\r\n                isValid ? this._onSuccess(e) : this._onError(e);\r\n            }\r\n        },\r\n\r\n        // ~~~~~~\r\n        // Events\r\n        // ~~~~~~\r\n\r\n        /**\r\n         * The default handler of error.form.fv event.\r\n         * It will be called when there is a invalid field\r\n         *\r\n         * @param {jQuery.Event} e The jQuery event object\r\n         */\r\n        _onError: function(e) {\r\n            if (e.isDefaultPrevented()) {\r\n                return;\r\n            }\r\n\r\n            if ('submitted' === this.options.live) {\r\n                // Enable live mode\r\n                this.options.live = 'enabled';\r\n\r\n                var that = this;\r\n                for (var field in this.options.fields) {\r\n                    (function(f) {\r\n                        var fields  = that.getFieldElements(f);\r\n                        if (fields.length) {\r\n                            that.onLiveChange(fields, 'live', function() {\r\n                                if (that._exceedThreshold($(this))) {\r\n                                    that.validateField($(this));\r\n                                }\r\n                            });\r\n                        }\r\n                    })(field);\r\n                }\r\n            }\r\n\r\n            // Determined the first invalid field which will be focused on automatically\r\n            var ns = this._namespace;\r\n            for (var i = 0; i < this.$invalidFields.length; i++) {\r\n                var $field    = this.$invalidFields.eq(i),\r\n                    autoFocus = this.isOptionEnabled($field.attr('data-' + ns + '-field'), 'autoFocus');\r\n                if (autoFocus) {\r\n                    // Focus the field\r\n                    $field.focus();\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Called after validating a field element\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} [validatorName] The validator name\r\n         */\r\n        _onFieldValidated: function($field, validatorName) {\r\n            var ns            = this._namespace,\r\n                field         = $field.attr('data-' + ns + '-field'),\r\n                validators    = this.options.fields[field].validators,\r\n                counter       = {},\r\n                numValidators = 0,\r\n                data          = {\r\n                    bv: this,   // Support backward\r\n                    fv: this,\r\n                    field: field,\r\n                    element: $field,\r\n                    validator: validatorName,\r\n                    result: $field.data(ns + '.response.' + validatorName)\r\n                };\r\n\r\n            // Trigger an event after given validator completes\r\n            if (validatorName) {\r\n                switch ($field.data(ns + '.result.' + validatorName)) {\r\n                    case this.STATUS_INVALID:\r\n                        $field.trigger($.Event(this.options.events.validatorError), data);\r\n                        break;\r\n                    case this.STATUS_VALID:\r\n                        $field.trigger($.Event(this.options.events.validatorSuccess), data);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            counter[this.STATUS_NOT_VALIDATED] = 0;\r\n            counter[this.STATUS_VALIDATING]    = 0;\r\n            counter[this.STATUS_INVALID]       = 0;\r\n            counter[this.STATUS_VALID]         = 0;\r\n\r\n            for (var v in validators) {\r\n                if (validators[v].enabled === false) {\r\n                    continue;\r\n                }\r\n\r\n                numValidators++;\r\n                var result = $field.data(ns + '.result.' + v);\r\n                if (result) {\r\n                    counter[result]++;\r\n                }\r\n            }\r\n\r\n            if (counter[this.STATUS_VALID] === numValidators) {\r\n                // Remove from the list of invalid fields\r\n                this.$invalidFields = this.$invalidFields.not($field);\r\n\r\n                $field.trigger($.Event(this.options.events.fieldSuccess), data);\r\n            }\r\n            // If all validators are completed and there is at least one validator which doesn't pass\r\n            else if ((counter[this.STATUS_NOT_VALIDATED] === 0 || !this.isOptionEnabled(field, 'verbose')) && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {\r\n                // Add to the list of invalid fields\r\n                this.$invalidFields = this.$invalidFields.add($field);\r\n\r\n                $field.trigger($.Event(this.options.events.fieldError), data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The default handler of success.form.fv event.\r\n         * It will be called when all the fields are valid\r\n         *\r\n         * @param {jQuery.Event} e The jQuery event object\r\n         */\r\n        _onSuccess: function(e) {\r\n            if (e.isDefaultPrevented()) {\r\n                return;\r\n            }\r\n\r\n            // Submit the form\r\n            this.disableSubmitButtons(true).defaultSubmit();\r\n        },\r\n\r\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n        // Abstract methods\r\n        // Need to be implemented by sub-class that supports specific framework\r\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n        /**\r\n         * Specific framework might need to adjust the icon position\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {jQuery} $icon The icon element\r\n         */\r\n        _fixIcon: function($field, $icon) {\r\n        },\r\n\r\n        /**\r\n         * Create a tooltip or popover\r\n         * It will be shown when focusing on the field\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} message The message\r\n         * @param {String} type Can be 'tooltip' or 'popover'\r\n         */\r\n        _createTooltip: function($field, message, type) {\r\n        },\r\n\r\n        /**\r\n         * Destroy the tooltip or popover\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} type Can be 'tooltip' or 'popover'\r\n         */\r\n        _destroyTooltip: function($field, type) {\r\n        },\r\n\r\n        /**\r\n         * Hide a tooltip or popover\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} type Can be 'tooltip' or 'popover'\r\n         */\r\n        _hideTooltip: function($field, type) {\r\n        },\r\n\r\n        /**\r\n         * Show a tooltip or popover\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} type Can be 'tooltip' or 'popover'\r\n         */\r\n        _showTooltip: function($field, type) {\r\n        },\r\n\r\n        // ~~~~~~~~~~~~~~\r\n        // Public methods\r\n        // ~~~~~~~~~~~~~~\r\n\r\n        /**\r\n         * Submit the form using default submission.\r\n         * It also does not perform any validations when submitting the form\r\n         */\r\n        defaultSubmit: function() {\r\n            var ns = this._namespace;\r\n            if (this.$submitButton) {\r\n                // Create hidden input to send the submit buttons\r\n                $('<input/>')\r\n                    .attr({\r\n                        'type': 'hidden',\r\n                        name: this.$submitButton.attr('name')\r\n                    })\r\n                    .attr('data-' + ns + '-submit-hidden', '')\r\n                    .val(this.$submitButton.val())\r\n                    .appendTo(this.$form);\r\n            }\r\n\r\n            // Submit form\r\n            this.$form.off('submit.' + ns).submit();\r\n        },\r\n\r\n        /**\r\n         * Disable/enable submit buttons\r\n         *\r\n         * @param {Boolean} disabled Can be true or false\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        disableSubmitButtons: function(disabled) {\r\n            if (!disabled) {\r\n                this.$form\r\n                    .find(this.options.button.selector)\r\n                        .removeAttr('disabled')\r\n                        .removeClass(this.options.button.disabled);\r\n            } else if (this.options.live !== 'disabled') {\r\n                // Don't disable if the live validating mode is disabled\r\n                this.$form\r\n                    .find(this.options.button.selector)\r\n                        .attr('disabled', 'disabled')\r\n                        .addClass(this.options.button.disabled);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieve the field elements by given name\r\n         *\r\n         * @param {String} field The field name\r\n         * @returns {null|jQuery[]}\r\n         */\r\n        getFieldElements: function(field) {\r\n            if (!this._cacheFields[field]) {\r\n                if (this.options.fields[field] && this.options.fields[field].selector) {\r\n                    // Look for the field inside the form first\r\n                    var f = this.$form.find(this.options.fields[field].selector);\r\n                    // If not found, search in entire document\r\n                    this._cacheFields[field] = f.length ? f : $(this.options.fields[field].selector);\r\n                } else {\r\n                    this._cacheFields[field] = this.$form.find('[name=\"' + field + '\"]');\r\n                }\r\n            }\r\n\r\n            return this._cacheFields[field];\r\n        },\r\n\r\n        /**\r\n         * Get the field value after applying transformer\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} validatorName The validator name\r\n         * @returns {String}\r\n         */\r\n        getFieldValue: function(field, validatorName) {\r\n            var $field, ns = this._namespace;\r\n            if ('string' === typeof field) {\r\n                $field = this.getFieldElements(field);\r\n                if ($field.length === 0) {\r\n                    return null;\r\n                }\r\n            } else {\r\n                $field = field;\r\n                field  = $field.attr('data-' + ns + '-field');\r\n            }\r\n\r\n            if (!field || !this.options.fields[field]) {\r\n                return $field.val();\r\n            }\r\n\r\n            var transformer = (this.options.fields[field].validators && this.options.fields[field].validators[validatorName]\r\n                                ? this.options.fields[field].validators[validatorName].transformer : null)\r\n                                || this.options.fields[field].transformer;\r\n            return transformer ? FormValidation.Helper.call(transformer, [$field, validatorName]) : $field.val();\r\n        },\r\n\r\n        /**\r\n         * Get the namespace\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getNamespace: function() {\r\n            return this._namespace;\r\n        },\r\n\r\n        /**\r\n         * Get the field options\r\n         *\r\n         * @param {String|jQuery} [field] The field name or field element. If it is not set, the method returns the form options\r\n         * @param {String} [validator] The name of validator. It null, the method returns form options\r\n         * @param {String} [option] The option name\r\n         * @return {String|Object}\r\n         */\r\n        getOptions: function(field, validator, option) {\r\n            var ns = this._namespace;\r\n            if (!field) {\r\n                return option ? this.options[option] : this.options;\r\n            }\r\n            if ('object' === typeof field) {\r\n                field = field.attr('data-' + ns + '-field');\r\n            }\r\n            if (!this.options.fields[field]) {\r\n                return null;\r\n            }\r\n\r\n            var options = this.options.fields[field];\r\n            if (!validator) {\r\n                return option ? options[option] : options;\r\n            }\r\n            if (!options.validators || !options.validators[validator]) {\r\n                return null;\r\n            }\r\n\r\n            return option ? options.validators[validator][option] : options.validators[validator];\r\n        },\r\n\r\n        /**\r\n         * Get the validating result of field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} validatorName The validator name\r\n         * @returns {String} The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'\r\n         */\r\n        getStatus: function(field, validatorName) {\r\n            var ns = this._namespace;\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    return field.data(ns + '.result.' + validatorName);\r\n                case 'string':\r\n                /* falls through */\r\n                default:\r\n                    return this.getFieldElements(field).eq(0).data(ns + '.result.' + validatorName);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check whether or not a field option is enabled\r\n         *\r\n         * @param {String} field The field name\r\n         * @param {String} option The option name, \"verbose\", \"autoFocus\", for example\r\n         * @returns {Boolean}\r\n         */\r\n        isOptionEnabled: function(field, option) {\r\n            if (this.options.fields[field] && (this.options.fields[field][option] === 'true' || this.options.fields[field][option] === true)) {\r\n                return true;\r\n            }\r\n            if (this.options.fields[field] && (this.options.fields[field][option] === 'false' || this.options.fields[field][option] === false)) {\r\n                return false;\r\n            }\r\n            return this.options[option] === 'true' || this.options[option] === true;\r\n        },\r\n\r\n        /**\r\n         * Check the form validity\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function() {\r\n            for (var field in this.options.fields) {\r\n                if (!this.isValidField(field)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Check if all fields inside a given container are valid.\r\n         * It's useful when working with a wizard-like such as tab, collapse\r\n         *\r\n         * @param {String|jQuery} container The container selector or element\r\n         * @returns {Boolean|null} Returns one of three values\r\n         * - true, if all fields inside the container are valid\r\n         * - false, if there is one invalid field inside the container\r\n         * - null, if the container consists of at least one field which is not validated yet or being validated\r\n         */\r\n        isValidContainer: function(container) {\r\n            var that       = this,\r\n                ns         = this._namespace,\r\n                map        = {},\r\n                $container = ('string' === typeof container) ? $(container) : container;\r\n            if ($container.length === 0) {\r\n                return true;\r\n            }\r\n\r\n            $container.find('[data-' + ns + '-field]').each(function() {\r\n                var $field = $(this),\r\n                    field  = $field.attr('data-' + ns + '-field');\r\n                if (!that._isExcluded($field) && !map[field]) {\r\n                    map[field] = $field;\r\n                }\r\n            });\r\n\r\n            for (var field in map) {\r\n                var $f      = map[field],\r\n                    $errors = $f.data(ns + '.messages')\r\n                                .find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for=\"' + field + '\"]');\r\n\r\n                if ($errors.filter('[data-' + ns + '-result=\"' + this.STATUS_INVALID + '\"]').length > 0) {\r\n                    return false;\r\n                }\r\n\r\n                // If the field is not validated\r\n                if ($errors.filter('[data-' + ns + '-result=\"' + this.STATUS_NOT_VALIDATED + '\"]').length > 0\r\n                    || $errors.filter('[data-' + ns + '-result=\"' + this.STATUS_VALIDATING + '\"]').length > 0)\r\n                {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Check if the field is valid or not\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @returns {Boolean}\r\n         */\r\n        isValidField: function(field) {\r\n            var ns     = this._namespace,\r\n                fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-' + ns + '-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {\r\n                return true;\r\n            }\r\n\r\n            var type  = fields.attr('type'),\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n                $field, validatorName, status;\r\n            for (var i = 0; i < total; i++) {\r\n                $field = fields.eq(i);\r\n                if (this._isExcluded($field)) {\r\n                    continue;\r\n                }\r\n\r\n                for (validatorName in this.options.fields[field].validators) {\r\n                    if (this.options.fields[field].validators[validatorName].enabled === false) {\r\n                        continue;\r\n                    }\r\n\r\n                    status = $field.data(ns + '.result.' + validatorName);\r\n                    if (status !== this.STATUS_VALID) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Detach a handler function for a field live change event\r\n         *\r\n         * @param {jQuery[]} $fields The field elements\r\n         * @param {String} namespace The event namespace\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        offLiveChange: function($fields, namespace) {\r\n            if ($fields === null || $fields.length === 0) {\r\n                return this;\r\n            }\r\n\r\n            var ns      = this._namespace,\r\n                trigger = this._getFieldTrigger($fields.eq(0)),\r\n                events  = $.map(trigger, function(item) {\r\n                    return item + '.' + namespace + '.' + ns;\r\n                }).join(' ');\r\n\r\n            $fields.off(events);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach a handler function for a field live change event\r\n         *\r\n         * @param {jQuery[]} $fields The field elements\r\n         * @param {String} namespace The event namespace\r\n         * @param {Function} handler The handler function\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        onLiveChange: function($fields, namespace, handler) {\r\n            if ($fields === null || $fields.length === 0) {\r\n                return this;\r\n            }\r\n\r\n            var ns      = this._namespace,\r\n                trigger = this._getFieldTrigger($fields.eq(0)),\r\n                events  = $.map(trigger, function(item) {\r\n                    return item + '.' + namespace + '.' + ns;\r\n                }).join(' ');\r\n\r\n            switch (this.options.live) {\r\n                case 'submitted':\r\n                    break;\r\n                case 'disabled':\r\n                    $fields.off(events);\r\n                    break;\r\n                case 'enabled':\r\n                /* falls through */\r\n                default:\r\n                    $fields.off(events).on(events, function(e) {\r\n                        handler.apply(this, arguments);\r\n                    });\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update the error message\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} validator The validator name\r\n         * @param {String} message The message\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        updateMessage: function(field, validator, message) {\r\n            var that    = this,\r\n                ns      = this._namespace,\r\n                $fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    $fields = field;\r\n                    field   = field.attr('data-' + ns + '-field');\r\n                    break;\r\n                case 'string':\r\n                    $fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            $fields.each(function() {\r\n                $(this)\r\n                    .data(ns + '.messages')\r\n                    .find('.' + that.options.err.clazz + '[data-' + ns + '-validator=\"' + validator + '\"][data-' + ns + '-for=\"' + field + '\"]').html(message);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update all validating results of field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'\r\n         * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        updateStatus: function(field, status, validatorName) {\r\n            var ns     = this._namespace,\r\n                fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-' + ns + '-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (!field || !this.options.fields[field]) {\r\n                return this;\r\n            }\r\n\r\n            if (status === this.STATUS_NOT_VALIDATED) {\r\n                // Reset the flag\r\n                // To prevent the form from doing submit when a deferred validator returns true while typing\r\n                this._submitIfValid = false;\r\n            }\r\n\r\n            var that  = this,\r\n                type  = fields.attr('type'),\r\n                row   = this.options.fields[field].row || this.options.row.selector,\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field       = fields.eq(i);\r\n                if (this._isExcluded($field)) {\r\n                    continue;\r\n                }\r\n\r\n                var $parent      = $field.closest(row),\r\n                    $message     = $field.data(ns + '.messages'),\r\n                    $allErrors   = $message.find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for=\"' + field + '\"]'),\r\n                    $errors      = validatorName ? $allErrors.filter('[data-' + ns + '-validator=\"' + validatorName + '\"]') : $allErrors,\r\n                    $icon        = $field.data(ns + '.icon'),\r\n                    // Support backward\r\n                    container    = ('function' === typeof (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container))\r\n                                    ? (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container).call(this, $field, this)\r\n                                    : (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container),\r\n                    isValidField = null;\r\n\r\n                // Update status\r\n                if (validatorName) {\r\n                    $field.data(ns + '.result.' + validatorName, status);\r\n                } else {\r\n                    for (var v in this.options.fields[field].validators) {\r\n                        $field.data(ns + '.result.' + v, status);\r\n                    }\r\n                }\r\n\r\n                // Show/hide error elements and feedback icons\r\n                $errors.attr('data-' + ns + '-result', status);\r\n\r\n                switch (status) {\r\n                    case this.STATUS_VALIDATING:\r\n                        isValidField = null;\r\n                        this.disableSubmitButtons(true);\r\n                        $field.removeClass(this.options.control.valid).removeClass(this.options.control.invalid);\r\n                        $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid);\r\n                        if ($icon) {\r\n                            $icon.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).addClass(this.options.icon.validating).show();\r\n                        }\r\n                        break;\r\n\r\n                    case this.STATUS_INVALID:\r\n                        isValidField = false;\r\n                        this.disableSubmitButtons(true);\r\n                        $field.removeClass(this.options.control.valid).addClass(this.options.control.invalid);\r\n                        $parent.removeClass(this.options.row.valid).addClass(this.options.row.invalid);\r\n                        if ($icon) {\r\n                            $icon.removeClass(this.options.icon.valid).removeClass(this.options.icon.validating).addClass(this.options.icon.invalid).show();\r\n                        }\r\n                        break;\r\n\r\n                    case this.STATUS_VALID:\r\n                        // If the field is valid (passes all validators)\r\n                        isValidField = ($allErrors.filter('[data-' + ns + '-result=\"' + this.STATUS_NOT_VALIDATED +'\"]').length === 0)\r\n                                     ? ($allErrors.filter('[data-' + ns + '-result=\"' + this.STATUS_VALID +'\"]').length === $allErrors.length)  // All validators are completed\r\n                                     : null;                                                                                                    // There are some validators that have not done\r\n\r\n                        $field.removeClass(this.options.control.valid).removeClass(this.options.control.invalid);\r\n                        if (isValidField !== null) {\r\n                            this.disableSubmitButtons(this.$submitButton ? !this.isValid() : !isValidField);\r\n                            $field.addClass(isValidField ? this.options.control.valid : this.options.control.invalid);\r\n                            if ($icon) {\r\n                                var isValidating = ($allErrors.filter('[data-bv-result=\"' + this.STATUS_VALIDATING +'\"]').length > 0);\r\n                                $icon\r\n                                    .removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).removeClass(this.options.icon.valid)\r\n                                    .addClass(isValidField ? this.options.icon.valid : (isValidating ? this.options.icon.validating : this.options.icon.invalid))\r\n                                    .show();\r\n                            }\r\n                        }\r\n\r\n                        var isValidContainer = this.isValidContainer($parent);\r\n                        if (isValidContainer !== null) {\r\n                            $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid).addClass(isValidContainer ? this.options.row.valid : this.options.row.invalid);\r\n                        }\r\n                        break;\r\n\r\n                    case this.STATUS_NOT_VALIDATED:\r\n                    /* falls through */\r\n                    default:\r\n                        isValidField = null;\r\n                        this.disableSubmitButtons(false);\r\n                        $field.removeClass(this.options.control.valid).removeClass(this.options.control.invalid);\r\n                        $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid);\r\n                        if ($icon) {\r\n                            $icon.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).hide();\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                if ($icon && ('tooltip' === container || 'popover' === container)) {\r\n                    (isValidField === false)\r\n                        // Only show the first error message\r\n                        ? this._createTooltip($field, $allErrors.filter('[data-' + ns + '-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html(), container)\r\n                        : this._destroyTooltip($field, container);\r\n                } else {\r\n                    (status === this.STATUS_INVALID) ? $errors.show() : $errors.hide();\r\n                }\r\n\r\n                // Trigger an event\r\n                $field.trigger($.Event(this.options.events.fieldStatus), {\r\n                    bv: this,   // Support backward\r\n                    fv: this,\r\n                    field: field,\r\n                    element: $field,\r\n                    status: status\r\n                });\r\n                this._onFieldValidated($field, validatorName);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate the form\r\n         *\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        validate: function() {\r\n            if (!this.options.fields) {\r\n                return this;\r\n            }\r\n            this.disableSubmitButtons(true);\r\n\r\n            this._submitIfValid = false;\r\n            for (var field in this.options.fields) {\r\n                this.validateField(field);\r\n            }\r\n\r\n            this._submit();\r\n            this._submitIfValid = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate given field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        validateField: function(field) {\r\n            var ns     = this._namespace,\r\n                fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-' + ns + '-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {\r\n                return this;\r\n            }\r\n\r\n            var that       = this,\r\n                type       = fields.attr('type'),\r\n                total      = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n                updateAll  = ('radio' === type || 'checkbox' === type),\r\n                validators = this.options.fields[field].validators,\r\n                verbose    = this.isOptionEnabled(field, 'verbose'),\r\n                validatorName,\r\n                validateResult;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field = fields.eq(i);\r\n                if (this._isExcluded($field)) {\r\n                    continue;\r\n                }\r\n\r\n                var stop = false;\r\n                for (validatorName in validators) {\r\n                    if ($field.data(ns + '.dfs.' + validatorName)) {\r\n                        $field.data(ns + '.dfs.' + validatorName).reject();\r\n                    }\r\n                    if (stop) {\r\n                        break;\r\n                    }\r\n\r\n                    // Don't validate field if it is already done\r\n                    var result = $field.data(ns + '.result.' + validatorName);\r\n                    if (result === this.STATUS_VALID || result === this.STATUS_INVALID) {\r\n                        this._onFieldValidated($field, validatorName);\r\n                        continue;\r\n                    } else if (validators[validatorName].enabled === false) {\r\n                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALID, validatorName);\r\n                        continue;\r\n                    }\r\n\r\n                    $field.data(ns + '.result.' + validatorName, this.STATUS_VALIDATING);\r\n                    validateResult = FormValidation.Validator[validatorName].validate(this, $field, validators[validatorName]);\r\n\r\n                    // validateResult can be a $.Deferred object ...\r\n                    if ('object' === typeof validateResult && validateResult.resolve) {\r\n                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);\r\n                        $field.data(ns + '.dfs.' + validatorName, validateResult);\r\n\r\n                        validateResult.done(function($f, v, response) {\r\n                            // v is validator name\r\n                            $f.removeData(ns + '.dfs.' + v).data(ns + '.response.' + v, response);\r\n                            if (response.message) {\r\n                                that.updateMessage($f, v, response.message);\r\n                            }\r\n\r\n                            that.updateStatus(updateAll ? $f.attr('data-' + ns + '-field') : $f, response.valid ? that.STATUS_VALID : that.STATUS_INVALID, v);\r\n\r\n                            if (response.valid && that._submitIfValid === true) {\r\n                                // If a remote validator returns true and the form is ready to submit, then do it\r\n                                that._submit();\r\n                            } else if (!response.valid && !verbose) {\r\n                                stop = true;\r\n                            }\r\n                        });\r\n                    }\r\n                    // ... or object { valid: true/false, message: 'dynamic message', otherKey: value, ... }\r\n                    else if ('object' === typeof validateResult && validateResult.valid !== undefined) {\r\n                        $field.data(ns + '.response.' + validatorName, validateResult);\r\n                        if (validateResult.message) {\r\n                            this.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);\r\n                        }\r\n                        this.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n                        if (!validateResult.valid && !verbose) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    // ... or a boolean value\r\n                    else if ('boolean' === typeof validateResult) {\r\n                        $field.data(ns + '.response.' + validatorName, validateResult);\r\n                        this.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n                        if (!validateResult && !verbose) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n        // Useful APIs which aren't used internally\r\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n        /**\r\n         * Add a new field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {Object} [options] The validator rules\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        addField: function(field, options) {\r\n            var ns     = this._namespace,\r\n                fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-' + ns + '-field') || field.attr('name');\r\n                    break;\r\n                case 'string':\r\n                    delete this._cacheFields[field];\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            fields.attr('data-' + ns + '-field', field);\r\n\r\n            var type  = fields.attr('type'),\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field = fields.eq(i);\r\n\r\n                // Try to parse the options from HTML attributes\r\n                var opts = this._parseOptions($field);\r\n                opts = (opts === null) ? options : $.extend(true, options, opts);\r\n\r\n                this.options.fields[field] = $.extend(true, this.options.fields[field], opts);\r\n\r\n                // Update the cache\r\n                this._cacheFields[field] = this._cacheFields[field] ? this._cacheFields[field].add($field) : $field;\r\n\r\n                // Init the element\r\n                this._initField(('checkbox' === type || 'radio' === type) ? field : $field);\r\n            }\r\n\r\n            this.disableSubmitButtons(false);\r\n            // Trigger an event\r\n            this.$form.trigger($.Event(this.options.events.fieldAdded), {\r\n                field: field,\r\n                element: fields,\r\n                options: this.options.fields[field]\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroy the plugin\r\n         * It will remove all error messages, feedback icons and turn off the events\r\n         */\r\n        destroy: function() {\r\n            var ns = this._namespace, i, field, fields, $field, validator, $icon, row;\r\n\r\n            // Destroy the validators first\r\n            for (field in this.options.fields) {\r\n                fields = this.getFieldElements(field);\r\n                for (i = 0; i < fields.length; i++) {\r\n                    $field = fields.eq(i);\r\n                    for (validator in this.options.fields[field].validators) {\r\n                        if ($field.data(ns + '.dfs.' + validator)) {\r\n                            $field.data(ns + '.dfs.' + validator).reject();\r\n                        }\r\n                        $field.removeData(ns + '.result.' + validator)\r\n                              .removeData(ns + '.response.' + validator)\r\n                              .removeData(ns + '.dfs.' + validator);\r\n\r\n                        // Destroy the validator\r\n                        if ('function' === typeof FormValidation.Validator[validator].destroy) {\r\n                            FormValidation.Validator[validator].destroy(this, $field, this.options.fields[field].validators[validator]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Remove messages and icons\r\n            for (field in this.options.fields) {\r\n                fields = this.getFieldElements(field);\r\n                row    = this.options.fields[field].row || this.options.row.selector;\r\n                for (i = 0; i < fields.length; i++) {\r\n                    $field = fields.eq(i);\r\n                    $field\r\n                        // Remove all error messages\r\n                        .data(ns + '.messages')\r\n                            .find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for=\"' + field + '\"]').remove().end()\r\n                            .end()\r\n                        .removeData(ns + '.messages')\r\n                        // Remove feedback classes\r\n                        .closest(row)\r\n                            .removeClass(this.options.row.valid)\r\n                            .removeClass(this.options.row.invalid)\r\n                            .removeClass(this.options.row.feedback)\r\n                            .end()\r\n                        // Turn off events\r\n                        .off('.' + ns)\r\n                        .removeAttr('data-' + ns + '-field');\r\n\r\n                    // Remove feedback icons, tooltip/popover container\r\n                    // Support backward\r\n                    var container = ('function' === typeof (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container))\r\n                                    ? (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container).call(this, $field, this)\r\n                                    : (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container);\r\n                    if ('tooltip' === container || 'popover' === container) {\r\n                        this._destroyTooltip($field, container);\r\n                    }\r\n\r\n                    $icon = $field.data(ns + '.icon');\r\n                    if ($icon) {\r\n                        $icon.remove();\r\n                    }\r\n                    $field.removeData(ns + '.icon')\r\n                          // It's safe to remove trigger data here, because it might be used when destroying the validator\r\n                          .removeData(ns + '.trigger');\r\n                }\r\n            }\r\n\r\n            // Destroy the add-ons\r\n            for (var addOn in this.options.addOns) {\r\n                if ('function' === typeof FormValidation.AddOn[addOn].destroy) {\r\n                    FormValidation.AddOn[addOn].destroy(this, this.options.addOns[addOn]);\r\n                }\r\n            }\r\n\r\n            this.disableSubmitButtons(false);   // Enable submit buttons\r\n            this.$hiddenButton.remove();        // Remove the hidden button\r\n\r\n            this.$form\r\n                .removeClass(this.options.elementClass)\r\n                .off('.' + ns)\r\n                .removeData('bootstrapValidator')   // Support backward\r\n                .removeData('formValidation')\r\n                // Remove generated hidden elements\r\n                .find('[data-' + ns + '-submit-hidden]').remove().end()\r\n                .find('[type=\"submit\"]')\r\n                    .off('click.' + ns);\r\n        },\r\n\r\n        /**\r\n         * Enable/Disable all validators to given field\r\n         *\r\n         * @param {String} field The field name\r\n         * @param {Boolean} enabled Enable/Disable field validators\r\n         * @param {String} [validatorName] The validator name. If null, all validators will be enabled/disabled\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        enableFieldValidators: function(field, enabled, validatorName) {\r\n            var validators = this.options.fields[field].validators;\r\n\r\n            // Enable/disable particular validator\r\n            if (validatorName\r\n                && validators\r\n                && validators[validatorName] && validators[validatorName].enabled !== enabled)\r\n            {\r\n                this.options.fields[field].validators[validatorName].enabled = enabled;\r\n                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validatorName);\r\n            }\r\n            // Enable/disable all validators\r\n            else if (!validatorName && this.options.fields[field].enabled !== enabled) {\r\n                this.options.fields[field].enabled = enabled;\r\n                for (var v in validators) {\r\n                    this.enableFieldValidators(field, enabled, v);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Some validators have option which its value is dynamic.\r\n         * For example, the zipCode validator has the country option which might be changed dynamically by a select element.\r\n         *\r\n         * @param {jQuery|String} field The field name or element\r\n         * @param {String|Function} option The option which can be determined by:\r\n         * - a string\r\n         * - name of field which defines the value\r\n         * - name of function which returns the value\r\n         * - a function returns the value\r\n         *\r\n         * The callback function has the format of\r\n         *      callback: function(value, validator, $field) {\r\n         *          // value is the value of field\r\n         *          // validator is the BootstrapValidator instance\r\n         *          // $field is the field element\r\n         *      }\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getDynamicOption: function(field, option) {\r\n            var $field = ('string' === typeof field) ? this.getFieldElements(field) : field,\r\n                value  = $field.val();\r\n\r\n            // Option can be determined by\r\n            // ... a function\r\n            if ('function' === typeof option) {\r\n                return FormValidation.Helper.call(option, [value, this, $field]);\r\n            }\r\n            // ... value of other field\r\n            else if ('string' === typeof option) {\r\n                var $f = this.getFieldElements(option);\r\n                if ($f.length) {\r\n                    return $f.val();\r\n                }\r\n                // ... return value of callback\r\n                else {\r\n                    return FormValidation.Helper.call(option, [value, this, $field]) || option;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Get the form element\r\n         *\r\n         * @returns {jQuery}\r\n         */\r\n        getForm: function() {\r\n            return this.$form;\r\n        },\r\n\r\n        /**\r\n         * Get the list of invalid fields\r\n         *\r\n         * @returns {jQuery[]}\r\n         */\r\n        getInvalidFields: function() {\r\n            return this.$invalidFields;\r\n        },\r\n\r\n        /**\r\n         * Get the current locale\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLocale: function() {\r\n            return this.options.locale;\r\n        },\r\n\r\n        /**\r\n         * Get the error messages\r\n         *\r\n         * @param {String|jQuery} [field] The field name or field element\r\n         * If the field is not defined, the method returns all error messages of all fields\r\n         * @param {String} [validator] The name of validator\r\n         * If the validator is not defined, the method returns error messages of all validators\r\n         * @returns {String[]}\r\n         */\r\n        getMessages: function(field, validator) {\r\n            var that     = this,\r\n                ns       = this._namespace,\r\n                messages = [],\r\n                $fields  = $([]);\r\n\r\n            switch (true) {\r\n                case (field && 'object' === typeof field):\r\n                    $fields = field;\r\n                    break;\r\n                case (field && 'string' === typeof field):\r\n                    var f = this.getFieldElements(field);\r\n                    if (f.length > 0) {\r\n                        var type = f.attr('type');\r\n                        $fields = ('radio' === type || 'checkbox' === type) ? f.eq(0) : f;\r\n                    }\r\n                    break;\r\n                default:\r\n                    $fields = this.$invalidFields;\r\n                    break;\r\n            }\r\n\r\n            var filter = validator ? '[data-' + ns + '-validator=\"' + validator + '\"]' : '';\r\n            $fields.each(function() {\r\n                messages = messages.concat(\r\n                    $(this)\r\n                        .data(ns + '.messages')\r\n                        .find('.' + that.options.err.clazz + '[data-' + ns + '-for=\"' + $(this).attr('data-' + ns + '-field') + '\"][data-' + ns + '-result=\"' + that.STATUS_INVALID + '\"]' + filter)\r\n                        .map(function() {\r\n                            var v = $(this).attr('data-' + ns + '-validator'),\r\n                                f = $(this).attr('data-' + ns + '-for');\r\n                            return (that.options.fields[f].validators[v].enabled === false) ? '' : $(this).html();\r\n                        })\r\n                        .get()\r\n                );\r\n            });\r\n\r\n            return messages;\r\n        },\r\n\r\n        /**\r\n         * Returns the clicked submit button\r\n         *\r\n         * @returns {jQuery}\r\n         */\r\n        getSubmitButton: function() {\r\n            return this.$submitButton;\r\n        },\r\n\r\n        /**\r\n         * Remove a given field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        removeField: function(field) {\r\n            var ns     = this._namespace,\r\n                fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-' + ns + '-field') || field.attr('name');\r\n                    fields.attr('data-' + ns + '-field', field);\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (fields.length === 0) {\r\n                return this;\r\n            }\r\n\r\n            var type  = fields.attr('type'),\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field = fields.eq(i);\r\n\r\n                // Remove from the list of invalid fields\r\n                this.$invalidFields = this.$invalidFields.not($field);\r\n\r\n                // Update the cache\r\n                this._cacheFields[field] = this._cacheFields[field].not($field);\r\n            }\r\n\r\n            if (!this._cacheFields[field] || this._cacheFields[field].length === 0) {\r\n                delete this.options.fields[field];\r\n            }\r\n            if ('checkbox' === type || 'radio' === type) {\r\n                this._initField(field);\r\n            }\r\n\r\n            this.disableSubmitButtons(false);\r\n            // Trigger an event\r\n            this.$form.trigger($.Event(this.options.events.fieldRemoved), {\r\n                field: field,\r\n                element: fields\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset given field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        resetField: function(field, resetValue) {\r\n            var ns      = this._namespace,\r\n                $fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    $fields = field;\r\n                    field   = field.attr('data-' + ns + '-field');\r\n                    break;\r\n                case 'string':\r\n                    $fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            var total = $fields.length;\r\n            if (this.options.fields[field]) {\r\n                for (var i = 0; i < total; i++) {\r\n                    for (var validator in this.options.fields[field].validators) {\r\n                        $fields.eq(i).removeData(ns + '.dfs.' + validator);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Mark field as not validated yet\r\n            this.updateStatus(field, this.STATUS_NOT_VALIDATED);\r\n\r\n            if (resetValue) {\r\n                var type = $fields.attr('type');\r\n                ('radio' === type || 'checkbox' === type) ? $fields.removeAttr('checked').removeAttr('selected') : $fields.val('');\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset the form\r\n         *\r\n         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        resetForm: function(resetValue) {\r\n            for (var field in this.options.fields) {\r\n                this.resetField(field, resetValue);\r\n            }\r\n\r\n            this.$invalidFields = $([]);\r\n            this.$submitButton  = null;\r\n\r\n            // Enable submit buttons\r\n            this.disableSubmitButtons(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Revalidate given field\r\n         * It's used when you need to revalidate the field which its value is updated by other plugin\r\n         *\r\n         * @param {String|jQuery} field The field name of field element\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        revalidateField: function(field) {\r\n            this.updateStatus(field, this.STATUS_NOT_VALIDATED)\r\n                .validateField(field);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set the locale\r\n         *\r\n         * @param {String} locale The locale in format of countrycode_LANGUAGECODE\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        setLocale: function(locale) {\r\n            this.options.locale = locale;\r\n            this.$form.trigger($.Event(this.options.events.localeChanged), {\r\n                locale: locale,\r\n                bv: this,   // Support backward\r\n                fv: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update the option of a specific validator\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} validator The validator name\r\n         * @param {String} option The option name\r\n         * @param {String} value The value to set\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        updateOption: function(field, validator, option, value) {\r\n            var ns = this._namespace;\r\n            if ('object' === typeof field) {\r\n                field = field.attr('data-' + ns + '-field');\r\n            }\r\n            if (this.options.fields[field] && this.options.fields[field].validators[validator]) {\r\n                this.options.fields[field].validators[validator][option] = value;\r\n                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validator);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate given container\r\n         * It can be used with isValidContainer() when you want to work with wizard form\r\n         *\r\n         * @param {String|jQuery} container The container selector or element\r\n         * @returns {FormValidation.Base}\r\n         */\r\n        validateContainer: function(container) {\r\n            var that       = this,\r\n                ns         = this._namespace,\r\n                map        = {},\r\n                $container = ('string' === typeof container) ? $(container) : container;\r\n            if ($container.length === 0) {\r\n                return this;\r\n            }\r\n\r\n            $container.find('[data-' + ns + '-field]').each(function() {\r\n                var $field = $(this),\r\n                    field  = $field.attr('data-' + ns + '-field');\r\n                if (!that._isExcluded($field) && !map[field]) {\r\n                    map[field] = $field;\r\n                }\r\n            });\r\n\r\n            for (var field in map) {\r\n                this.validateField(map[field]);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n\r\n    // Plugin definition\r\n    $.fn.formValidation = function(option) {\r\n        var params = arguments;\r\n        return this.each(function() {\r\n            var $this   = $(this),\r\n                data    = $this.data('formValidation'),\r\n                options = 'object' === typeof option && option;\r\n            if (!data) {\r\n                var framework = (options.framework || $this.attr('data-fv-framework') || 'bootstrap').toLowerCase();\r\n                switch (framework) {\r\n                    case 'foundation':\r\n                        data = new FormValidation.Framework.Foundation(this, options);\r\n                        break;\r\n\r\n                    case 'pure':\r\n                        data = new FormValidation.Framework.Pure(this, options);\r\n                        break;\r\n\r\n                    case 'semantic':\r\n                        data = new FormValidation.Framework.Semantic(this, options);\r\n                        break;\r\n\r\n                    case 'uikit':\r\n                        data = new FormValidation.Framework.UIKit(this, options);\r\n                        break;\r\n\r\n                    case 'bootstrap':\r\n                    /* falls through */\r\n                    default:\r\n                        data = new FormValidation.Framework.Bootstrap(this, options);\r\n                        break;\r\n                }\r\n\r\n                $this.addClass('fv-form-' + framework)\r\n                     .data('formValidation', data);\r\n            }\r\n\r\n            // Allow to call plugin method\r\n            if ('string' === typeof option) {\r\n                data[option].apply(data, Array.prototype.slice.call(params, 1));\r\n            }\r\n        });\r\n    };\r\n\r\n    $.fn.formValidation.Constructor = FormValidation.Base;\r\n\r\n    // The default options\r\n    // Sorted in alphabetical order\r\n    $.fn.formValidation.DEFAULT_OPTIONS = {\r\n        // The first invalid field will be focused automatically\r\n        autoFocus: true,\r\n\r\n        // The form CSS class\r\n        elementClass: 'fv-form',\r\n\r\n        // Use custom event name to avoid window.onerror being invoked by jQuery\r\n        // See #630\r\n        events: {\r\n            // Support backward\r\n            formInit: 'init.form.fv',\r\n            formError: 'err.form.fv',\r\n            formSuccess: 'success.form.fv',\r\n            fieldAdded: 'added.field.fv',\r\n            fieldRemoved: 'removed.field.fv',\r\n            fieldInit: 'init.field.fv',\r\n            fieldError: 'err.field.fv',\r\n            fieldSuccess: 'success.field.fv',\r\n            fieldStatus: 'status.field.fv',\r\n            localeChanged: 'changed.locale.fv',\r\n            validatorError: 'err.validator.fv',\r\n            validatorSuccess: 'success.validator.fv'\r\n        },\r\n\r\n        // Indicate fields which won't be validated\r\n        // By default, the plugin will not validate the following kind of fields:\r\n        // - disabled\r\n        // - hidden\r\n        // - invisible\r\n        //\r\n        // The setting consists of jQuery filters. Accept 3 formats:\r\n        // - A string. Use a comma to separate filter\r\n        // - An array. Each element is a filter\r\n        // - An array. Each element can be a callback function\r\n        //      function($field, validator) {\r\n        //          $field is jQuery object representing the field element\r\n        //          validator is the BootstrapValidator instance\r\n        //          return true or false;\r\n        //      }\r\n        //\r\n        // The 3 following settings are equivalent:\r\n        //\r\n        // 1) ':disabled, :hidden, :not(:visible)'\r\n        // 2) [':disabled', ':hidden', ':not(:visible)']\r\n        // 3) [':disabled', ':hidden', function($field) {\r\n        //        return !$field.is(':visible');\r\n        //    }]\r\n        excluded: [':disabled', ':hidden', ':not(:visible)'],\r\n\r\n        // Map the field name with validator rules\r\n        fields: null,\r\n\r\n        // Live validating option\r\n        // Can be one of 3 values:\r\n        // - enabled: The plugin validates fields as soon as they are changed\r\n        // - disabled: Disable the live validating. The error messages are only shown after the form is submitted\r\n        // - submitted: The live validating is enabled after the form is submitted\r\n        live: 'enabled',\r\n\r\n        // Locale in the format of languagecode_COUNTRYCODE\r\n        locale: 'en_US',\r\n\r\n        // Default invalid message\r\n        message: 'This value is not valid',\r\n\r\n        // The field will not be live validated if its length is less than this number of characters\r\n        threshold: null,\r\n\r\n        // Whether to be verbose when validating a field or not.\r\n        // Possible values:\r\n        // - true:  when a field has multiple validators, all of them will be checked, and respectively - if errors occur in\r\n        //          multiple validators, all of them will be displayed to the user\r\n        // - false: when a field has multiple validators, validation for this field will be terminated upon the first encountered error.\r\n        //          Thus, only the very first error message related to this field will be displayed to the user\r\n        verbose: true,\r\n\r\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n        // These options mostly are overridden by specific framework\r\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n        button: {\r\n            // The submit buttons selector\r\n            // These buttons will be disabled to prevent the valid form from multiple submissions\r\n            selector: '[type=\"submit\"]',\r\n\r\n            // The disabled class\r\n            disabled: ''\r\n        },\r\n\r\n        control: {\r\n            // The CSS class for valid control\r\n            valid: '',\r\n\r\n            // The CSS class for invalid control\r\n            invalid: ''\r\n        },\r\n\r\n        err: {\r\n            // The CSS class of each message element\r\n            clazz: '',\r\n\r\n            // The error messages container. It can be:\r\n            // - 'tooltip' if you want to use Bootstrap tooltip to show error messages\r\n            // - 'popover' if you want to use Bootstrap popover to show error messages\r\n            // - a CSS selector indicating the container\r\n            // In the first two cases, since the tooltip/popover should be small enough, the plugin only shows only one error message\r\n            // You also can define the message container for particular field\r\n            container: null,\r\n\r\n            // Used to determine where the messages are placed\r\n            parent: null\r\n        },\r\n\r\n        // Shows ok/error/loading icons based on the field validity.\r\n        icon: {\r\n            valid: null,\r\n            invalid: null,\r\n            validating: null,\r\n            feedback: ''\r\n        },\r\n\r\n        row: {\r\n            // The CSS selector for indicating the element consists of the field\r\n            // You should adjust this option if your form group consists of many fields which not all of them need to be validated\r\n            selector: null,\r\n            valid: '',\r\n            invalid: '',\r\n            feedback: ''\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    // Helper methods, which can be used in validator class\r\n    FormValidation.Helper = {\r\n        /**\r\n         * Execute a callback function\r\n         *\r\n         * @param {String|Function} functionName Can be\r\n         * - name of global function\r\n         * - name of namespace function (such as A.B.C)\r\n         * - a function\r\n         * @param {Array} args The callback arguments\r\n         */\r\n        call: function(functionName, args) {\r\n            if ('function' === typeof functionName) {\r\n                return functionName.apply(this, args);\r\n            } else if ('string' === typeof functionName) {\r\n                if ('()' === functionName.substring(functionName.length - 2)) {\r\n                    functionName = functionName.substring(0, functionName.length - 2);\r\n                }\r\n                var ns      = functionName.split('.'),\r\n                    func    = ns.pop(),\r\n                    context = window;\r\n                for (var i = 0; i < ns.length; i++) {\r\n                    context = context[ns[i]];\r\n                }\r\n\r\n                return (typeof context[func] === 'undefined') ? null : context[func].apply(this, args);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate a date\r\n         *\r\n         * @param {Number} year The full year in 4 digits\r\n         * @param {Number} month The month number\r\n         * @param {Number} day The day number\r\n         * @param {Boolean} [notInFuture] If true, the date must not be in the future\r\n         * @returns {Boolean}\r\n         */\r\n        date: function(year, month, day, notInFuture) {\r\n            if (isNaN(year) || isNaN(month) || isNaN(day)) {\r\n                return false;\r\n            }\r\n            if (day.length > 2 || month.length > 2 || year.length > 4) {\r\n                return false;\r\n            }\r\n\r\n            day   = parseInt(day, 10);\r\n            month = parseInt(month, 10);\r\n            year  = parseInt(year, 10);\r\n\r\n            if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\r\n                return false;\r\n            }\r\n            var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n            // Update the number of days in Feb of leap year\r\n            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\r\n                numDays[1] = 29;\r\n            }\r\n\r\n            // Check the day\r\n            if (day <= 0 || day > numDays[month - 1]) {\r\n                return false;\r\n            }\r\n\r\n            if (notInFuture === true) {\r\n                var currentDate  = new Date(),\r\n                    currentYear  = currentDate.getFullYear(),\r\n                    currentMonth = currentDate.getMonth(),\r\n                    currentDay   = currentDate.getDate();\r\n                return (year < currentYear\r\n                || (year === currentYear && month - 1 < currentMonth)\r\n                || (year === currentYear && month - 1 === currentMonth && day < currentDay));\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Format a string\r\n         * It's used to format the error message\r\n         * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\r\n         *\r\n         * @param {String} message\r\n         * @param {Array} parameters\r\n         * @returns {String}\r\n         */\r\n        format: function(message, parameters) {\r\n            if (!$.isArray(parameters)) {\r\n                parameters = [parameters];\r\n            }\r\n\r\n            for (var i in parameters) {\r\n                message = message.replace('%s', parameters[i]);\r\n            }\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Implement Luhn validation algorithm\r\n         * Credit to https://gist.github.com/ShirtlessKirk/2134376\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Luhn\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        luhn: function(value) {\r\n            var length  = value.length,\r\n                mul     = 0,\r\n                prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\r\n                sum     = 0;\r\n\r\n            while (length--) {\r\n                sum += prodArr[mul][parseInt(value.charAt(length), 10)];\r\n                mul ^= 1;\r\n            }\r\n\r\n            return (sum % 10 === 0 && sum > 0);\r\n        },\r\n\r\n        /**\r\n         * Implement modulus 11, 10 (ISO 7064) algorithm\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        mod11And10: function(value) {\r\n            var check  = 5,\r\n                length = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                check = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;\r\n            }\r\n            return (check === 1);\r\n        },\r\n\r\n        /**\r\n         * Implements Mod 37, 36 (ISO 7064) algorithm\r\n         * Usages:\r\n         * mod37And36('A12425GABC1234002M')\r\n         * mod37And36('002006673085', '0123456789')\r\n         *\r\n         * @param {String} value\r\n         * @param {String} [alphabet]\r\n         * @returns {Boolean}\r\n         */\r\n        mod37And36: function(value, alphabet) {\r\n            alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n            var modulus = alphabet.length,\r\n                length  = value.length,\r\n                check   = Math.floor(modulus / 2);\r\n            for (var i = 0; i < length; i++) {\r\n                check = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\r\n            }\r\n            return (check === 1);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            base64: {\r\n                'default': 'Please enter a valid base 64 encoded'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.base64 = {\r\n        /**\r\n         * Return true if the input value is a base 64 encoded string.\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'base64');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            between: {\r\n                'default': 'Please enter a value between %s and %s',\r\n                notInclusive: 'Please enter a value between %s and %s strictly'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.between = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            if ('range' === $field.attr('type')) {\r\n                return {\r\n                    min: $field.attr('min'),\r\n                    max: $field.attr('max')\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is between (strictly or not) two given numbers\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - min\r\n         * - max\r\n         *\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'between');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = this._format(value);\r\n            if (!$.isNumeric(value)) {\r\n                return false;\r\n            }\r\n\r\n            var locale   = validator.getLocale(),\r\n                min      = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n                max      = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\r\n                minValue = this._format(min),\r\n                maxValue = this._format(max);\r\n\r\n            value = parseFloat(value);\r\n            return (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value >= minValue && value <= maxValue,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].between['default'], [min, max])\r\n                    }\r\n                    : {\r\n                        valid: value > minValue  && value <  maxValue,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].between.notInclusive, [min, max])\r\n                    };\r\n        },\r\n\r\n        _format: function(value) {\r\n            return (value + '').replace(',', '.');\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            bic: {\r\n                'default': 'Please enter a valid BIC number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.bic = {\r\n        /**\r\n         * Validate an Business Identifier Code (BIC), also known as ISO 9362, SWIFT-BIC, SWIFT ID or SWIFT code\r\n         *\r\n         * For more information see http://en.wikipedia.org/wiki/ISO_9362\r\n         *\r\n         * @todo The 5 and 6 characters are an ISO 3166-1 country code, this could also be validated\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'bic');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            return /^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.Validator.blank = {\r\n        /**\r\n         * Placeholder validator that can be used to display a custom validation message\r\n         * returned from the server\r\n         * Example:\r\n         *\r\n         * (1) a \"blank\" validator is applied to an input field.\r\n         * (2) data is entered via the UI that is unable to be validated client-side.\r\n         * (3) server returns a 400 with JSON data that contains the field that failed\r\n         *     validation and an associated message.\r\n         * (4) ajax 400 call handler does the following:\r\n         *\r\n         *      bv.updateMessage(field, 'blank', errorMessage);\r\n         *      bv.updateStatus(field, 'INVALID');\r\n         *\r\n         * @see https://github.com/formvalidation/formvalidation/issues/542\r\n         * @see https://github.com/formvalidation/formvalidation/pull/666\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            return true;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            callback: {\r\n                'default': 'Please enter a valid value'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.callback = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            callback: 'callback'\r\n        },\r\n\r\n        /**\r\n         * Return result from the callback method\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - callback: The callback method that passes 2 parameters:\r\n         *      callback: function(fieldValue, validator, $field) {\r\n         *          // fieldValue is the value of field\r\n         *          // validator is instance of BootstrapValidator\r\n         *          // $field is the field element\r\n         *      }\r\n         * - message: The invalid message\r\n         * @returns {Deferred}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value  = validator.getFieldValue($field, 'callback'),\r\n                dfd    = new $.Deferred(),\r\n                result = { valid: true };\r\n\r\n            if (options.callback) {\r\n                var response = FormValidation.Helper.call(options.callback, [value, validator, $field]);\r\n                result = ('boolean' === typeof response) ? { valid: response } : response;\r\n            }\r\n\r\n            dfd.resolve($field, 'callback', result);\r\n            return dfd;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            choice: {\r\n                'default': 'Please enter a valid value',\r\n                less: 'Please choose %s options at minimum',\r\n                more: 'Please choose %s options at maximum',\r\n                between: 'Please choose %s - %s options'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.choice = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max'\r\n        },\r\n\r\n        /**\r\n         * Check if the number of checked boxes are less or more than a given number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of following keys:\r\n         * - min\r\n         * - max\r\n         *\r\n         * At least one of two keys is required\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - message: The invalid message\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var locale     = validator.getLocale(),\r\n                ns         = validator.getNamespace(),\r\n                numChoices = $field.is('select')\r\n                            ? validator.getFieldElements($field.attr('data-' + ns + '-field')).find('option').filter(':selected').length\r\n                            : validator.getFieldElements($field.attr('data-' + ns + '-field')).filter(':checked').length,\r\n                min        = options.min ? ($.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min)) : null,\r\n                max        = options.max ? ($.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max)) : null,\r\n                isValid    = true,\r\n                message    = options.message || FormValidation.I18n[locale].choice['default'];\r\n\r\n            if ((min && numChoices < parseInt(min, 10)) || (max && numChoices > parseInt(max, 10))) {\r\n                isValid = false;\r\n            }\r\n\r\n            switch (true) {\r\n                case (!!min && !!max):\r\n                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].choice.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                    break;\r\n\r\n                case (!!min):\r\n                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].choice.less, parseInt(min, 10));\r\n                    break;\r\n\r\n                case (!!max):\r\n                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].choice.more, parseInt(max, 10));\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return { valid: isValid, message: message };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            color: {\r\n                'default': 'Please enter a valid color'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.color = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            type: 'type'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('color' === $field.attr('type'));\r\n        },\r\n\r\n        SUPPORTED_TYPES: [\r\n            'hex', 'rgb', 'rgba', 'hsl', 'hsla', 'keyword'\r\n        ],\r\n\r\n        KEYWORD_COLORS: [\r\n            // Colors start with A\r\n            'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure',\r\n            // B\r\n            'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood',\r\n            // C\r\n            'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan',\r\n            // D\r\n            'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta',\r\n            'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue',\r\n            'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray',\r\n            'dimgrey', 'dodgerblue',\r\n            // F\r\n            'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',\r\n            // G\r\n            'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey',\r\n            // H\r\n            'honeydew', 'hotpink',\r\n            // I\r\n            'indianred', 'indigo', 'ivory',\r\n            // K\r\n            'khaki',\r\n            // L\r\n            'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan',\r\n            'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen',\r\n            'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen',\r\n            'linen',\r\n            // M\r\n            'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen',\r\n            'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream',\r\n            'mistyrose', 'moccasin',\r\n            // N\r\n            'navajowhite', 'navy',\r\n            // O\r\n            'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid',\r\n            // P\r\n            'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink',\r\n            'plum', 'powderblue', 'purple',\r\n            // R\r\n            'red', 'rosybrown', 'royalblue',\r\n            // S\r\n            'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue',\r\n            'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue',\r\n            // T\r\n            'tan', 'teal', 'thistle', 'tomato', 'transparent', 'turquoise',\r\n            // V\r\n            'violet',\r\n            // W\r\n            'wheat', 'white', 'whitesmoke',\r\n            // Y\r\n            'yellow', 'yellowgreen'\r\n        ],\r\n\r\n        /**\r\n         * Return true if the input value is a valid color\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - type: The array of valid color types\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'color');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Only accept 6 hex character values due to the HTML 5 spec\r\n            // See http://www.w3.org/TR/html-markup/input.color.html#input.color.attrs.value\r\n            if (this.enableByHtml5($field)) {\r\n                return /^#[0-9A-F]{6}$/i.test(value);\r\n            }\r\n\r\n            var types = options.type || this.SUPPORTED_TYPES;\r\n            if (!$.isArray(types)) {\r\n                types = types.replace(/s/g, '').split(',');\r\n            }\r\n\r\n            var method,\r\n                type,\r\n                isValid = false;\r\n\r\n            for (var i = 0; i < types.length; i++) {\r\n                type    = types[i];\r\n                method  = '_' + type.toLowerCase();\r\n                isValid = isValid || this[method](value);\r\n                if (isValid) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _hex: function(value) {\r\n            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\r\n        },\r\n\r\n        _hsl: function(value) {\r\n            return /^hsl\\((\\s*(-?\\d+)\\s*,)(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,)(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*)\\)$/.test(value);\r\n        },\r\n\r\n        _hsla: function(value) {\r\n            return /^hsla\\((\\s*(-?\\d+)\\s*,)(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,){2}(\\s*(0?(\\.\\d+)?|1(\\.0+)?)\\s*)\\)$/.test(value);\r\n        },\r\n\r\n        _keyword: function(value) {\r\n            return $.inArray(value, this.KEYWORD_COLORS) >= 0;\r\n        },\r\n\r\n        _rgb: function(value) {\r\n            var regexInteger = /^rgb\\((\\s*(\\b([01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\b)\\s*,){2}(\\s*(\\b([01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\b)\\s*)\\)$/,\r\n                regexPercent = /^rgb\\((\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,){2}(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*)\\)$/;\r\n            return regexInteger.test(value) || regexPercent.test(value);\r\n        },\r\n\r\n        _rgba: function(value) {\r\n            var regexInteger = /^rgba\\((\\s*(\\b([01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\b)\\s*,){3}(\\s*(0?(\\.\\d+)?|1(\\.0+)?)\\s*)\\)$/,\r\n                regexPercent = /^rgba\\((\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,){3}(\\s*(0?(\\.\\d+)?|1(\\.0+)?)\\s*)\\)$/;\r\n            return regexInteger.test(value) || regexPercent.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            creditCard: {\r\n                'default': 'Please enter a valid credit card number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.creditCard = {\r\n        /**\r\n         * Return true if the input value is valid credit card number\r\n         * Based on https://gist.github.com/DiegoSalazar/4075533\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'creditCard');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Accept only digits, dashes or spaces\r\n            if (/[^0-9-\\s]+/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '');\r\n\r\n            if (!FormValidation.Helper.luhn(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the card number based on prefix (IIN ranges) and length\r\n            var cards = {\r\n                AMERICAN_EXPRESS: {\r\n                    length: [15],\r\n                    prefix: ['34', '37']\r\n                },\r\n                DINERS_CLUB: {\r\n                    length: [14],\r\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\r\n                },\r\n                DINERS_CLUB_US: {\r\n                    length: [16],\r\n                    prefix: ['54', '55']\r\n                },\r\n                DISCOVER: {\r\n                    length: [16],\r\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n                             '62214', '62215', '62216', '62217', '62218', '62219',\r\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n                             '62290', '62291', '622920', '622921', '622922', '622923',\r\n                             '622924', '622925', '644', '645', '646', '647', '648',\r\n                             '649', '65']\r\n                },\r\n                JCB: {\r\n                    length: [16],\r\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n                },\r\n                LASER: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['6304', '6706', '6771', '6709']\r\n                },\r\n                MAESTRO: {\r\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\r\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n                },\r\n                MASTERCARD: {\r\n                    length: [16],\r\n                    prefix: ['51', '52', '53', '54', '55']\r\n                },\r\n                SOLO: {\r\n                    length: [16, 18, 19],\r\n                    prefix: ['6334', '6767']\r\n                },\r\n                UNIONPAY: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n                             '622920', '622921', '622922', '622923', '622924', '622925']\r\n                },\r\n                VISA: {\r\n                    length: [16],\r\n                    prefix: ['4']\r\n                }\r\n            };\r\n\r\n            var type, i;\r\n            for (type in cards) {\r\n                for (i in cards[type].prefix) {\r\n                    if (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]     // Check the prefix\r\n                        && $.inArray(value.length, cards[type].length) !== -1)                      // and length\r\n                    {\r\n                        return {\r\n                            valid: true,\r\n                            type: type\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            cusip: {\r\n                'default': 'Please enter a valid CUSIP number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.cusip = {\r\n        /**\r\n         * Validate a CUSIP number\r\n         * Examples:\r\n         * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6\r\n         * - Invalid: 31430F200, 022615AC2\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/CUSIP\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'cusip');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[0-9A-Z]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var converted = $.map(value.split(''), function(item) {\r\n                                var code = item.charCodeAt(0);\r\n                                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n                                            // Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n                                            ? (code - 'A'.charCodeAt(0) + 10)\r\n                                            : item;\r\n                            }),\r\n                length    = converted.length,\r\n                sum       = 0;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                var num = parseInt(converted[i], 10);\r\n                if (i % 2 !== 0) {\r\n                    num *= 2;\r\n                }\r\n                if (num > 9) {\r\n                    num -= 9;\r\n                }\r\n                sum += num;\r\n            }\r\n\r\n            sum = (10 - (sum % 10)) % 10;\r\n            return sum === parseInt(converted[length - 1], 10);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            cvv: {\r\n                'default': 'Please enter a valid CVV number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.cvv = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            ccfield: 'creditCardField'\r\n        },\r\n\r\n        /**\r\n         * Bind the validator on the live change of the credit card field\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - creditCardField: The credit card number field\r\n         */\r\n        init: function(validator, $field, options) {\r\n            if (options.creditCardField) {\r\n                var creditCardField = validator.getFieldElements(options.creditCardField);\r\n                validator.onLiveChange(creditCardField, 'live_cvv', function() {\r\n                    var status = validator.getStatus($field, 'cvv');\r\n                    if (status !== validator.STATUS_NOT_VALIDATED) {\r\n                        validator.revalidateField($field);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unbind the validator on the live change of the credit card field\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - creditCardField: The credit card number field\r\n         */\r\n        destroy: function(validator, $field, options) {\r\n            if (options.creditCardField) {\r\n                var creditCardField = validator.getFieldElements(options.creditCardField);\r\n                validator.offLiveChange(creditCardField, 'live_cvv');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid CVV number.\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - creditCardField: The credit card number field. It can be null\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'cvv');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^[0-9]{3,4}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (!options.creditCardField) {\r\n                return true;\r\n            }\r\n\r\n            // Get the credit card number\r\n            var creditCard = validator.getFieldElements(options.creditCardField).val();\r\n            if (creditCard === '') {\r\n                return true;\r\n            }\r\n            \r\n            creditCard = creditCard.replace(/\\D/g, '');\r\n\r\n            // Supported credit card types\r\n            var cards = {\r\n                AMERICAN_EXPRESS: {\r\n                    length: [15],\r\n                    prefix: ['34', '37']\r\n                },\r\n                DINERS_CLUB: {\r\n                    length: [14],\r\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\r\n                },\r\n                DINERS_CLUB_US: {\r\n                    length: [16],\r\n                    prefix: ['54', '55']\r\n                },\r\n                DISCOVER: {\r\n                    length: [16],\r\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n                             '62214', '62215', '62216', '62217', '62218', '62219',\r\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n                             '62290', '62291', '622920', '622921', '622922', '622923',\r\n                             '622924', '622925', '644', '645', '646', '647', '648',\r\n                             '649', '65']\r\n                },\r\n                JCB: {\r\n                    length: [16],\r\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n                },\r\n                LASER: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['6304', '6706', '6771', '6709']\r\n                },\r\n                MAESTRO: {\r\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\r\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n                },\r\n                MASTERCARD: {\r\n                    length: [16],\r\n                    prefix: ['51', '52', '53', '54', '55']\r\n                },\r\n                SOLO: {\r\n                    length: [16, 18, 19],\r\n                    prefix: ['6334', '6767']\r\n                },\r\n                UNIONPAY: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n                             '622920', '622921', '622922', '622923', '622924', '622925']\r\n                },\r\n                VISA: {\r\n                    length: [16],\r\n                    prefix: ['4']\r\n                }\r\n            };\r\n            var type, i, creditCardType = null;\r\n            for (type in cards) {\r\n                for (i in cards[type].prefix) {\r\n                    if (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]    // Check the prefix\r\n                        && $.inArray(creditCard.length, cards[type].length) !== -1)                     // and length\r\n                    {\r\n                        creditCardType = type;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (creditCardType === null)\r\n                        ? false\r\n                        : (('AMERICAN_EXPRESS' === creditCardType) ? (value.length === 4) : (value.length === 3));\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            date: {\r\n                'default': 'Please enter a valid date',\r\n                min: 'Please enter a date after %s',\r\n                max: 'Please enter a date before %s',\r\n                range: 'Please enter a date in the range %s - %s'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.date = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            format: 'format',\r\n            min: 'min',\r\n            max: 'max',\r\n            separator: 'separator'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is valid date\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - min: the minimum date\r\n         * - max: the maximum date\r\n         * - separator: Use to separate the date, month, and year.\r\n         * By default, it is /\r\n         * - format: The date format. Default is MM/DD/YYYY\r\n         * The format can be:\r\n         *\r\n         * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option\r\n         * ii) date and time:\r\n         * The time can consist of h, m, s parts which are separated by :\r\n         * ii) date, time and A (indicating AM or PM)\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'date');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            options.format = options.format || 'MM/DD/YYYY';\r\n\r\n            // #683: Force the format to YYYY-MM-DD as the default browser behaviour when using type=\"date\" attribute\r\n            if ($field.attr('type') === 'date') {\r\n                options.format = 'YYYY-MM-DD';\r\n            }\r\n\r\n            var locale     = validator.getLocale(),\r\n                message    = options.message || FormValidation.I18n[locale].date['default'],\r\n                formats    = options.format.split(' '),\r\n                dateFormat = formats[0],\r\n                timeFormat = (formats.length > 1) ? formats[1] : null,\r\n                amOrPm     = (formats.length > 2) ? formats[2] : null,\r\n                sections   = value.split(' '),\r\n                date       = sections[0],\r\n                time       = (sections.length > 1) ? sections[1] : null;\r\n\r\n            if (formats.length !== sections.length) {\r\n                return {\r\n                    valid: false,\r\n                    message: message\r\n                };\r\n            }\r\n\r\n            // Determine the separator\r\n            var separator = options.separator;\r\n            if (!separator) {\r\n                separator = (date.indexOf('/') !== -1) ? '/' : ((date.indexOf('-') !== -1) ? '-' : null);\r\n            }\r\n            if (separator === null || date.indexOf(separator) === -1) {\r\n                return {\r\n                    valid: false,\r\n                    message: message\r\n                };\r\n            }\r\n\r\n            // Determine the date\r\n            date       = date.split(separator);\r\n            dateFormat = dateFormat.split(separator);\r\n            if (date.length !== dateFormat.length) {\r\n                return {\r\n                    valid: false,\r\n                    message: message\r\n                };\r\n            }\r\n\r\n            var year  = date[$.inArray('YYYY', dateFormat)],\r\n                month = date[$.inArray('MM', dateFormat)],\r\n                day   = date[$.inArray('DD', dateFormat)];\r\n\r\n            if (!year || !month || !day || year.length !== 4) {\r\n                return {\r\n                    valid: false,\r\n                    message: message\r\n                };\r\n            }\r\n\r\n            // Determine the time\r\n            var minutes = null, hours = null, seconds = null;\r\n            if (timeFormat) {\r\n                timeFormat = timeFormat.split(':');\r\n                time       = time.split(':');\r\n\r\n                if (timeFormat.length !== time.length) {\r\n                    return {\r\n                        valid: false,\r\n                        message: message\r\n                    };\r\n                }\r\n\r\n                hours   = time.length > 0 ? time[0] : null;\r\n                minutes = time.length > 1 ? time[1] : null;\r\n                seconds = time.length > 2 ? time[2] : null;\r\n\r\n                if (hours === '' || minutes === '' || seconds === '') {\r\n                    return {\r\n                        valid: false,\r\n                        message: message\r\n                    };\r\n                }\r\n\r\n                // Validate seconds\r\n                if (seconds) {\r\n                    if (isNaN(seconds) || seconds.length > 2) {\r\n                        return {\r\n                            valid: false,\r\n                            message: message\r\n                        };\r\n                    }\r\n                    seconds = parseInt(seconds, 10);\r\n                    if (seconds < 0 || seconds > 60) {\r\n                        return {\r\n                            valid: false,\r\n                            message: message\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // Validate hours\r\n                if (hours) {\r\n                    if (isNaN(hours) || hours.length > 2) {\r\n                        return {\r\n                            valid: false,\r\n                            message: message\r\n                        };\r\n                    }\r\n                    hours = parseInt(hours, 10);\r\n                    if (hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {\r\n                        return {\r\n                            valid: false,\r\n                            message: message\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // Validate minutes\r\n                if (minutes) {\r\n                    if (isNaN(minutes) || minutes.length > 2) {\r\n                        return {\r\n                            valid: false,\r\n                            message: message\r\n                        };\r\n                    }\r\n                    minutes = parseInt(minutes, 10);\r\n                    if (minutes < 0 || minutes > 59) {\r\n                        return {\r\n                            valid: false,\r\n                            message: message\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Validate day, month, and year\r\n            var valid     = FormValidation.Helper.date(year, month, day),\r\n                // declare the date, min and max objects\r\n                min       = null,\r\n                max       = null,\r\n                minOption = options.min,\r\n                maxOption = options.max;\r\n\r\n            if (minOption) {\r\n                if (isNaN(Date.parse(minOption))) {\r\n                    minOption = validator.getDynamicOption($field, minOption);\r\n                }\r\n\r\n                min       = minOption instanceof Date ? minOption : this._parseDate(minOption, dateFormat, separator);\r\n                // In order to avoid displaying a date string like \"Mon Dec 08 2014 19:14:12 GMT+0000 (WET)\"\r\n                minOption = minOption instanceof Date ? this._formatDate(minOption, options.format) : minOption;\r\n            }\r\n\r\n            if (maxOption) {\r\n                if (isNaN(Date.parse(maxOption))) {\r\n                    maxOption = validator.getDynamicOption($field, maxOption);\r\n                }\r\n\r\n                max       = maxOption instanceof Date ? maxOption : this._parseDate(maxOption, dateFormat, separator);\r\n                // In order to avoid displaying a date string like \"Mon Dec 08 2014 19:14:12 GMT+0000 (WET)\"\r\n                maxOption = maxOption instanceof Date ? this._formatDate(maxOption, options.format) : maxOption;\r\n            }\r\n\r\n            date = new Date(year, month -1, day, hours, minutes, seconds);\r\n\r\n            switch (true) {\r\n                case (minOption && !maxOption && valid):\r\n                    valid   = date.getTime() >= min.getTime();\r\n                    message = options.message || FormValidation.Helper.format(FormValidation.I18n[locale].date.min, minOption);\r\n                    break;\r\n\r\n                case (maxOption && !minOption && valid):\r\n                    valid   = date.getTime() <= max.getTime();\r\n                    message = options.message || FormValidation.Helper.format(FormValidation.I18n[locale].date.max, maxOption);\r\n                    break;\r\n\r\n                case (maxOption && minOption && valid):\r\n                    valid   = date.getTime() <= max.getTime() && date.getTime() >= min.getTime();\r\n                    message = options.message || FormValidation.Helper.format(FormValidation.I18n[locale].date.range, [minOption, maxOption]);\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: valid,\r\n                message: message\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Return a date object after parsing the date string\r\n         *\r\n         * @param {String} date   The date string to parse\r\n         * @param {String} format The date format\r\n         * The format can be:\r\n         *   - date: Consist of DD, MM, YYYY parts which are separated by the separator option\r\n         *   - date and time:\r\n         *     The time can consist of h, m, s parts which are separated by :\r\n         * @param {String} separator The separator used to separate the date, month, and year\r\n         * @returns {Date}\r\n         */\r\n        _parseDate: function(date, format, separator) {\r\n            var minutes     = 0, hours = 0, seconds = 0,\r\n                sections    = date.split(' '),\r\n                dateSection = sections[0],\r\n                timeSection = (sections.length > 1) ? sections[1] : null;\r\n\r\n            dateSection = dateSection.split(separator);\r\n            var year  = dateSection[$.inArray('YYYY', format)],\r\n                month = dateSection[$.inArray('MM', format)],\r\n                day   = dateSection[$.inArray('DD', format)];\r\n            if (timeSection) {\r\n                timeSection = timeSection.split(':');\r\n                hours       = timeSection.length > 0 ? timeSection[0] : null;\r\n                minutes     = timeSection.length > 1 ? timeSection[1] : null;\r\n                seconds     = timeSection.length > 2 ? timeSection[2] : null;\r\n            }\r\n\r\n            return new Date(year, month -1, day, hours, minutes, seconds);\r\n        },\r\n\r\n        /**\r\n         * Format date\r\n         *\r\n         * @param {Date} date The date object to format\r\n         * @param {String} format The date format\r\n         * The format can consist of the following tokens:\r\n         *      d       Day of the month without leading zeros (1 through 31)\r\n         *      dd      Day of the month with leading zeros (01 through 31)\r\n         *      m       Month without leading zeros (1 through 12)\r\n         *      mm      Month with leading zeros (01 through 12)\r\n         *      yy      Last two digits of year (for example: 14)\r\n         *      yyyy    Full four digits of year (for example: 2014)\r\n         *      h       Hours without leading zeros (1 through 12)\r\n         *      hh      Hours with leading zeros (01 through 12)\r\n         *      H       Hours without leading zeros (0 through 23)\r\n         *      HH      Hours with leading zeros (00 through 23)\r\n         *      M       Minutes without leading zeros (0 through 59)\r\n         *      MM      Minutes with leading zeros (00 through 59)\r\n         *      s       Seconds without leading zeros (0 through 59)\r\n         *      ss      Seconds with leading zeros (00 through 59)\r\n         * @returns {String}\r\n         */\r\n        _formatDate: function(date, format) {\r\n            format = format\r\n                        .replace(/Y/g, 'y')\r\n                        .replace(/M/g, 'm')\r\n                        .replace(/D/g, 'd')\r\n                        .replace(/:m/g, ':M')\r\n                        .replace(/:mm/g, ':MM')\r\n                        .replace(/:S/, ':s')\r\n                        .replace(/:SS/, ':ss');\r\n\r\n            var replacer = {\r\n                d: function(date) {\r\n                    return date.getDate();\r\n                },\r\n                dd: function(date) {\r\n                    var d = date.getDate();\r\n                    return (d < 10) ? '0' + d : d;\r\n                },\r\n                m: function(date) {\r\n                    return date.getMonth() + 1;\r\n                },\r\n                mm: function(date) {\r\n                    var m = date.getMonth() + 1;\r\n                    return m < 10 ? '0' + m : m;\r\n                },\r\n                yy: function(date) {\r\n                    return ('' + date.getFullYear()).substr(2);\r\n                },\r\n                yyyy: function(date) {\r\n                    return date.getFullYear();\r\n                },\r\n                h: function(date) {\r\n                    return date.getHours() % 12 || 12;\r\n                },\r\n                hh: function(date) {\r\n                    var h = date.getHours() % 12 || 12;\r\n                    return h < 10 ? '0' + h : h;\r\n                },\r\n                H: function(date) {\r\n                    return date.getHours();\r\n                },\r\n                HH: function(date) {\r\n                    var H = date.getHours();\r\n                    return H < 10 ? '0' + H : H;\r\n                },\r\n                M: function(date) {\r\n                    return date.getMinutes();\r\n                },\r\n                MM: function(date) {\r\n                    var M = date.getMinutes();\r\n                    return M < 10 ? '0' + M : M;\r\n                },\r\n                s: function(date) {\r\n                    return date.getSeconds();\r\n                },\r\n                ss: function(date) {\r\n                    var s = date.getSeconds();\r\n                    return s < 10 ? '0' + s : s;\r\n                }\r\n            };\r\n\r\n            return format.replace(/d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\\1?|\"[^\"]*\"|'[^']*'/g, function(match) {\r\n                return replacer[match] ? replacer[match](date) : match.slice(1, match.length - 1);\r\n            });\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            different: {\r\n                'default': 'Please enter a different value'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.different = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            field: 'field'\r\n        },\r\n\r\n        /**\r\n         * Bind the validator on the live change of the field to compare with current one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         */\r\n        init: function(validator, $field, options) {\r\n            var fields = options.field.split(',');\r\n            for (var i = 0; i < fields.length; i++) {\r\n                var compareWith = validator.getFieldElements(fields[i]);\r\n                validator.onLiveChange(compareWith, 'live_different', function() {\r\n                    var status = validator.getStatus($field, 'different');\r\n                    if (status !== validator.STATUS_NOT_VALIDATED) {\r\n                        validator.revalidateField($field);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unbind the validator on the live change of the field to compare with current one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         */\r\n        destroy: function(validator, $field, options) {\r\n            var fields = options.field.split(',');\r\n            for (var i = 0; i < fields.length; i++) {\r\n                var compareWith = validator.getFieldElements(fields[i]);\r\n                validator.offLiveChange(compareWith, 'live_different');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is different with given field's value\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'different');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var fields  = options.field.split(','),\r\n                isValid = true;\r\n\r\n            for (var i = 0; i < fields.length; i++) {\r\n                var compareWith = validator.getFieldElements(fields[i]);\r\n                if (compareWith == null || compareWith.length === 0) {\r\n                    continue;\r\n                }\r\n\r\n                var compareValue = validator.getFieldValue(compareWith, 'different');\r\n                if (value === compareValue) {\r\n                    isValid = false;\r\n                } else if (compareValue !== '') {\r\n                    validator.updateStatus(compareWith, validator.STATUS_VALID, 'different');\r\n                }\r\n            }\r\n\r\n            return isValid;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            digits: {\r\n                'default': 'Please enter only digits'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.digits = {\r\n        /**\r\n         * Return true if the input value contains digits only\r\n         *\r\n         * @param {FormValidation.Base} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options]\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'digits');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^\\d+$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            ean: {\r\n                'default': 'Please enter a valid EAN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.ean = {\r\n        /**\r\n         * Validate EAN (International Article Number)\r\n         * Examples:\r\n         * - Valid: 73513537, 9780471117094, 4006381333931\r\n         * - Invalid: 73513536\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/European_Article_Number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'ean');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^(\\d{8}|\\d{12}|\\d{13})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = (length === 8) ? [3, 1] : [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = (10 - sum % 10) % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            ein: {\r\n                'default': 'Please enter a valid EIN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.ein = {\r\n        // The first two digits are called campus\r\n        // See http://en.wikipedia.org/wiki/Employer_Identification_Number\r\n        // http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes\r\n        CAMPUS: {\r\n            ANDOVER: ['10', '12'],\r\n            ATLANTA: ['60', '67'],\r\n            AUSTIN: ['50', '53'],\r\n            BROOKHAVEN: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\r\n            CINCINNATI: ['30', '32', '35', '36', '37', '38', '61'],\r\n            FRESNO: ['15', '24'],\r\n            KANSAS_CITY: ['40', '44'],\r\n            MEMPHIS: ['94', '95'],\r\n            OGDEN: ['80', '90'],\r\n            PHILADELPHIA: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\r\n            INTERNET: ['20', '26', '27', '45', '46'],\r\n            SMALL_BUSINESS_ADMINISTRATION: ['31']\r\n        },\r\n\r\n        /**\r\n         * Validate EIN (Employer Identification Number) which is also known as\r\n         * Federal Employer Identification Number (FEIN) or Federal Tax Identification Number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Object|Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'ein');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^[0-9]{2}-?[0-9]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n            // Check the first two digits\r\n            var campus = value.substr(0, 2) + '';\r\n            for (var key in this.CAMPUS) {\r\n                if ($.inArray(campus, this.CAMPUS[key]) !== -1) {\r\n                    return {\r\n                        valid: true,\r\n                        campus: key\r\n                    };\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            emailAddress: {\r\n                'default': 'Please enter a valid email address'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.emailAddress = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            multiple: 'multiple',\r\n            separator: 'separator'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('email' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid email address\r\n         *\r\n         * @param {FormValidation.Base} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options]\r\n         * - multiple: Allow multiple email addresses, separated by a comma or semicolon; default is false.\r\n         * - separator: Regex for character or characters expected as separator between addresses; default is comma /[,;]/, i.e. comma or semicolon.\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'emailAddress');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Email address regular expression\r\n            // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n            var emailRegExp   = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n                allowMultiple = options.multiple === true || options.multiple === 'true';\r\n\r\n            if (allowMultiple) {\r\n                var separator = options.separator || /[,;]/,\r\n                    addresses = this._splitEmailAddresses(value, separator);\r\n\r\n                for (var i = 0; i < addresses.length; i++) {\r\n                    if (!emailRegExp.test(addresses[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            } else {\r\n                return emailRegExp.test(value);\r\n            }\r\n        },\r\n\r\n        _splitEmailAddresses: function(emailAddresses, separator) {\r\n            var quotedFragments     = emailAddresses.split(/\"/),\r\n                quotedFragmentCount = quotedFragments.length,\r\n                emailAddressArray   = [],\r\n                nextEmailAddress    = '';\r\n\r\n            for (var i = 0; i < quotedFragmentCount; i++) {\r\n                if (i % 2 === 0) {\r\n                    var splitEmailAddressFragments     = quotedFragments[i].split(separator),\r\n                        splitEmailAddressFragmentCount = splitEmailAddressFragments.length;\r\n\r\n                    if (splitEmailAddressFragmentCount === 1) {\r\n                        nextEmailAddress += splitEmailAddressFragments[0];\r\n                    } else {\r\n                        emailAddressArray.push(nextEmailAddress + splitEmailAddressFragments[0]);\r\n\r\n                        for (var j = 1; j < splitEmailAddressFragmentCount - 1; j++) {\r\n                            emailAddressArray.push(splitEmailAddressFragments[j]);\r\n                        }\r\n                        nextEmailAddress = splitEmailAddressFragments[splitEmailAddressFragmentCount - 1];\r\n                    }\r\n                } else {\r\n                    nextEmailAddress += '\"' + quotedFragments[i];\r\n                    if (i < quotedFragmentCount - 1) {\r\n                        nextEmailAddress += '\"';\r\n                    }\r\n                }\r\n            }\r\n\r\n            emailAddressArray.push(nextEmailAddress);\r\n            return emailAddressArray;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            file: {\r\n                'default': 'Please choose a valid file'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.file = {\r\n        html5Attributes: {\r\n            extension: 'extension',\r\n            maxfiles: 'maxFiles',\r\n            minfiles: 'minFiles',\r\n            maxsize: 'maxSize',\r\n            minsize: 'minSize',\r\n            maxtotalsize: 'maxTotalSize',\r\n            mintotalsize: 'minTotalSize',\r\n            message: 'message',\r\n            type: 'type'\r\n        },\r\n\r\n        /**\r\n         * Validate upload file. Use HTML 5 API if the browser supports\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - extension: The allowed extensions, separated by a comma\r\n         * - maxFiles: The maximum number of files\r\n         * - minFiles: The minimum number of files\r\n         * - maxSize: The maximum size in bytes\r\n         * - minSize: The minimum size in bytes\r\n         * - maxTotalSize: The maximum size in bytes for all files\r\n         * - minTotalSize: The minimum size in bytes for all files\r\n         * - message: The invalid message\r\n         * - type: The allowed MIME type, separated by a comma\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'file');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var ext,\r\n                extensions = options.extension ? options.extension.toLowerCase().split(',') : null,\r\n                types      = options.type      ? options.type.toLowerCase().split(',')      : null,\r\n                html5      = (window.File && window.FileList && window.FileReader);\r\n\r\n            if (html5) {\r\n                // Get FileList instance\r\n                var files     = $field.get(0).files,\r\n                    total     = files.length,\r\n                    totalSize = 0;\r\n\r\n                if ((options.maxFiles && total > parseInt(options.maxFiles, 10))        // Check the maxFiles\r\n                    || (options.minFiles && total < parseInt(options.minFiles, 10)))    // Check the minFiles\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                for (var i = 0; i < total; i++) {\r\n                    totalSize += files[i].size;\r\n                    ext        = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);\r\n\r\n                    if ((options.minSize && files[i].size < parseInt(options.minSize, 10))                      // Check the minSize\r\n                        || (options.maxSize && files[i].size > parseInt(options.maxSize, 10))                   // Check the maxSize\r\n                        || (extensions && $.inArray(ext.toLowerCase(), extensions) === -1)                      // Check file extension\r\n                        || (files[i].type && types && $.inArray(files[i].type.toLowerCase(), types) === -1))    // Check file type\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if ((options.maxTotalSize && totalSize > parseInt(options.maxTotalSize, 10))        // Check the maxTotalSize\r\n                    || (options.minTotalSize && totalSize < parseInt(options.minTotalSize, 10)))    // Check the minTotalSize\r\n                {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Check file extension\r\n                ext = value.substr(value.lastIndexOf('.') + 1);\r\n                if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            greaterThan: {\r\n                'default': 'Please enter a value greater than or equal to %s',\r\n                notInclusive: 'Please enter a value greater than %s'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.greaterThan = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            value: 'value',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var type = $field.attr('type'),\r\n                min  = $field.attr('min');\r\n            if (min && type !== 'date') {\r\n                return {\r\n                    value: min\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is greater than or equals to given number\r\n         *\r\n         * @param {FormValidation.Base} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - value: Define the number to compare with. It can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'greaterThan');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            \r\n            value = this._format(value);\r\n            if (!$.isNumeric(value)) {\r\n                return false;\r\n            }\r\n\r\n            var locale         = validator.getLocale(),\r\n                compareTo      = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value),\r\n                compareToValue = this._format(compareTo);\r\n\r\n            value = parseFloat(value);\r\n            return (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value >= compareToValue,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].greaterThan['default'], compareTo)\r\n                    }\r\n                    : {\r\n                        valid: value > compareToValue,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].greaterThan.notInclusive, compareTo)\r\n                    };\r\n        },\r\n\r\n        _format: function(value) {\r\n            return (value + '').replace(',', '.');\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            grid: {\r\n                'default': 'Please enter a valid GRId number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.grid = {\r\n        /**\r\n         * Validate GRId (Global Release Identifier)\r\n         * Examples:\r\n         * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M\r\n         * - Invalid: A1-2425G-ABC1234002-Q\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Global_Release_Identifier\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'grid');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\s/g, '').replace(/-/g, '');\r\n            if ('GRID:' === value.substr(0, 5)) {\r\n                value = value.substr(5);\r\n            }\r\n            return FormValidation.Helper.mod37And36(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            hex: {\r\n                'default': 'Please enter a valid hexadecimal number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.hex = {\r\n        /**\r\n         * Return true if and only if the input value is a valid hexadecimal number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'hex');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^[0-9a-fA-F]+$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            iban: {\r\n                'default': 'Please enter a valid IBAN number',\r\n                country: 'Please enter a valid IBAN number in %s',\r\n                countries: {\r\n                    AD: 'Andorra',\r\n                    AE: 'United Arab Emirates',\r\n                    AL: 'Albania',\r\n                    AO: 'Angola',\r\n                    AT: 'Austria',\r\n                    AZ: 'Azerbaijan',\r\n                    BA: 'Bosnia and Herzegovina',\r\n                    BE: 'Belgium',\r\n                    BF: 'Burkina Faso',\r\n                    BG: 'Bulgaria',\r\n                    BH: 'Bahrain',\r\n                    BI: 'Burundi',\r\n                    BJ: 'Benin',\r\n                    BR: 'Brazil',\r\n                    CH: 'Switzerland',\r\n                    CI: 'Ivory Coast',\r\n                    CM: 'Cameroon',\r\n                    CR: 'Costa Rica',\r\n                    CV: 'Cape Verde',\r\n                    CY: 'Cyprus',\r\n                    CZ: 'Czech Republic',\r\n                    DE: 'Germany',\r\n                    DK: 'Denmark',\r\n                    DO: 'Dominican Republic',\r\n                    DZ: 'Algeria',\r\n                    EE: 'Estonia',\r\n                    ES: 'Spain',\r\n                    FI: 'Finland',\r\n                    FO: 'Faroe Islands',\r\n                    FR: 'France',\r\n                    GB: 'United Kingdom',\r\n                    GE: 'Georgia',\r\n                    GI: 'Gibraltar',\r\n                    GL: 'Greenland',\r\n                    GR: 'Greece',\r\n                    GT: 'Guatemala',\r\n                    HR: 'Croatia',\r\n                    HU: 'Hungary',\r\n                    IE: 'Ireland',\r\n                    IL: 'Israel',\r\n                    IR: 'Iran',\r\n                    IS: 'Iceland',\r\n                    IT: 'Italy',\r\n                    JO: 'Jordan',\r\n                    KW: 'Kuwait',\r\n                    KZ: 'Kazakhstan',\r\n                    LB: 'Lebanon',\r\n                    LI: 'Liechtenstein',\r\n                    LT: 'Lithuania',\r\n                    LU: 'Luxembourg',\r\n                    LV: 'Latvia',\r\n                    MC: 'Monaco',\r\n                    MD: 'Moldova',\r\n                    ME: 'Montenegro',\r\n                    MG: 'Madagascar',\r\n                    MK: 'Macedonia',\r\n                    ML: 'Mali',\r\n                    MR: 'Mauritania',\r\n                    MT: 'Malta',\r\n                    MU: 'Mauritius',\r\n                    MZ: 'Mozambique',\r\n                    NL: 'Netherlands',\r\n                    NO: 'Norway',\r\n                    PK: 'Pakistan',\r\n                    PL: 'Poland',\r\n                    PS: 'Palestine',\r\n                    PT: 'Portugal',\r\n                    QA: 'Qatar',\r\n                    RO: 'Romania',\r\n                    RS: 'Serbia',\r\n                    SA: 'Saudi Arabia',\r\n                    SE: 'Sweden',\r\n                    SI: 'Slovenia',\r\n                    SK: 'Slovakia',\r\n                    SM: 'San Marino',\r\n                    SN: 'Senegal',\r\n                    TN: 'Tunisia',\r\n                    TR: 'Turkey',\r\n                    VG: 'Virgin Islands, British'\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.iban = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\r\n        // http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\r\n        REGEX: {\r\n            AD: 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',                       // Andorra\r\n            AE: 'AE[0-9]{2}[0-9]{3}[0-9]{16}',                                  // United Arab Emirates\r\n            AL: 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',                               // Albania\r\n            AO: 'AO[0-9]{2}[0-9]{21}',                                          // Angola\r\n            AT: 'AT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Austria\r\n            AZ: 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',                               // Azerbaijan\r\n            BA: 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',                   // Bosnia and Herzegovina\r\n            BE: 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',                           // Belgium\r\n            BF: 'BF[0-9]{2}[0-9]{23}',                                          // Burkina Faso\r\n            BG: 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',                // Bulgaria\r\n            BH: 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',                               // Bahrain\r\n            BI: 'BI[0-9]{2}[0-9]{12}',                                          // Burundi\r\n            BJ: 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Benin\r\n            BR: 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',             // Brazil\r\n            CH: 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Switzerland\r\n            CI: 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Ivory Coast\r\n            CM: 'CM[0-9]{2}[0-9]{23}',                                          // Cameroon\r\n            CR: 'CR[0-9]{2}[0-9]{3}[0-9]{14}',                                  // Costa Rica\r\n            CV: 'CV[0-9]{2}[0-9]{21}',                                          // Cape Verde\r\n            CY: 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',                       // Cyprus\r\n            CZ: 'CZ[0-9]{2}[0-9]{20}',                                          // Czech Republic\r\n            DE: 'DE[0-9]{2}[0-9]{8}[0-9]{10}',                                  // Germany\r\n            DK: 'DK[0-9]{2}[0-9]{14}',                                          // Denmark\r\n            DO: 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',                               // Dominican Republic\r\n            DZ: 'DZ[0-9]{2}[0-9]{20}',                                          // Algeria\r\n            EE: 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',                  // Estonia\r\n            ES: 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',          // Spain\r\n            FI: 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',                           // Finland\r\n            FO: 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Faroe Islands\r\n            FR: 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // France\r\n            GB: 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // United Kingdom\r\n            GE: 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',                                  // Georgia\r\n            GI: 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',                               // Gibraltar\r\n            GL: 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Greenland\r\n            GR: 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',                       // Greece\r\n            GT: 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',                            // Guatemala\r\n            HR: 'HR[0-9]{2}[0-9]{7}[0-9]{10}',                                  // Croatia\r\n            HU: 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',          // Hungary\r\n            IE: 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // Ireland\r\n            IL: 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',                          // Israel\r\n            IR: 'IR[0-9]{2}[0-9]{22}',                                          // Iran\r\n            IS: 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',                  // Iceland\r\n            IT: 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // Italy\r\n            JO: 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',                 // Jordan\r\n            KW: 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',                                  // Kuwait\r\n            KZ: 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Kazakhstan\r\n            LB: 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',                               // Lebanon\r\n            LI: 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Liechtenstein\r\n            LT: 'LT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Lithuania\r\n            LU: 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Luxembourg\r\n            LV: 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',                               // Latvia\r\n            MC: 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // Monaco\r\n            MD: 'MD[0-9]{2}[A-Z0-9]{20}',                                       // Moldova\r\n            ME: 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Montenegro\r\n            MG: 'MG[0-9]{2}[0-9]{23}',                                          // Madagascar\r\n            MK: 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',                       // Macedonia\r\n            ML: 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Mali\r\n            MR: 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',                        // Mauritania\r\n            MT: 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',                       // Malta\r\n            MU: 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',  // Mauritius\r\n            MZ: 'MZ[0-9]{2}[0-9]{21}',                                          // Mozambique\r\n            NL: 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',                                  // Netherlands\r\n            NO: 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',                           // Norway\r\n            PK: 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Pakistan\r\n            PL: 'PL[0-9]{2}[0-9]{8}[0-9]{16}',                                  // Poland\r\n            PS: 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Palestinian\r\n            PT: 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',                  // Portugal\r\n            QA: 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Qatar\r\n            RO: 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Romania\r\n            RS: 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Serbia\r\n            SA: 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',                               // Saudi Arabia\r\n            SE: 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',                          // Sweden\r\n            SI: 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',                           // Slovenia\r\n            SK: 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',                          // Slovakia\r\n            SM: 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // San Marino\r\n            SN: 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Senegal\r\n            TN: 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Tunisia\r\n            TR: 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',                    // Turkey\r\n            VG: 'VG[0-9]{2}[A-Z]{4}[0-9]{16}'                                   // Virgin Islands, British\r\n        },\r\n\r\n        /**\r\n         * Validate an International Bank Account Number (IBAN)\r\n         * To test it, take the sample IBAN from\r\n         * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - A country code\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'iban');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || !this.REGEX[country]) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            var locale = validator.getLocale();\r\n            if (!this.REGEX[country]) {\r\n                return true;\r\n            }\r\n\r\n            if (!(new RegExp('^' + this.REGEX[country] + '$')).test(value)) {\r\n                return {\r\n                    valid: false,\r\n                    message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].iban.country, FormValidation.I18n[locale].iban.countries[country])\r\n                };\r\n            }\r\n\r\n            value = value.substr(4) + value.substr(0, 4);\r\n            value = $.map(value.split(''), function(n) {\r\n                var code = n.charCodeAt(0);\r\n                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n                        // Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n                        ? (code - 'A'.charCodeAt(0) + 10)\r\n                        : n;\r\n            });\r\n            value = value.join('');\r\n\r\n            var temp   = parseInt(value.substr(0, 1), 10),\r\n                length = value.length;\r\n            for (var i = 1; i < length; ++i) {\r\n                temp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;\r\n            }\r\n\r\n            return {\r\n                valid: (temp === 1),\r\n                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].iban.country, FormValidation.I18n[locale].iban.countries[country])\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            id: {\r\n                'default': 'Please enter a valid identification number',\r\n                country: 'Please enter a valid identification number in %s',\r\n                countries: {\r\n                    BA: 'Bosnia and Herzegovina',\r\n                    BG: 'Bulgaria',\r\n                    BR: 'Brazil',\r\n                    CH: 'Switzerland',\r\n                    CL: 'Chile',\r\n                    CN: 'China',\r\n                    CZ: 'Czech Republic',\r\n                    DK: 'Denmark',\r\n                    EE: 'Estonia',\r\n                    ES: 'Spain',\r\n                    FI: 'Finland',\r\n                    HR: 'Croatia',\r\n                    IE: 'Ireland',\r\n                    IS: 'Iceland',\r\n                    LT: 'Lithuania',\r\n                    LV: 'Latvia',\r\n                    ME: 'Montenegro',\r\n                    MK: 'Macedonia',\r\n                    NL: 'Netherlands',\r\n                    RO: 'Romania',\r\n                    RS: 'Serbia',\r\n                    SE: 'Sweden',\r\n                    SI: 'Slovenia',\r\n                    SK: 'Slovakia',\r\n                    SM: 'San Marino',\r\n                    TH: 'Thailand',\r\n                    ZA: 'South Africa'\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.id = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // Supported country codes\r\n        COUNTRY_CODES: [\r\n            'BA', 'BG', 'BR', 'CH', 'CL', 'CN', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL',\r\n            'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'TH', 'ZA'\r\n        ],\r\n\r\n        /**\r\n         * Validate identification number in different countries\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - One of country code defined in COUNTRY_CODES\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'id');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var locale  = validator.getLocale(),\r\n                country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                return true;\r\n            }\r\n\r\n            var method  = ['_', country.toLowerCase()].join('');\r\n            return this[method](value)\r\n                    ? true\r\n                    : {\r\n                        valid: false,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].id.country, FormValidation.I18n[locale].id.countries[country.toUpperCase()])\r\n                    };\r\n        },\r\n\r\n        /**\r\n         * Validate Unique Master Citizen Number which uses in\r\n         * - Bosnia and Herzegovina (country code: BA)\r\n         * - Macedonia (MK)\r\n         * - Montenegro (ME)\r\n         * - Serbia (RS)\r\n         * - Slovenia (SI)\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\r\n         * @param {String} value The ID\r\n         * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI\r\n         * @returns {Boolean}\r\n         */\r\n        _validateJMBG: function(value, countryCode) {\r\n            if (!/^\\d{13}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 3), 10),\r\n                rr    = parseInt(value.substr(7, 2), 10),\r\n                k     = parseInt(value.substr(12, 1), 10);\r\n\r\n            // Validate date of birth\r\n            // FIXME: Validate the year of birth\r\n            if (day > 31 || month > 12) {\r\n                return false;\r\n            }\r\n\r\n            // Validate checksum\r\n            var sum = 0;\r\n            for (var i = 0; i < 6; i++) {\r\n                sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10 || sum === 11) {\r\n                sum = 0;\r\n            }\r\n            if (sum !== k) {\r\n                return false;\r\n            }\r\n\r\n            // Validate political region\r\n            // rr is the political region of birth, which can be in ranges:\r\n            // 10-19: Bosnia and Herzegovina\r\n            // 20-29: Montenegro\r\n            // 30-39: Croatia (not used anymore)\r\n            // 41-49: Macedonia\r\n            // 50-59: Slovenia (only 50 is used)\r\n            // 70-79: Central Serbia\r\n            // 80-89: Serbian province of Vojvodina\r\n            // 90-99: Kosovo\r\n            switch (countryCode.toUpperCase()) {\r\n                case 'BA':\r\n                    return (10 <= rr && rr <= 19);\r\n                case 'MK':\r\n                    return (41 <= rr && rr <= 49);\r\n                case 'ME':\r\n                    return (20 <= rr && rr <= 29);\r\n                case 'RS':\r\n                    return (70 <= rr && rr <= 99);\r\n                case 'SI':\r\n                    return (50 <= rr && rr <= 59);\r\n                default:\r\n                    return true;\r\n            }\r\n        },\r\n\r\n        _ba: function(value) {\r\n            return this._validateJMBG(value, 'BA');\r\n        },\r\n        _mk: function(value) {\r\n            return this._validateJMBG(value, 'MK');\r\n        },\r\n        _me: function(value) {\r\n            return this._validateJMBG(value, 'ME');\r\n        },\r\n        _rs: function(value) {\r\n            return this._validateJMBG(value, 'RS');\r\n        },\r\n\r\n        /**\r\n         * Examples: 0101006500006\r\n         */\r\n        _si: function(value) {\r\n            return this._validateJMBG(value, 'SI');\r\n        },\r\n\r\n        /**\r\n         * Validate Bulgarian national identification number (EGN)\r\n         * Examples:\r\n         * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030\r\n         * - Invalid: 8019010008\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Uniform_civil_number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _bg: function(value) {\r\n            if (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\s/g, '');\r\n            // Check the birth date\r\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (month > 40) {\r\n                year += 100;\r\n                month -= 40;\r\n            } else if (month > 20) {\r\n                year -= 100;\r\n                month -= 20;\r\n            }\r\n\r\n            if (!FormValidation.Helper.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n            for (var i = 0; i < 9; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum % 11) % 10;\r\n            return (sum + '' === value.substr(9, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Brazilian national identification number (CPF)\r\n         * Examples:\r\n         * - Valid: 39053344705, 390.533.447-05, 111.444.777-35\r\n         * - Invalid: 231.002.999-00\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _br: function(value) {\r\n            value = value.replace(/\\D/g, '');\r\n\r\n            if (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var d1 = 0;\r\n            for (var i = 0; i < 9; i++) {\r\n                d1 += (10 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            d1 = 11 - d1 % 11;\r\n            if (d1 === 10 || d1 === 11) {\r\n                d1 = 0;\r\n            }\r\n            if (d1 + '' !== value.charAt(9)) {\r\n                return false;\r\n            }\r\n\r\n            var d2 = 0;\r\n            for (i = 0; i < 10; i++) {\r\n                d2 += (11 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            d2 = 11 - d2 % 11;\r\n            if (d2 === 10 || d2 === 11) {\r\n                d2 = 0;\r\n            }\r\n\r\n            return (d2 + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Swiss Social Security Number (AHV-Nr/No AVS)\r\n         * Examples:\r\n         * - Valid: 756.1234.5678.95, 7561234567895\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\r\n         * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ch: function(value) {\r\n            if (!/^756[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{2}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '').substr(3);\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = (length === 8) ? [3, 1] : [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = 10 - sum % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Chilean national identification number (RUN/RUT)\r\n         * Examples:\r\n         * - Valid: 76086428-5, 22060449-7, 12531909-2\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\r\n         * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cl: function(value) {\r\n            if (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\-/g, '');\r\n            while (value.length < 9) {\r\n                value = '0' + value;\r\n            }\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            } else if (sum === 10) {\r\n                sum = 'K';\r\n            }\r\n            return sum + '' === value.charAt(8).toUpperCase();\r\n        },\r\n\r\n        /**\r\n         * Validate Chinese citizen identification number\r\n         *\r\n         * Rules:\r\n         * - For current 18-digit system (since 1st Oct 1999, defined by GB11643—1999 national standard):\r\n         *     - Digit 0-5: Must be a valid administrative division code of China PR.\r\n         *     - Digit 6-13: Must be a valid YYYYMMDD date of birth. A future date is tolerated.\r\n         *     - Digit 14-16: Order code, any integer.\r\n         *     - Digit 17: An ISO 7064:1983, MOD 11-2 checksum.\r\n         *       Both upper/lower case of X are tolerated.\r\n         * - For deprecated 15-digit system:\r\n         *     - Digit 0-5: Must be a valid administrative division code of China PR.\r\n         *     - Digit 6-11: Must be a valid YYMMDD date of birth, indicating the year of 19XX.\r\n         *     - Digit 12-14: Order code, any integer.\r\n         * Lists of valid administrative division codes of China PR can be seen here:\r\n         * <http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/>\r\n         * Published and maintained by National Bureau of Statistics of China PR.\r\n         * NOTE: Current and deprecated codes MUST BOTH be considered valid.\r\n         * Many Chinese citizens born in once existed administrative divisions!\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Resident_Identity_Card#Identity_card_number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cn: function(value) {\r\n            // Basic format check (18 or 15 digits, considering X in checksum)\r\n            value = value.trim();\r\n            if (!/^\\d{15}$/.test(value) && !/^\\d{17}[\\dXx]{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n            \r\n            // Check China PR Administrative division code\r\n            var adminDivisionCodes = {\r\n                11: {\r\n                    0: [0],\r\n                    1: [[0, 9], [11, 17]],\r\n                    2: [0, 28, 29]\r\n                },\r\n                12: {\r\n                    0: [0],\r\n                    1: [[0, 16]],\r\n                    2: [0, 21, 23, 25]\r\n                },\r\n                13: {\r\n                    0: [0],\r\n                    1: [[0, 5], 7, 8, 21, [23, 33], [81, 85]],\r\n                    2: [[0, 5], [7, 9], [23, 25], 27, 29, 30, 81, 83],\r\n                    3: [[0, 4], [21, 24]],\r\n                    4: [[0, 4], 6, 21, [23, 35], 81],\r\n                    5: [[0, 3], [21, 35], 81, 82],\r\n                    6: [[0, 4], [21, 38], [81, 84]],\r\n                    7: [[0, 3], 5, 6, [21, 33]],\r\n                    8: [[0, 4], [21, 28]],\r\n                    9: [[0, 3], [21, 30], [81, 84]],\r\n                    10: [[0, 3], [22, 26], 28, 81, 82],\r\n                    11: [[0, 2], [21, 28], 81, 82]\r\n                },\r\n                14: {\r\n                    0: [0],\r\n                    1: [0, 1, [5, 10], [21, 23], 81],\r\n                    2: [[0, 3], 11, 12, [21, 27]],\r\n                    3: [[0, 3], 11, 21, 22],\r\n                    4: [[0, 2], 11, 21, [23, 31], 81],\r\n                    5: [[0, 2], 21, 22, 24, 25, 81],\r\n                    6: [[0, 3], [21, 24]],\r\n                    7: [[0, 2], [21, 29], 81],\r\n                    8: [[0, 2], [21, 30], 81, 82],\r\n                    9: [[0, 2], [21, 32], 81],\r\n                    10: [[0, 2], [21, 34], 81, 82],\r\n                    11: [[0, 2], [21, 30], 81, 82],\r\n                    23: [[0, 3], 22, 23, [25, 30], 32, 33]\r\n                },\r\n                15: {\r\n                    0: [0],\r\n                    1: [[0, 5], [21, 25]],\r\n                    2: [[0, 7], [21, 23]],\r\n                    3: [[0, 4]],\r\n                    4: [[0, 4], [21, 26], [28, 30]],\r\n                    5: [[0, 2], [21, 26], 81],\r\n                    6: [[0, 2], [21, 27]],\r\n                    7: [[0, 3], [21, 27], [81, 85]],\r\n                    8: [[0, 2], [21, 26]],\r\n                    9: [[0, 2], [21, 29], 81],\r\n                    22: [[0, 2], [21, 24]],\r\n                    25: [[0, 2], [22, 31]],\r\n                    26: [[0, 2], [24, 27], [29, 32], 34],\r\n                    28: [0, 1, [22, 27]],\r\n                    29: [0, [21, 23]]\r\n                },\r\n                21: {\r\n                    0: [0],\r\n                    1: [[0, 6], [11, 14], [22, 24], 81],\r\n                    2: [[0, 4], [11, 13], 24, [81, 83]],\r\n                    3: [[0, 4], 11, 21, 23, 81],\r\n                    4: [[0, 4], 11, [21, 23]],\r\n                    5: [[0, 5], 21, 22],\r\n                    6: [[0, 4], 24, 81, 82],\r\n                    7: [[0, 3], 11, 26, 27, 81, 82],\r\n                    8: [[0, 4], 11, 81, 82],\r\n                    9: [[0, 5], 11, 21, 22],\r\n                    10: [[0, 5], 11, 21, 81],\r\n                    11: [[0, 3], 21, 22],\r\n                    12: [[0, 2], 4, 21, 23, 24, 81, 82],\r\n                    13: [[0, 3], 21, 22, 24, 81, 82],\r\n                    14: [[0, 4], 21, 22, 81]\r\n                },\r\n                22: {\r\n                    0: [0],\r\n                    1: [[0, 6], 12, 22, [81, 83]],\r\n                    2: [[0, 4], 11, 21, [81, 84]],\r\n                    3: [[0, 3], 22, 23, 81, 82],\r\n                    4: [[0, 3], 21, 22],\r\n                    5: [[0, 3], 21, 23, 24, 81, 82],\r\n                    6: [[0, 2], 4, 5, [21, 23], 25, 81],\r\n                    7: [[0, 2], [21, 24], 81],\r\n                    8: [[0, 2], 21, 22, 81, 82],\r\n                    24: [[0, 6], 24, 26]\r\n                },\r\n                23: {\r\n                    0: [0],\r\n                    1: [[0, 12], 21, [23, 29], [81, 84]],\r\n                    2: [[0, 8], 21, [23, 25], 27, [29, 31], 81],\r\n                    3: [[0, 7], 21, 81, 82],\r\n                    4: [[0, 7], 21, 22],\r\n                    5: [[0, 3], 5, 6, [21, 24]],\r\n                    6: [[0, 6], [21, 24]],\r\n                    7: [[0, 16], 22, 81],\r\n                    8: [[0, 5], 11, 22, 26, 28, 33, 81, 82],\r\n                    9: [[0, 4], 21],\r\n                    10: [[0, 5], 24, 25, 81, [83, 85]],\r\n                    11: [[0, 2], 21, 23, 24, 81, 82],\r\n                    12: [[0, 2], [21, 26], [81, 83]],\r\n                    27: [[0, 4], [21, 23]]\r\n                },\r\n                31: {\r\n                    0: [0],\r\n                    1: [0, 1, [3, 10], [12, 20]],\r\n                    2: [0, 30]\r\n                },\r\n                32: {\r\n                    0: [0],\r\n                    1: [[0, 7], 11, [13, 18], 24, 25],\r\n                    2: [[0, 6], 11, 81, 82],\r\n                    3: [[0, 5], 11, 12, [21, 24], 81, 82],\r\n                    4: [[0, 2], 4, 5, 11, 12, 81, 82],\r\n                    5: [[0, 9], [81, 85]],\r\n                    6: [[0, 2], 11, 12, 21, 23, [81, 84]],\r\n                    7: [0, 1, 3, 5, 6, [21, 24]],\r\n                    8: [[0, 4], 11, 26, [29, 31]],\r\n                    9: [[0, 3], [21, 25], 28, 81, 82],\r\n                    10: [[0, 3], 11, 12, 23, 81, 84, 88],\r\n                    11: [[0, 2], 11, 12, [81, 83]],\r\n                    12: [[0, 4], [81, 84]],\r\n                    13: [[0, 2], 11, [21, 24]]\r\n                },\r\n                33: {\r\n                    0: [0],\r\n                    1: [[0, 6], [8, 10], 22, 27, 82, 83, 85],\r\n                    2: [0, 1, [3, 6], 11, 12, 25, 26, [81, 83]],\r\n                    3: [[0, 4], 22, 24, [26, 29], 81, 82],\r\n                    4: [[0, 2], 11, 21, 24, [81, 83]],\r\n                    5: [[0, 3], [21, 23]],\r\n                    6: [[0, 2], 21, 24, [81, 83]],\r\n                    7: [[0, 3], 23, 26, 27, [81, 84]],\r\n                    8: [[0, 3], 22, 24, 25, 81],\r\n                    9: [[0, 3], 21, 22],\r\n                    10: [[0, 4], [21, 24], 81, 82],\r\n                    11: [[0, 2], [21, 27], 81]\r\n                },\r\n                34: {\r\n                    0: [0],\r\n                    1: [[0, 4], 11, [21, 24], 81],\r\n                    2: [[0, 4], 7, 8, [21, 23], 25],\r\n                    3: [[0, 4], 11, [21, 23]],\r\n                    4: [[0, 6], 21],\r\n                    5: [[0, 4], 6, [21, 23]],\r\n                    6: [[0, 4], 21],\r\n                    7: [[0, 3], 11, 21],\r\n                    8: [[0, 3], 11, [22, 28], 81],\r\n                    10: [[0, 4], [21, 24]],\r\n                    11: [[0, 3], 22, [24, 26], 81, 82],\r\n                    12: [[0, 4], 21, 22, 25, 26, 82],\r\n                    13: [[0, 2], [21, 24]],\r\n                    14: [[0, 2], [21, 24]],\r\n                    15: [[0, 3], [21, 25]],\r\n                    16: [[0, 2], [21, 23]],\r\n                    17: [[0, 2], [21, 23]],\r\n                    18: [[0, 2], [21, 25], 81]\r\n                },\r\n                35: {\r\n                    0: [0],\r\n                    1: [[0, 5], 11, [21, 25], 28, 81, 82],\r\n                    2: [[0, 6], [11, 13]],\r\n                    3: [[0, 5], 22],\r\n                    4: [[0, 3], 21, [23, 30], 81],\r\n                    5: [[0, 5], 21, [24, 27], [81, 83]],\r\n                    6: [[0, 3], [22, 29], 81],\r\n                    7: [[0, 2], [21, 25], [81, 84]],\r\n                    8: [[0, 2], [21, 25], 81],\r\n                    9: [[0, 2], [21, 26], 81, 82]\r\n                },\r\n                36: {\r\n                    0: [0],\r\n                    1: [[0, 5], 11, [21, 24]],\r\n                    2: [[0, 3], 22, 81],\r\n                    3: [[0, 2], 13, [21, 23]],\r\n                    4: [[0, 3], 21, [23, 30], 81, 82],\r\n                    5: [[0, 2], 21],\r\n                    6: [[0, 2], 22, 81],\r\n                    7: [[0, 2], [21, 35], 81, 82],\r\n                    8: [[0, 3], [21, 30], 81],\r\n                    9: [[0, 2], [21, 26], [81, 83]],\r\n                    10: [[0, 2], [21, 30]],\r\n                    11: [[0, 2], [21, 30], 81]\r\n                },\r\n                37: {\r\n                    0: [0],\r\n                    1: [[0, 5], 12, 13, [24, 26], 81],\r\n                    2: [[0, 3], 5, [11, 14], [81, 85]],\r\n                    3: [[0, 6], [21, 23]],\r\n                    4: [[0, 6], 81],\r\n                    5: [[0, 3], [21, 23]],\r\n                    6: [[0, 2], [11, 13], 34, [81, 87]],\r\n                    7: [[0, 5], 24, 25, [81, 86]],\r\n                    8: [[0, 2], 11, [26, 32], [81, 83]],\r\n                    9: [[0, 3], 11, 21, 23, 82, 83],\r\n                    10: [[0, 2], [81, 83]],\r\n                    11: [[0, 3], 21, 22],\r\n                    12: [[0, 3]],\r\n                    13: [[0, 2], 11, 12, [21, 29]],\r\n                    14: [[0, 2], [21, 28], 81, 82],\r\n                    15: [[0, 2], [21, 26], 81],\r\n                    16: [[0, 2], [21, 26]],\r\n                    17: [[0, 2], [21, 28]]\r\n                },\r\n                41: {\r\n                    0: [0],\r\n                    1: [[0, 6], 8, 22, [81, 85]],\r\n                    2: [[0, 5], 11, [21, 25]],\r\n                    3: [[0, 7], 11, [22, 29], 81],\r\n                    4: [[0, 4], 11, [21, 23], 25, 81, 82],\r\n                    5: [[0, 3], 5, 6, 22, 23, 26, 27, 81],\r\n                    6: [[0, 3], 11, 21, 22],\r\n                    7: [[0, 4], 11, 21, [24, 28], 81, 82],\r\n                    8: [[0, 4], 11, [21, 23], 25, [81, 83]],\r\n                    9: [[0, 2], 22, 23, [26, 28]],\r\n                    10: [[0, 2], [23, 25], 81, 82],\r\n                    11: [[0, 4], [21, 23]],\r\n                    12: [[0, 2], 21, 22, 24, 81, 82],\r\n                    13: [[0, 3], [21, 30], 81],\r\n                    14: [[0, 3], [21, 26], 81],\r\n                    15: [[0, 3], [21, 28]],\r\n                    16: [[0, 2], [21, 28], 81],\r\n                    17: [[0, 2], [21, 29]],\r\n                    90: [0, 1]\r\n                },\r\n                42: {\r\n                    0: [0],\r\n                    1: [[0, 7], [11, 17]],\r\n                    2: [[0, 5], 22, 81],\r\n                    3: [[0, 3], [21, 25], 81],\r\n                    5: [[0, 6], [25, 29], [81, 83]],\r\n                    6: [[0, 2], 6, 7, [24, 26], [82, 84]],\r\n                    7: [[0, 4]],\r\n                    8: [[0, 2], 4, 21, 22, 81],\r\n                    9: [[0, 2], [21, 23], 81, 82, 84],\r\n                    10: [[0, 3], [22, 24], 81, 83, 87],\r\n                    11: [[0, 2], [21, 27], 81, 82],\r\n                    12: [[0, 2], [21, 24], 81],\r\n                    13: [[0, 3], 21, 81],\r\n                    28: [[0, 2], 22, 23, [25, 28]],\r\n                    90: [0, [4, 6], 21]\r\n                },\r\n                43: {\r\n                    0: [0],\r\n                    1: [[0, 5], 11, 12, 21, 22, 24, 81],\r\n                    2: [[0, 4], 11, 21, [23, 25], 81],\r\n                    3: [[0, 2], 4, 21, 81, 82],\r\n                    4: [0, 1, [5, 8], 12, [21, 24], 26, 81, 82],\r\n                    5: [[0, 3], 11, [21, 25], [27, 29], 81],\r\n                    6: [[0, 3], 11, 21, 23, 24, 26, 81, 82],\r\n                    7: [[0, 3], [21, 26], 81],\r\n                    8: [[0, 2], 11, 21, 22],\r\n                    9: [[0, 3], [21, 23], 81],\r\n                    10: [[0, 3], [21, 28], 81],\r\n                    11: [[0, 3], [21, 29]],\r\n                    12: [[0, 2], [21, 30], 81],\r\n                    13: [[0, 2], 21, 22, 81, 82],\r\n                    31: [0, 1, [22, 27], 30]\r\n                },\r\n                44: {\r\n                    0: [0],\r\n                    1: [[0, 7], [11, 16], 83, 84],\r\n                    2: [[0, 5], 21, 22, 24, 29, 32, 33, 81, 82],\r\n                    3: [0, 1, [3, 8]],\r\n                    4: [[0, 4]],\r\n                    5: [0, 1, [6, 15], 23, 82, 83],\r\n                    6: [0, 1, [4, 8]],\r\n                    7: [0, 1, [3, 5], 81, [83, 85]],\r\n                    8: [[0, 4], 11, 23, 25, [81, 83]],\r\n                    9: [[0, 3], 23, [81, 83]],\r\n                    12: [[0, 3], [23, 26], 83, 84],\r\n                    13: [[0, 3], [22, 24], 81],\r\n                    14: [[0, 2], [21, 24], 26, 27, 81],\r\n                    15: [[0, 2], 21, 23, 81],\r\n                    16: [[0, 2], [21, 25]],\r\n                    17: [[0, 2], 21, 23, 81],\r\n                    18: [[0, 3], 21, 23, [25, 27], 81, 82],\r\n                    19: [0],\r\n                    20: [0],\r\n                    51: [[0, 3], 21, 22],\r\n                    52: [[0, 3], 21, 22, 24, 81],\r\n                    53: [[0, 2], [21, 23], 81]\r\n                },\r\n                45: {\r\n                    0: [0],\r\n                    1: [[0, 9], [21, 27]],\r\n                    2: [[0, 5], [21, 26]],\r\n                    3: [[0, 5], 11, 12, [21, 32]],\r\n                    4: [0, 1, [3, 6], 11, [21, 23], 81],\r\n                    5: [[0, 3], 12, 21],\r\n                    6: [[0, 3], 21, 81],\r\n                    7: [[0, 3], 21, 22],\r\n                    8: [[0, 4], 21, 81],\r\n                    9: [[0, 3], [21, 24], 81],\r\n                    10: [[0, 2], [21, 31]],\r\n                    11: [[0, 2], [21, 23]],\r\n                    12: [[0, 2], [21, 29], 81],\r\n                    13: [[0, 2], [21, 24], 81],\r\n                    14: [[0, 2], [21, 25], 81]\r\n                },\r\n                46: {\r\n                    0: [0],\r\n                    1: [0, 1, [5, 8]],\r\n                    2: [0, 1],\r\n                    3: [0, [21, 23]],\r\n                    90: [[0, 3], [5, 7], [21, 39]]\r\n                },\r\n                50: {\r\n                    0: [0],\r\n                    1: [[0, 19]],\r\n                    2: [0, [22, 38], [40, 43]],\r\n                    3: [0, [81, 84]]\r\n                },\r\n                51: {\r\n                    0: [0],\r\n                    1: [0, 1, [4, 8], [12, 15], [21, 24], 29, 31, 32, [81, 84]],\r\n                    3: [[0, 4], 11, 21, 22],\r\n                    4: [[0, 3], 11, 21, 22],\r\n                    5: [[0, 4], 21, 22, 24, 25],\r\n                    6: [0, 1, 3, 23, 26, [81, 83]],\r\n                    7: [0, 1, 3, 4, [22, 27], 81],\r\n                    8: [[0, 2], 11, 12, [21, 24]],\r\n                    9: [[0, 4], [21, 23]],\r\n                    10: [[0, 2], 11, 24, 25, 28],\r\n                    11: [[0, 2], [11, 13], 23, 24, 26, 29, 32, 33, 81],\r\n                    13: [[0, 4], [21, 25], 81],\r\n                    14: [[0, 2], [21, 25]],\r\n                    15: [[0, 3], [21, 29]],\r\n                    16: [[0, 3], [21, 23], 81],\r\n                    17: [[0, 3], [21, 25], 81],\r\n                    18: [[0, 3], [21, 27]],\r\n                    19: [[0, 3], [21, 23]],\r\n                    20: [[0, 2], 21, 22, 81],\r\n                    32: [0, [21, 33]],\r\n                    33: [0, [21, 38]],\r\n                    34: [0, 1, [22, 37]]\r\n                },\r\n                52: {\r\n                    0: [0],\r\n                    1: [[0, 3], [11, 15], [21, 23], 81],\r\n                    2: [0, 1, 3, 21, 22],\r\n                    3: [[0, 3], [21, 30], 81, 82],\r\n                    4: [[0, 2], [21, 25]],\r\n                    5: [[0, 2], [21, 27]],\r\n                    6: [[0, 3], [21, 28]],\r\n                    22: [0, 1, [22, 30]],\r\n                    23: [0, 1, [22, 28]],\r\n                    24: [0, 1, [22, 28]],\r\n                    26: [0, 1, [22, 36]],\r\n                    27: [[0, 2], 22, 23, [25, 32]]\r\n                },\r\n                53: {\r\n                    0: [0],\r\n                    1: [[0, 3], [11, 14], 21, 22, [24, 29], 81],\r\n                    3: [[0, 2], [21, 26], 28, 81],\r\n                    4: [[0, 2], [21, 28]],\r\n                    5: [[0, 2], [21, 24]],\r\n                    6: [[0, 2], [21, 30]],\r\n                    7: [[0, 2], [21, 24]],\r\n                    8: [[0, 2], [21, 29]],\r\n                    9: [[0, 2], [21, 27]],\r\n                    23: [0, 1, [22, 29], 31],\r\n                    25: [[0, 4], [22, 32]],\r\n                    26: [0, 1, [21, 28]],\r\n                    27: [0, 1, [22, 30]], 28: [0, 1, 22, 23],\r\n                    29: [0, 1, [22, 32]],\r\n                    31: [0, 2, 3, [22, 24]],\r\n                    34: [0, [21, 23]],\r\n                    33: [0, 21, [23, 25]],\r\n                    35: [0, [21, 28]]\r\n                },\r\n                54: {\r\n                    0: [0],\r\n                    1: [[0, 2], [21, 27]],\r\n                    21: [0, [21, 29], 32, 33],\r\n                    22: [0, [21, 29], [31, 33]],\r\n                    23: [0, 1, [22, 38]],\r\n                    24: [0, [21, 31]],\r\n                    25: [0, [21, 27]],\r\n                    26: [0, [21, 27]]\r\n                },\r\n                61: {\r\n                    0: [0],\r\n                    1: [[0, 4], [11, 16], 22, [24, 26]],\r\n                    2: [[0, 4], 22],\r\n                    3: [[0, 4], [21, 24], [26, 31]],\r\n                    4: [[0, 4], [22, 31], 81],\r\n                    5: [[0, 2], [21, 28], 81, 82],\r\n                    6: [[0, 2], [21, 32]],\r\n                    7: [[0, 2], [21, 30]],\r\n                    8: [[0, 2], [21, 31]],\r\n                    9: [[0, 2], [21, 29]],\r\n                    10: [[0, 2], [21, 26]]\r\n                },\r\n                62: {\r\n                    0: [0],\r\n                    1: [[0, 5], 11, [21, 23]],\r\n                    2: [0, 1],\r\n                    3: [[0, 2], 21],\r\n                    4: [[0, 3], [21, 23]],\r\n                    5: [[0, 3], [21, 25]],\r\n                    6: [[0, 2], [21, 23]],\r\n                    7: [[0, 2], [21, 25]],\r\n                    8: [[0, 2], [21, 26]],\r\n                    9: [[0, 2], [21, 24], 81, 82],\r\n                    10: [[0, 2], [21, 27]],\r\n                    11: [[0, 2], [21, 26]],\r\n                    12: [[0, 2], [21, 28]],\r\n                    24: [0, 21, [24, 29]],\r\n                    26: [0, 21, [23, 30]],\r\n                    29: [0, 1, [21, 27]],\r\n                    30: [0, 1, [21, 27]]\r\n                },\r\n                63: {\r\n                    0: [0],\r\n                    1: [[0, 5], [21, 23]],\r\n                    2: [0, 2, [21, 25]],\r\n                    21: [0, [21, 23], [26, 28]],\r\n                    22: [0, [21, 24]],\r\n                    23: [0, [21, 24]],\r\n                    25: [0, [21, 25]],\r\n                    26: [0, [21, 26]],\r\n                    27: [0, 1, [21, 26]],\r\n                    28: [[0, 2], [21, 23]]\r\n                },\r\n                64: {\r\n                    0: [0],\r\n                    1: [0, 1, [4, 6], 21, 22, 81],\r\n                    2: [[0, 3], 5, [21, 23]],\r\n                    3: [[0, 3], [21, 24], 81],\r\n                    4: [[0, 2], [21, 25]],\r\n                    5: [[0, 2], 21, 22]\r\n                },\r\n                65: {\r\n                    0: [0],\r\n                    1: [[0, 9], 21],\r\n                    2: [[0, 5]],\r\n                    21: [0, 1, 22, 23],\r\n                    22: [0, 1, 22, 23],\r\n                    23: [[0, 3], [23, 25], 27, 28],\r\n                    28: [0, 1, [22, 29]],\r\n                    29: [0, 1, [22, 29]],\r\n                    30: [0, 1, [22, 24]], 31: [0, 1, [21, 31]],\r\n                    32: [0, 1, [21, 27]],\r\n                    40: [0, 2, 3, [21, 28]],\r\n                    42: [[0, 2], 21, [23, 26]],\r\n                    43: [0, 1, [21, 26]],\r\n                    90: [[0, 4]], 27: [[0, 2], 22, 23]\r\n                },\r\n                71: { 0: [0] },\r\n                81: { 0: [0] },\r\n                82: { 0: [0] }\r\n            };\r\n            \r\n            var provincial  = parseInt(value.substr(0, 2), 10),\r\n                prefectural = parseInt(value.substr(2, 2), 10),\r\n                county      = parseInt(value.substr(4, 2), 10);\r\n            \r\n            if (!adminDivisionCodes[provincial] || !adminDivisionCodes[provincial][prefectural]) {\r\n                return false;\r\n            }\r\n            var inRange  = false,\r\n                rangeDef = adminDivisionCodes[provincial][prefectural];\r\n            for (var i = 0; i < rangeDef.length; i++) {\r\n                if (($.isArray(rangeDef[i]) && rangeDef[i][0] <= county && county <= rangeDef[i][1])\r\n                    || (!$.isArray(rangeDef[i]) && county === rangeDef[i]))\r\n                {\r\n                    inRange = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!inRange) {\r\n                return false;\r\n            }\r\n            \r\n            // Check date of birth\r\n            var dob;\r\n            if (value.length === 18) {\r\n                dob = value.substr(6, 8);\r\n            } else /* length == 15 */ { \r\n                dob = '19' + value.substr(6, 6);\r\n            }\r\n            var year  = parseInt(dob.substr(0, 4), 10),\r\n                month = parseInt(dob.substr(4, 2), 10),\r\n                day   = parseInt(dob.substr(6, 2), 10);\r\n            if (!FormValidation.Helper.date(year, month, day)) {\r\n                return false;\r\n            }\r\n            \r\n            // Check checksum (18-digit system only)\r\n            if (value.length === 18) {\r\n                var sum    = 0,\r\n                    weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\r\n                for (i = 0; i < 17; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = (12 - (sum % 11)) % 11;\r\n                var checksum = (value.charAt(17).toUpperCase() !== 'X') ? parseInt(value.charAt(17), 10) : 10;\r\n                return checksum === sum;\r\n            }\r\n            \r\n            return true;\r\n        },\r\n        \r\n        /**\r\n         * Validate Czech national identification number (RC)\r\n         * Examples:\r\n         * - Valid: 7103192745, 991231123\r\n         * - Invalid: 1103492745, 590312123\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cz: function(value) {\r\n            if (!/^\\d{9,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (value.length === 9) {\r\n                if (year >= 1980) {\r\n                    year -= 100;\r\n                }\r\n                if (year > 1953) {\r\n                    return false;\r\n                }\r\n            } else if (year < 1954) {\r\n                year += 100;\r\n            }\r\n\r\n            if (!FormValidation.Helper.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Check that the birth date is not in the future\r\n            if (value.length === 10) {\r\n                var check = parseInt(value.substr(0, 9), 10) % 11;\r\n                if (year < 1985) {\r\n                    check = check % 10;\r\n                }\r\n                return (check + '' === value.substr(9, 1));\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Danish Personal Identification number (CPR)\r\n         * Examples:\r\n         * - Valid: 2110625629, 211062-5629\r\n         * - Invalid: 511062-5629\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _dk: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/-/g, '');\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 2), 10);\r\n\r\n            switch (true) {\r\n                case ('5678'.indexOf(value.charAt(6)) !== -1 && year >= 58):\r\n                    year += 1800;\r\n                    break;\r\n                case ('0123'.indexOf(value.charAt(6)) !== -1):\r\n                case ('49'.indexOf(value.charAt(6)) !== -1 && year >= 37):\r\n                    year += 1900;\r\n                    break;\r\n                default:\r\n                    year += 2000;\r\n                    break;\r\n            }\r\n\r\n            return FormValidation.Helper.date(year, month, day);\r\n        },\r\n\r\n        /**\r\n         * Validate Estonian Personal Identification Code (isikukood)\r\n         * Examples:\r\n         * - Valid: 37605030299\r\n         *\r\n         * @see http://et.wikipedia.org/wiki/Isikukood\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ee: function(value) {\r\n            // Use the same format as Lithuanian Personal Code\r\n            return this._lt(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Spanish personal identity code (DNI)\r\n         * Support i) DNI (for Spanish citizens), ii) NIE (for foreign people)\r\n         * and iii) CIF (for legal entities)\r\n         *\r\n         * Examples:\r\n         * - Valid:\r\n         *      i) 54362315K, 54362315-K\r\n         *      ii) X2482300W, X-2482300W, X-2482300-W\r\n         *      iii) A58818501, A-58818501\r\n         * - Invalid:\r\n         *      i) 54362315Z\r\n         *      ii) X-2482300A\r\n         *      iii) K58818501, G58818507\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _es: function(value) {\r\n            var isDNI = /^[0-9]{8}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(value),\r\n                isNIE = /^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(value),\r\n                isCIF = /^[A-HNPQS][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-J]$/.test(value);\r\n            if (!isDNI && !isNIE && !isCIF) {\r\n                return false;\r\n            }\r\n\r\n            value = value.replace(/-/g, '');\r\n            var check;\r\n            if (isDNI || isNIE) {\r\n                var index = 'XYZ'.indexOf(value.charAt(0));\r\n                if (index !== -1) {\r\n                    // It is NIE number\r\n                    value = index + value.substr(1) + '';\r\n                }\r\n\r\n                check = parseInt(value.substr(0, 8), 10);\r\n                check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                return (check === value.substr(8, 1));\r\n            } else {\r\n                check = value.substr(1, 7);\r\n                var letter  = value[0],\r\n                    control = value.substr(-1),\r\n                    sum     = 0;\r\n\r\n                // The digits in the even positions are added to the sum directly.\r\n                // The ones in the odd positions are multiplied by 2 and then added to the sum.\r\n                // If the result of multiplying by 2 is 10 or higher, add the two digits\r\n                // together and add that to the sum instead\r\n                for (var i = 0; i < check.length; i++) {\r\n                    if (i % 2 !== 0) {\r\n                        sum += parseInt(check[i], 10);\r\n                    } else {\r\n                        var tmp = '' + (parseInt(check[i], 10) * 2);\r\n                        sum += parseInt(tmp[0], 10);\r\n                        if (tmp.length === 2) {\r\n                            sum += parseInt(tmp[1], 10);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // The control digit is calculated from the last digit of the sum.\r\n                // If that last digit is not 0, subtract it from 10\r\n                var lastDigit = sum - (Math.floor(sum / 10) * 10);\r\n                if (lastDigit !== 0) {\r\n                    lastDigit = 10 - lastDigit;\r\n                }\r\n                \r\n                if ('KQS'.indexOf(letter) !== -1) {\r\n                    // If the CIF starts with a K, Q or S, the control digit must be a letter\r\n                    return (control === 'JABCDEFGHI'[lastDigit]);\r\n                } else if ('ABEH'.indexOf(letter) !== -1) {\r\n                    // If it starts with A, B, E or H, it has to be a number\r\n                    return (control === ('' + lastDigit));\r\n                } else {\r\n                    // In any other case, it doesn't matter\r\n                    return (control === ('' + lastDigit) || control === 'JABCDEFGHI'[lastDigit]);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Finnish Personal Identity Code (HETU)\r\n         * Examples:\r\n         * - Valid: 311280-888Y, 131052-308T\r\n         * - Invalid: 131052-308U, 310252-308Y\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _fi: function(value) {\r\n            if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\r\n                return false;\r\n            }\r\n            var day       = parseInt(value.substr(0, 2), 10),\r\n                month     = parseInt(value.substr(2, 2), 10),\r\n                year      = parseInt(value.substr(4, 2), 10),\r\n                centuries = {\r\n                    '+': 1800,\r\n                    '-': 1900,\r\n                    'A': 2000\r\n                };\r\n            year = centuries[value.charAt(6)] + year;\r\n\r\n            if (!FormValidation.Helper.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            var individual = parseInt(value.substr(7, 3), 10);\r\n            if (individual < 2) {\r\n                return false;\r\n            }\r\n            var n = value.substr(0, 6) + value.substr(7, 3) + '';\r\n            n = parseInt(n, 10);\r\n            return '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);\r\n        },\r\n\r\n        /**\r\n         * Validate Croatian personal identification number (OIB)\r\n         * Examples:\r\n         * - Valid: 33392005961\r\n         * - Invalid: 33392005962\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _hr: function(value) {\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            return FormValidation.Helper.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Irish Personal Public Service Number (PPS)\r\n         * Examples:\r\n         * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA\r\n         * - Invalid: 6433435E, 6433435VH\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ie: function(value) {\r\n            if (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var getCheckDigit = function(value) {\r\n                while (value.length < 7) {\r\n                    value = '0' + value;\r\n                }\r\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n                    sum      = 0;\r\n                for (var i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum += 9 * alphabet.indexOf(value.substr(7));\r\n                return alphabet[sum % 23];\r\n            };\r\n\r\n            // 2013 format\r\n            if (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n            }\r\n            // The old format\r\n            else {\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Iceland national identification number (Kennitala)\r\n         * Examples:\r\n         * - Valid: 120174-3399, 1201743399, 0902862349\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Kennitala\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _is: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/-/g, '');\r\n            var day     = parseInt(value.substr(0, 2), 10),\r\n                month   = parseInt(value.substr(2, 2), 10),\r\n                year    = parseInt(value.substr(4, 2), 10),\r\n                century = parseInt(value.charAt(9), 10);\r\n\r\n            year = (century === 9) ? (1900 + year) : ((20 + century) * 100 + year);\r\n            if (!FormValidation.Helper.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            return (sum + '' === value.charAt(8));\r\n        },\r\n\r\n        /**\r\n         * Validate Lithuanian Personal Code (Asmens kodas)\r\n         * Examples:\r\n         * - Valid: 38703181745\r\n         * - Invalid: 38703181746, 78703181745, 38703421745\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\r\n         * @see http://www.adomas.org/midi2007/pcode.html\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _lt: function(value) {\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var gender  = parseInt(value.charAt(0), 10),\r\n                year    = parseInt(value.substr(1, 2), 10),\r\n                month   = parseInt(value.substr(3, 2), 10),\r\n                day     = parseInt(value.substr(5, 2), 10),\r\n                century = (gender % 2 === 0) ? (17 + gender / 2) : (17 + (gender + 1) / 2);\r\n            year = century * 100 + year;\r\n            if (!FormValidation.Helper.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum !== 10) {\r\n                return sum + '' === value.charAt(10);\r\n            }\r\n\r\n            // Re-calculate the check digit\r\n            sum    = 0;\r\n            weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\r\n            for (i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Latvian Personal Code (Personas kods)\r\n         * Examples:\r\n         * - Valid: 161175-19997, 16117519997\r\n         * - Invalid: 161375-19997\r\n         *\r\n         * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _lv: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '');\r\n            // Check birth date\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 2), 10);\r\n            year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n            if (!FormValidation.Helper.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n\r\n            // Check personal code\r\n            var sum    = 0,\r\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum + 1) % 11 % 10;\r\n            return (sum + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Dutch national identification number (BSN)\r\n         * Examples:\r\n         * - Valid: 111222333, 941331490, 9413.31.490\r\n         * - Invalid: 111252333\r\n         *\r\n         * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _nl: function(value) {\r\n            while (value.length < 9) {\r\n                value = '0' + value;\r\n            }\r\n            if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\./g, '');\r\n            if (parseInt(value, 10) === 0) {\r\n                return false;\r\n            }\r\n            var sum    = 0,\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += (9 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Romanian numerical personal code (CNP)\r\n         * Examples:\r\n         * - Valid: 1630615123457, 1800101221144\r\n         * - Invalid: 8800101221144, 1632215123457, 1630615123458\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ro: function(value) {\r\n            if (!/^[0-9]{13}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var gender = parseInt(value.charAt(0), 10);\r\n            if (gender === 0 || gender === 7 || gender === 8) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the date of birth\r\n            var year      = parseInt(value.substr(1, 2), 10),\r\n                month     = parseInt(value.substr(3, 2), 10),\r\n                day       = parseInt(value.substr(5, 2), 10),\r\n                // The year of date is determined base on the gender\r\n                centuries = {\r\n                    '1': 1900,  // Male born between 1900 and 1999\r\n                    '2': 1900,  // Female born between 1900 and 1999\r\n                    '3': 1800,  // Male born between 1800 and 1899\r\n                    '4': 1800,  // Female born between 1800 and 1899\r\n                    '5': 2000,  // Male born after 2000\r\n                    '6': 2000   // Female born after 2000\r\n                };\r\n            if (day > 31 && month > 12) {\r\n                return false;\r\n            }\r\n            if (gender !== 9) {\r\n                year = centuries[gender + ''] + year;\r\n                if (!FormValidation.Helper.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 1;\r\n            }\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Swedish personal identity number (personnummer)\r\n         * Examples:\r\n         * - Valid: 8112289874, 811228-9874, 811228+9874\r\n         * - Invalid: 811228-9873\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _se: function(value) {\r\n            if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/[^0-9]/g, '');\r\n\r\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (!FormValidation.Helper.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the last check digit\r\n            return FormValidation.Helper.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Slovak national identifier number (RC)\r\n         * Examples:\r\n         * - Valid: 7103192745, 991231123\r\n         * - Invalid: 7103192746, 1103492745\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _sk: function(value) {\r\n            // Slovakia uses the same format as Czech Republic\r\n            return this._cz(value);\r\n        },\r\n\r\n        /**\r\n         * Validate San Marino citizen number\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _sm: function(value) {\r\n            return /^\\d{5}$/.test(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Thailand citizen number\r\n         * Examples:\r\n         * - Valid: 7145620509547, 3688699975685, 2368719339716\r\n         * - Invalid: 1100800092310\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Thailand\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _th: function(value) {\r\n            if (value.length !== 13) {\r\n                return false;\r\n            }\r\n\r\n            var sum = 0;\r\n            for (var i = 0; i < 12; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * (13 - i);\r\n            }\r\n\r\n            return (11 - sum % 11) % 10 === parseInt(value.charAt(12), 10);\r\n        },\r\n\r\n        /**\r\n         * Validate South African ID\r\n         * Example:\r\n         * - Valid: 8001015009087\r\n         * - Invalid: 8001015009287, 8001015009086\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _za: function(value) {\r\n            if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\r\n                return false;\r\n            }\r\n            var year        = parseInt(value.substr(0, 2), 10),\r\n                currentYear = new Date().getFullYear() % 100,\r\n                month       = parseInt(value.substr(2, 2), 10),\r\n                day         = parseInt(value.substr(4, 2), 10);\r\n            year = (year >= currentYear) ? (year + 1900) : (year + 2000);\r\n\r\n            if (!FormValidation.Helper.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the last check digit\r\n            return FormValidation.Helper.luhn(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            identical: {\r\n                'default': 'Please enter the same value'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.identical = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            field: 'field'\r\n        },\r\n\r\n        /**\r\n         * Bind the validator on the live change of the field to compare with current one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         */\r\n        init: function(validator, $field, options) {\r\n            var compareWith = validator.getFieldElements(options.field);\r\n            validator.onLiveChange(compareWith, 'live_identical', function() {\r\n                var status = validator.getStatus($field, 'identical');\r\n                if (status !== validator.STATUS_NOT_VALIDATED) {\r\n                    validator.revalidateField($field);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Unbind the validator on the live change of the field to compare with current one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         */\r\n        destroy: function(validator, $field, options) {\r\n            var compareWith = validator.getFieldElements(options.field);\r\n            validator.offLiveChange(compareWith, 'live_identical');\r\n        },\r\n\r\n        /**\r\n         * Check if input value equals to value of particular one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value       = validator.getFieldValue($field, 'identical'),\r\n                compareWith = validator.getFieldElements(options.field);\r\n            if (compareWith === null || compareWith.length === 0) {\r\n                return true;\r\n            }\r\n\r\n            var compareValue = validator.getFieldValue(compareWith, 'identical');\r\n            if (value === compareValue) {\r\n                validator.updateStatus(compareWith, validator.STATUS_VALID, 'identical');\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            imei: {\r\n                'default': 'Please enter a valid IMEI number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.imei = {\r\n        /**\r\n         * Validate IMEI (International Mobile Station Equipment Identity)\r\n         * Examples:\r\n         * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518\r\n         * - Invalid: 490154203237517\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'imei');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            switch (true) {\r\n                case /^\\d{15}$/.test(value):\r\n                case /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/.test(value):\r\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}\\s\\d{1}$/.test(value):\r\n                    value = value.replace(/[^0-9]/g, '');\r\n                    return FormValidation.Helper.luhn(value);\r\n\r\n                case /^\\d{14}$/.test(value):\r\n                case /^\\d{16}$/.test(value):\r\n                case /^\\d{2}-\\d{6}-\\d{6}(|-\\d{2})$/.test(value):\r\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}(|\\s\\d{2})$/.test(value):\r\n                    return true;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            imo: {\r\n                'default': 'Please enter a valid IMO number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.imo = {\r\n        /**\r\n         * Validate IMO (International Maritime Organization)\r\n         * Examples:\r\n         * - Valid: IMO 8814275, IMO 9176187\r\n         * - Invalid: IMO 8814274\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/IMO_Number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'imo');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^IMO \\d{7}$/i.test(value)) {\r\n                return false;\r\n            }\r\n            \r\n            // Grab just the digits\r\n            var sum    = 0,\r\n                digits = value.replace(/^.*(\\d{7})$/, '$1');\r\n            \r\n            // Go over each char, multiplying by the inverse of it's position\r\n            // IMO 9176187\r\n            // (9 * 7) + (1 * 6) + (7 * 5) + (6 * 4) + (1 * 3) + (8 * 2) = 147\r\n            // Take the last digit of that, that's the check digit (7)\r\n            for (var i = 6; i >= 1; i--) {\r\n                sum += (digits.slice((6 - i), -i) * (i + 1));\r\n            }\r\n\r\n            return sum % 10 === parseInt(digits.charAt(6), 10);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            integer: {\r\n                'default': 'Please enter a valid number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.integer = {\r\n        enableByHtml5: function($field) {\r\n            return ('number' === $field.attr('type')) && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is an integer\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            if (this.enableByHtml5($field) && $field.get(0).validity && $field.get(0).validity.badInput === true) {\r\n                return false;\r\n            }\r\n\r\n            var value = validator.getFieldValue($field, 'integer');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            return /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            ip: {\r\n                'default': 'Please enter a valid IP address',\r\n                ipv4: 'Please enter a valid IPv4 address',\r\n                ipv6: 'Please enter a valid IPv6 address'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.ip = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            ipv4: 'ipv4',\r\n            ipv6: 'ipv6'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a IP address.\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - ipv4: Enable IPv4 validator, default to true\r\n         * - ipv6: Enable IPv6 validator, default to true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'ip');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            options = $.extend({}, { ipv4: true, ipv6: true }, options);\r\n\r\n            var locale    = validator.getLocale(),\r\n                ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\r\n                ipv6Regex = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\r\n                valid     = false,\r\n                message;\r\n\r\n            switch (true) {\r\n                case (options.ipv4 && !options.ipv6):\r\n                    valid   = ipv4Regex.test(value);\r\n                    message = options.message || FormValidation.I18n[locale].ip.ipv4;\r\n                    break;\r\n\r\n                case (!options.ipv4 && options.ipv6):\r\n                    valid   = ipv6Regex.test(value);\r\n                    message = options.message || FormValidation.I18n[locale].ip.ipv6;\r\n                    break;\r\n\r\n                case (options.ipv4 && options.ipv6):\r\n                /* falls through */\r\n                default:\r\n                    valid   = ipv4Regex.test(value) || ipv6Regex.test(value);\r\n                    message = options.message || FormValidation.I18n[locale].ip['default'];\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: valid,\r\n                message: message\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            isbn: {\r\n                'default': 'Please enter a valid ISBN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.isbn = {\r\n        /**\r\n         * Return true if the input value is a valid ISBN 10 or ISBN 13 number\r\n         * Examples:\r\n         * - Valid:\r\n         * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X\r\n         * ISBN 13: 978-0-306-40615-7\r\n         * - Invalid:\r\n         * ISBN 10: 99921-58-10-6\r\n         * ISBN 13: 978-0-306-40615-6\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'isbn');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview\r\n            // Groups are separated by a hyphen or a space\r\n            var type;\r\n            switch (true) {\r\n                case /^\\d{9}[\\dX]$/.test(value):\r\n                case (value.length === 13 && /^(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n                case (value.length === 13 && /^(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n                    type = 'ISBN10';\r\n                    break;\r\n                case /^(978|979)\\d{9}[\\dX]$/.test(value):\r\n                case (value.length === 17 && /^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n                case (value.length === 17 && /^(978|979)\\s(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n                    type = 'ISBN13';\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            // Replace all special characters except digits and X\r\n            value = value.replace(/[^0-9X]/gi, '');\r\n            var chars  = value.split(''),\r\n                length = chars.length,\r\n                sum    = 0,\r\n                i,\r\n                checksum;\r\n\r\n            switch (type) {\r\n                case 'ISBN10':\r\n                    sum = 0;\r\n                    for (i = 0; i < length - 1; i++) {\r\n                        sum += parseInt(chars[i], 10) * (10 - i);\r\n                    }\r\n                    checksum = 11 - (sum % 11);\r\n                    if (checksum === 11) {\r\n                        checksum = 0;\r\n                    } else if (checksum === 10) {\r\n                        checksum = 'X';\r\n                    }\r\n                    return (checksum + '' === chars[length - 1]);\r\n\r\n                case 'ISBN13':\r\n                    sum = 0;\r\n                    for (i = 0; i < length - 1; i++) {\r\n                        sum += ((i % 2 === 0) ? parseInt(chars[i], 10) : (parseInt(chars[i], 10) * 3));\r\n                    }\r\n                    checksum = 10 - (sum % 10);\r\n                    if (checksum === 10) {\r\n                        checksum = '0';\r\n                    }\r\n                    return (checksum + '' === chars[length - 1]);\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            isin: {\r\n                'default': 'Please enter a valid ISIN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.isin = {\r\n        // Available country codes\r\n        // See http://isin.net/country-codes/\r\n        COUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',\r\n\r\n        /**\r\n         * Validate an ISIN (International Securities Identification Number)\r\n         * Examples:\r\n         * - Valid: US0378331005, AU0000XVGZA3, GB0002634946\r\n         * - Invalid: US0378331004, AA0000XVGZA3\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'isin');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            var regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');\r\n            if (!regex.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var converted = '',\r\n                length    = value.length;\r\n            // Convert letters to number\r\n            for (var i = 0; i < length - 1; i++) {\r\n                var c = value.charCodeAt(i);\r\n                converted += ((c > 57) ? (c - 55).toString() : value.charAt(i));\r\n            }\r\n\r\n            var digits = '',\r\n                n      = converted.length,\r\n                group  = (n % 2 !== 0) ? 0 : 1;\r\n            for (i = 0; i < n; i++) {\r\n                digits += (parseInt(converted[i], 10) * ((i % 2) === group ? 2 : 1) + '');\r\n            }\r\n\r\n            var sum = 0;\r\n            for (i = 0; i < digits.length; i++) {\r\n                sum += parseInt(digits.charAt(i), 10);\r\n            }\r\n            sum = (10 - (sum % 10)) % 10;\r\n            return sum + '' === value.charAt(length - 1);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            ismn: {\r\n                'default': 'Please enter a valid ISMN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.ismn = {\r\n        /**\r\n         * Validate ISMN (International Standard Music Number)\r\n         * Examples:\r\n         * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615\r\n         * - Invalid: 9790060115614\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'ismn');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Groups are separated by a hyphen or a space\r\n            var type;\r\n            switch (true) {\r\n                case /^M\\d{9}$/.test(value):\r\n                case /^M-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n                case /^M\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n                    type = 'ISMN10';\r\n                    break;\r\n                case /^9790\\d{9}$/.test(value):\r\n                case /^979-0-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n                case /^979\\s0\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n                    type = 'ISMN13';\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            if ('ISMN10' === type) {\r\n                value = '9790' + value.substr(1);\r\n            }\r\n\r\n            // Replace all special characters except digits\r\n            value = value.replace(/[^0-9]/gi, '');\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = 10 - sum % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            issn: {\r\n                'default': 'Please enter a valid ISSN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.issn = {\r\n        /**\r\n         * Validate ISSN (International Standard Serial Number)\r\n         * Examples:\r\n         * - Valid: 0378-5955, 0024-9319, 0032-1478\r\n         * - Invalid: 0032-147X\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'issn');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Groups are separated by a hyphen or a space\r\n            if (!/^\\d{4}\\-\\d{3}[\\dX]$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Replace all special characters except digits and X\r\n            value = value.replace(/[^0-9X]/gi, '');\r\n            var chars  = value.split(''),\r\n                length = chars.length,\r\n                sum    = 0;\r\n\r\n            if (chars[7] === 'X') {\r\n                chars[7] = 10;\r\n            }\r\n            for (var i = 0; i < length; i++) {\r\n                sum += parseInt(chars[i], 10) * (8 - i);\r\n            }\r\n            return (sum % 11 === 0);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            lessThan: {\r\n                'default': 'Please enter a value less than or equal to %s',\r\n                notInclusive: 'Please enter a value less than %s'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.lessThan = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            value: 'value',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var type = $field.attr('type'),\r\n                max  = $field.attr('max');\r\n            if (max && type !== 'date') {\r\n                return {\r\n                    value: max\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is less than or equal to given number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - value: The number used to compare to. It can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'lessThan');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            \r\n            value = this._format(value);\r\n            if (!$.isNumeric(value)) {\r\n                return false;\r\n            }\r\n\r\n            var locale         = validator.getLocale(),\r\n                compareTo      = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value),\r\n                compareToValue = this._format(compareTo);\r\n\r\n            value = parseFloat(value);\r\n            return (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value <= compareToValue,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].lessThan['default'], compareTo)\r\n                    }\r\n                    : {\r\n                        valid: value < compareToValue,\r\n                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].lessThan.notInclusive, compareTo)\r\n                    };\r\n        },\r\n\r\n        _format: function(value) {\r\n            return (value + '').replace(',', '.');\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            mac: {\r\n                'default': 'Please enter a valid MAC address'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.mac = {\r\n        /**\r\n         * Return true if the input value is a MAC address.\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'mac');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            meid: {\r\n                'default': 'Please enter a valid MEID number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.meid = {\r\n        /**\r\n         * Validate MEID (Mobile Equipment Identifier)\r\n         * Examples:\r\n         * - Valid: 293608736500703710, 29360-87365-0070-3710, AF0123450ABCDE, AF-012345-0ABCDE\r\n         * - Invalid: 2936087365007037101\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Mobile_equipment_identifier\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'meid');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            switch (true) {\r\n                // 14 digit hex representation (no check digit)\r\n                case /^[0-9A-F]{15}$/i.test(value):\r\n                // 14 digit hex representation + dashes or spaces (no check digit)\r\n                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(value):\r\n                // 18 digit decimal representation (no check digit)\r\n                case /^\\d{19}$/.test(value):\r\n                // 18 digit decimal representation + dashes or spaces (no check digit)\r\n                case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}[- ]\\d$/.test(value):\r\n                    // Grab the check digit\r\n                    var cd = value.charAt(value.length - 1);\r\n\r\n                    // Strip any non-hex chars\r\n                    value = value.replace(/[- ]/g, '');\r\n\r\n                    // If it's all digits, luhn base 10 is used\r\n                    if (value.match(/^\\d*$/i)) {\r\n                        return FormValidation.Helper.luhn(value);\r\n                    }\r\n\r\n                    // Strip the check digit\r\n                    value = value.slice(0, -1);\r\n\r\n                    // Get every other char, and double it\r\n                    var cdCalc = '';\r\n                    for (var i = 1; i <= 13; i += 2) {\r\n                        cdCalc += (parseInt(value.charAt(i), 16) * 2).toString(16);\r\n                    }\r\n\r\n                    // Get the sum of each char in the string\r\n                    var sum = 0;\r\n                    for (i = 0; i < cdCalc.length; i++) {\r\n                        sum += parseInt(cdCalc.charAt(i), 16);\r\n                    }\r\n\r\n                    // If the last digit of the calc is 0, the check digit is 0\r\n                    return (sum % 10 === 0)\r\n                            ? (cd === '0')\r\n                            // Subtract it from the next highest 10s number (64 goes to 70) and subtract the sum\r\n                            // Double it and turn it into a hex char\r\n                            : (cd === ((Math.floor((sum + 10) / 10) * 10 - sum) * 2).toString(16));\r\n\r\n                // 14 digit hex representation (no check digit)\r\n                case /^[0-9A-F]{14}$/i.test(value):\r\n                // 14 digit hex representation + dashes or spaces (no check digit)\r\n                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(value):\r\n                // 18 digit decimal representation (no check digit)\r\n                case /^\\d{18}$/.test(value):\r\n                // 18 digit decimal representation + dashes or spaces (no check digit)\r\n                case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}$/.test(value):\r\n                    return true;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            notEmpty: {\r\n                'default': 'Please enter a value'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.notEmpty = {\r\n        enableByHtml5: function($field) {\r\n            var required = $field.attr('required') + '';\r\n            return ('required' === required || 'true' === required);\r\n        },\r\n\r\n        /**\r\n         * Check if input value is empty or not\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var type = $field.attr('type');\r\n            if ('radio' === type || 'checkbox' === type) {\r\n                var ns = validator.getNamespace();\r\n                return validator\r\n                            .getFieldElements($field.attr('data-' + ns + '-field'))\r\n                            .filter(':checked')\r\n                            .length > 0;\r\n            }\r\n\r\n            if ('number' === type && $field.get(0).validity && $field.get(0).validity.badInput === true) {\r\n                return true;\r\n            }\r\n\r\n            return $.trim($field.val()) !== '';\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            numeric: {\r\n                'default': 'Please enter a valid float number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.numeric = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            separator: 'separator'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('number' === $field.attr('type')) && ($field.attr('step') !== undefined) && ($field.attr('step') % 1 !== 0);\r\n        },\r\n\r\n        /**\r\n         * Validate decimal number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - separator: The decimal separator. Can be \".\" (default), \",\"\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            if (this.enableByHtml5($field) && $field.get(0).validity && $field.get(0).validity.badInput === true) {\r\n                return false;\r\n            }\r\n\r\n            var value = validator.getFieldValue($field, 'numeric');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            var separator = options.separator || '.';\r\n            if (separator !== '.') {\r\n                value = value.replace(separator, '.');\r\n            }\r\n\r\n            return !isNaN(parseFloat(value)) && isFinite(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            phone: {\r\n                'default': 'Please enter a valid phone number',\r\n                country: 'Please enter a valid phone number in %s',\r\n                countries: {\r\n                    AE: 'United Arab Emirates',\r\n                    BR: 'Brazil',\r\n                    CN: 'China',\r\n                    CZ: 'Czech Republic',\r\n                    DE: 'Germany',\r\n                    DK: 'Denmark',\r\n                    ES: 'Spain',\r\n                    FR: 'France',\r\n                    GB: 'United Kingdom',\r\n                    IN: 'India',\r\n                    MA: 'Morocco',\r\n                    PK: 'Pakistan',\r\n                    RO: 'Romania',\r\n                    RU: 'Russia',\r\n                    SK: 'Slovakia',\r\n                    TH: 'Thailand',\r\n                    US: 'USA',\r\n                    VE: 'Venezuela'\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.phone = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // The supported countries\r\n        COUNTRY_CODES: ['AE', 'BR', 'CN', 'CZ', 'DE', 'DK', 'ES', 'FR', 'GB', 'IN', 'MA', 'PK', 'RO', 'RU', 'SK', 'TH', 'US', 'VE'],\r\n\r\n        /**\r\n         * Return true if the input value contains a valid phone number for the country\r\n         * selected in the options\r\n         *\r\n         * @param {FormValidation.Base} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO-3166 country code. It can be\r\n         *      - A country code\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         *\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'phone');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var locale  = validator.getLocale(),\r\n                country = options.country;\r\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                // Try to determine the country\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                return true;\r\n            }\r\n\r\n            var isValid = true;\r\n            switch (country.toUpperCase()) {\r\n                case 'AE':\r\n                    // Test: http://regexr.com/39tak\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(((\\+|00)?971[\\s\\.-]?(\\(0\\)[\\s\\.-]?)?|0)(\\(5(0|2|5|6)\\)|5(0|2|5|6)|2|3|4|6|7|9)|60)([\\s\\.-]?[0-9]){7}$/).test(value);\r\n                    break;\r\n\r\n                case 'BR':\r\n                    // Test: http://regexr.com/399m1\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(([\\d]{4}[-.\\s]{1}[\\d]{2,3}[-.\\s]{1}[\\d]{2}[-.\\s]{1}[\\d]{2})|([\\d]{4}[-.\\s]{1}[\\d]{3}[-.\\s]{1}[\\d]{4})|((\\(?\\+?[0-9]{2}\\)?\\s?)?(\\(?\\d{2}\\)?\\s?)?\\d{4,5}[-.\\s]?\\d{4}))$/).test(value);\r\n                    break;\r\n\r\n                case 'CN':\r\n                    // http://regexr.com/39dq4\r\n                    value   = $.trim(value);\r\n                    isValid = (/^((00|\\+)?(86(?:-| )))?((\\d{11})|(\\d{3}[- ]{1}\\d{4}[- ]{1}\\d{4})|((\\d{2,4}[- ]){1}(\\d{7,8}|(\\d{3,4}[- ]{1}\\d{4}))([- ]{1}\\d{1,4})?))$/).test(value);\r\n                    break;\r\n\r\n                case 'CZ':\r\n                    // Test: http://regexr.com/39hhl\r\n                    isValid = /^(((00)([- ]?)|\\+)(420)([- ]?))?((\\d{3})([- ]?)){2}(\\d{3})$/.test(value);\r\n                    break;\r\n\r\n                case 'DE':\r\n                    // Test: http://regexr.com/39pkg\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(((((((00|\\+)49[ \\-/]?)|0)[1-9][0-9]{1,4})[ \\-/]?)|((((00|\\+)49\\()|\\(0)[1-9][0-9]{1,4}\\)[ \\-/]?))[0-9]{1,7}([ \\-/]?[0-9]{1,5})?)$/).test(value);\r\n                    break;\r\n\r\n                case 'DK':\r\n                    // Mathing DK phone numbers with country code in 1 of 3 formats and an\r\n                    // 8 digit phone number not starting with a 0 or 1. Can have 1 space\r\n                    // between each character except inside the country code.\r\n                    // Test: http://regex101.com/r/sS8fO4/1\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(\\+45|0045|\\(45\\))?\\s?[2-9](\\s?\\d){7}$/).test(value);\r\n                    break;\r\n\r\n                case 'ES':\r\n                    // http://regex101.com/r/rB9mA9/1\r\n                    // Telephone numbers in Spain go like this:\r\n                    //     9: Landline phones and special prefixes.\r\n                    //     6, 7: Mobile phones.\r\n                    //     5: VoIP lines.\r\n                    //     8: Premium-rate services.\r\n                    // There are also special 5-digit and 3-digit numbers, but\r\n                    // maybe it would be overkill to include them all.\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(?:(?:(?:\\+|00)34\\D?))?(?:5|6|7|8|9)(?:\\d\\D?){8}$/).test(value);\r\n                    break;\r\n\r\n                case 'FR':\r\n                    // http://regexr.com/39a2p\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(?:(?:(?:\\+|00)33[ ]?(?:\\(0\\)[ ]?)?)|0){1}[1-9]{1}([ .-]?)(?:\\d{2}\\1?){3}\\d{2}$/).test(value);\r\n                    break;\r\n\r\n                case 'GB':\r\n                    // http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format\r\n                    // Test: http://regexr.com/38uhv\r\n                    value   = $.trim(value);\r\n                    isValid = (/^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/).test(value);\r\n                    break;\r\n            \r\n                case 'IN':\r\n                    // http://stackoverflow.com/questions/18351553/regular-expression-validation-for-indian-phone-number-and-mobile-number\r\n                    // Test: http://regex101.com/r/qL6eZ5/1\r\n                    // May begin with +91. Supports mobile and land line numbers\r\n                    value   = $.trim(value);\r\n                    isValid = (/((\\+?)((0[ -]+)*|(91 )*)(\\d{12}|\\d{10}))|\\d{5}([- ]*)\\d{6}/).test(value);\r\n                    break;\r\n                    \r\n                case 'MA':\r\n                    // http://en.wikipedia.org/wiki/Telephone_numbers_in_Morocco\r\n                    // Test: http://regexr.com/399n8\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(?:(?:(?:\\+|00)212[\\s]?(?:[\\s]?\\(0\\)[\\s]?)?)|0){1}(?:5[\\s.-]?[2-3]|6[\\s.-]?[13-9]){1}[0-9]{1}(?:[\\s.-]?\\d{2}){3}$/).test(value);\r\n                    break;\r\n\r\n                case 'PK':\r\n                    // http://regex101.com/r/yH8aV9/2\r\n                    value   = $.trim(value);\r\n                    isValid = (/^0?3[0-9]{2}[0-9]{7}$/).test(value);\r\n                    break;\r\n\r\n                case 'RO':\r\n                    // All mobile network and land line\r\n                    // http://regexr.com/39fv1\r\n                    isValid = (/^(\\+4|)?(07[0-8]{1}[0-9]{1}|02[0-9]{2}|03[0-9]{2}){1}?(\\s|\\.|\\-)?([0-9]{3}(\\s|\\.|\\-|)){2}$/g).test(value);\r\n                    break;\r\n\r\n                case 'RU':\r\n                    // http://regex101.com/r/gW7yT5/5\r\n                    isValid = (/^((8|\\+7|007)[\\-\\.\\/ ]?)?([\\(\\/\\.]?\\d{3}[\\)\\/\\.]?[\\-\\.\\/ ]?)?[\\d\\-\\.\\/ ]{7,10}$/g).test(value);\r\n                    break;\r\n\r\n                case 'SK':\r\n                    // Test: http://regexr.com/39hhl\r\n                    isValid = /^(((00)([- ]?)|\\+)(420)([- ]?))?((\\d{3})([- ]?)){2}(\\d{3})$/.test(value);\r\n                    break;\r\n\r\n                case 'TH':\r\n                    // http://regex101.com/r/vM5mZ4/2\r\n                    isValid = (/^0\\(?([6|8-9]{2})*-([0-9]{3})*-([0-9]{4})$/).test(value);\r\n                    break;\r\n\r\n                case 'VE':\r\n                    // http://regex101.com/r/eM2yY0/6\r\n                    value   = $.trim(value);\r\n                    isValid = (/^0(?:2(?:12|4[0-9]|5[1-9]|6[0-9]|7[0-8]|8[1-35-8]|9[1-5]|3[45789])|4(?:1[246]|2[46]))\\d{7}$/).test(value);\r\n                    break;\r\n\r\n                case 'US':\r\n                /* falls through */\r\n                default:\r\n                    // Make sure US phone numbers have 10 digits\r\n                    // May start with 1, +1, or 1-; should discard\r\n                    // Area code may be delimited with (), & sections may be delimited with . or -\r\n                    // Test: http://regexr.com/38mqi\r\n                    isValid = (/^(?:(1\\-?)|(\\+1 ?))?\\(?(\\d{3})[\\)\\-\\.]?(\\d{3})[\\-\\.]?(\\d{4})$/).test(value);\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].phone.country, FormValidation.I18n[locale].phone.countries[country])\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            regexp: {\r\n                'default': 'Please enter a value matching the pattern'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.regexp = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            regexp: 'regexp'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var pattern = $field.attr('pattern');\r\n            if (pattern) {\r\n                return {\r\n                    regexp: pattern\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check if the element value matches given regular expression\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - regexp: The regular expression you need to check\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'regexp');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var regexp = ('string' === typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;\r\n            return regexp.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            remote: {\r\n                'default': 'Please enter a valid value'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.remote = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            name: 'name',\r\n            type: 'type',\r\n            url: 'url',\r\n            data: 'data',\r\n            delay: 'delay'\r\n        },\r\n\r\n        /**\r\n         * Destroy the timer when destroying the bootstrapValidator (using validator.destroy() method)\r\n         */\r\n        destroy: function(validator, $field, options) {\r\n            var ns    = validator.getNamespace(),\r\n                timer = $field.data(ns + '.remote.timer');\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n                $field.removeData(ns + '.remote.timer');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Request a remote server to check the input value\r\n         *\r\n         * @param {FormValidation.Base} validator Plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - url {String|Function}\r\n         * - type {String} [optional] Can be GET or POST (default)\r\n         * - data {Object|Function} [optional]: By default, it will take the value\r\n         *  {\r\n         *      <fieldName>: <fieldValue>\r\n         *  }\r\n         * - delay\r\n         * - name {String} [optional]: Override the field name for the request.\r\n         * - message: The invalid message\r\n         * - headers: Additional headers\r\n         * @returns {Deferred}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var ns    = validator.getNamespace(),\r\n                value = validator.getFieldValue($field, 'remote'),\r\n                dfd   = new $.Deferred();\r\n            if (value === '') {\r\n                dfd.resolve($field, 'remote', { valid: true });\r\n                return dfd;\r\n            }\r\n\r\n            var name    = $field.attr('data-' + ns + '-field'),\r\n                data    = options.data || {},\r\n                url     = options.url,\r\n                type    = options.type || 'GET',\r\n                headers = options.headers || {};\r\n\r\n            // Support dynamic data\r\n            if ('function' === typeof data) {\r\n                data = data.call(this, validator);\r\n            }\r\n\r\n            // Parse string data from HTML5 attribute\r\n            if ('string' === typeof data) {\r\n                data = JSON.parse(data);\r\n            }\r\n\r\n            // Support dynamic url\r\n            if ('function' === typeof url) {\r\n                url = url.call(this, validator);\r\n            }\r\n\r\n            data[options.name || name] = value;\r\n            function runCallback() {\r\n                var xhr = $.ajax({\r\n                    type: type,\r\n                    headers: headers,\r\n                    url: url,\r\n                    dataType: 'json',\r\n                    data: data\r\n                });\r\n                xhr.then(function(response) {\r\n                    response.valid = response.valid === true || response.valid === 'true';\r\n                    dfd.resolve($field, 'remote', response);\r\n                });\r\n\r\n                dfd.fail(function() {\r\n                    xhr.abort();\r\n                });\r\n\r\n                return dfd;\r\n            }\r\n            \r\n            if (options.delay) {\r\n                // Since the form might have multiple fields with the same name\r\n                // I have to attach the timer to the field element\r\n                if ($field.data(ns + '.remote.timer')) {\r\n                    clearTimeout($field.data(ns + '.remote.timer'));\r\n                }\r\n\r\n                $field.data(ns + '.remote.timer', setTimeout(runCallback, options.delay));\r\n                return dfd;\r\n            } else {\r\n                return runCallback();\r\n            }\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            rtn: {\r\n                'default': 'Please enter a valid RTN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.rtn = {\r\n        /**\r\n         * Validate a RTN (Routing transit number)\r\n         * Examples:\r\n         * - Valid: 021200025, 789456124\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Routing_transit_number\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'rtn');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^\\d{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum = 0;\r\n            for (var i = 0; i < value.length; i += 3) {\r\n                sum += parseInt(value.charAt(i),     10) * 3\r\n                    +  parseInt(value.charAt(i + 1), 10) * 7\r\n                    +  parseInt(value.charAt(i + 2), 10);\r\n            }\r\n            return (sum !== 0 && sum % 10 === 0);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            sedol: {\r\n                'default': 'Please enter a valid SEDOL number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.sedol = {\r\n        /**\r\n         * Validate a SEDOL (Stock Exchange Daily Official List)\r\n         * Examples:\r\n         * - Valid: 0263494, B0WNLY7\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/SEDOL\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'sedol');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[0-9A-Z]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [1, 3, 1, 7, 3, 9, 1],\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += weight[i] * parseInt(value.charAt(i), 36);\r\n            }\r\n            sum = (10 - sum % 10) % 10;\r\n            return sum + '' === value.charAt(length - 1);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            siren: {\r\n                'default': 'Please enter a valid SIREN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.siren = {\r\n        /**\r\n         * Check if a string is a siren number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'siren');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^\\d{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n            return FormValidation.Helper.luhn(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            siret: {\r\n                'default': 'Please enter a valid SIRET number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.siret = {\r\n        /**\r\n         * Check if a string is a siret number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'siret');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var sum    = 0,\r\n                length = value.length,\r\n                tmp;\r\n            for (var i = 0; i < length; i++) {\r\n                tmp = parseInt(value.charAt(i), 10);\r\n                if ((i % 2) === 0) {\r\n                    tmp = tmp * 2;\r\n                    if (tmp > 9) {\r\n                        tmp -= 9;\r\n                    }\r\n                }\r\n                sum += tmp;\r\n            }\r\n            return (sum % 10 === 0);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            step: {\r\n                'default': 'Please enter a valid step of %s'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.step = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            base: 'baseValue',\r\n            step: 'step'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is valid step one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - baseValue: The base value\r\n         * - step: The step\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'step');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            options = $.extend({}, { baseValue: 0, step: 1 }, options);\r\n            value   = parseFloat(value);\r\n            if (!$.isNumeric(value)) {\r\n                return false;\r\n            }\r\n\r\n            var round = function(x, precision) {\r\n                    var m = Math.pow(10, precision);\r\n                    x = x * m;\r\n                    var sign   = (x > 0) | -(x < 0),\r\n                        isHalf = (x % 1 === 0.5 * sign);\r\n                    if (isHalf) {\r\n                        return (Math.floor(x) + (sign > 0)) / m;\r\n                    } else {\r\n                        return Math.round(x) / m;\r\n                    }\r\n                },\r\n                floatMod = function(x, y) {\r\n                    if (y === 0.0) {\r\n                        return 1.0;\r\n                    }\r\n                    var dotX      = (x + '').split('.'),\r\n                        dotY      = (y + '').split('.'),\r\n                        precision = ((dotX.length === 1) ? 0 : dotX[1].length) + ((dotY.length === 1) ? 0 : dotY[1].length);\r\n                    return round(x - y * Math.floor(x / y), precision);\r\n                };\r\n\r\n            var locale = validator.getLocale(),\r\n                mod    = floatMod(value - options.baseValue, options.step);\r\n            return {\r\n                valid: mod === 0.0 || mod === options.step,\r\n                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].step['default'], [options.step])\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            stringCase: {\r\n                'default': 'Please enter only lowercase characters',\r\n                upper: 'Please enter only uppercase characters'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.stringCase = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            'case': 'case'\r\n        },\r\n\r\n        /**\r\n         * Check if a string is a lower or upper case one\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - case: Can be 'lower' (default) or 'upper'\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'stringCase');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var locale     = validator.getLocale(),\r\n                stringCase = (options['case'] || 'lower').toLowerCase();\r\n            return {\r\n                valid: ('upper' === stringCase) ? value === value.toUpperCase() : value === value.toLowerCase(),\r\n                message: options.message || (('upper' === stringCase) ? FormValidation.I18n[locale].stringCase.upper : FormValidation.I18n[locale].stringCase['default'])\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            stringLength: {\r\n                'default': 'Please enter a value with valid length',\r\n                less: 'Please enter less than %s characters',\r\n                more: 'Please enter more than %s characters',\r\n                between: 'Please enter value between %s and %s characters long'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.stringLength = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max',\r\n            trim: 'trim',\r\n            utf8bytes: 'utf8Bytes'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var options   = {},\r\n                maxLength = $field.attr('maxlength'),\r\n                minLength = $field.attr('minlength');\r\n            if (maxLength) {\r\n                options.max = parseInt(maxLength, 10);\r\n            }\r\n            if (minLength) {\r\n                options.min = parseInt(minLength, 10);\r\n            }\r\n\r\n            return $.isEmptyObject(options) ? false : options;\r\n        },\r\n\r\n        /**\r\n         * Check if the length of element value is less or more than given number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of following keys:\r\n         * - min\r\n         * - max\r\n         * At least one of two keys is required\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - message: The invalid message\r\n         * - trim: Indicate the length will be calculated after trimming the value or not. It is false, by default\r\n         * - utf8bytes: Evaluate string length in UTF-8 bytes, default to false\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'stringLength');\r\n            if (options.trim === true || options.trim === 'true') {\r\n                value = $.trim(value);\r\n            }\r\n\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var locale     = validator.getLocale(),\r\n                min        = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n                max        = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\r\n                // Credit to http://stackoverflow.com/a/23329386 (@lovasoa) for UTF-8 byte length code\r\n                utf8Length = function(str) {\r\n                                 var s = str.length;\r\n                                 for (var i = str.length - 1; i >= 0; i--) {\r\n                                     var code = str.charCodeAt(i);\r\n                                     if (code > 0x7f && code <= 0x7ff) {\r\n                                         s++;\r\n                                     } else if (code > 0x7ff && code <= 0xffff) {\r\n                                         s += 2;\r\n                                     }\r\n                                     if (code >= 0xDC00 && code <= 0xDFFF) {\r\n                                         i--;\r\n                                     }\r\n                                 }\r\n                                 return s;\r\n                             },\r\n                length     = options.utf8Bytes ? utf8Length(value) : value.length,\r\n                isValid    = true,\r\n                message    = options.message || FormValidation.I18n[locale].stringLength['default'];\r\n\r\n            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {\r\n                isValid = false;\r\n            }\r\n\r\n            switch (true) {\r\n                case (!!min && !!max):\r\n                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                    break;\r\n\r\n                case (!!min):\r\n                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.more, parseInt(min, 10));\r\n                    break;\r\n\r\n                case (!!max):\r\n                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.less, parseInt(max, 10));\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: message\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            uri: {\r\n                'default': 'Please enter a valid URI'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.uri = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            allowlocal: 'allowLocal',\r\n            allowemptyprotocol: 'allowEmptyProtocol',\r\n            protocol: 'protocol'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('url' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid URL\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options\r\n         * - message: The error message\r\n         * - allowLocal: Allow the private and local network IP. Default to false\r\n         * - allowEmptyProtocol: Allow the URI without protocol. Default to false\r\n         * - protocol: The protocols, separated by a comma. Default to \"http, https, ftp\"\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'uri');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Credit to https://gist.github.com/dperini/729294\r\n            //\r\n            // Regular Expression for URL validation\r\n            //\r\n            // Author: Diego Perini\r\n            // Updated: 2010/12/05\r\n            //\r\n            // the regular expression composed & commented\r\n            // could be easily tweaked for RFC compliance,\r\n            // it was expressly modified to fit & satisfy\r\n            // these test for an URL shortener:\r\n            //\r\n            //   http://mathiasbynens.be/demo/url-regex\r\n            //\r\n            // Notes on possible differences from a standard/generic validation:\r\n            //\r\n            // - utf-8 char class take in consideration the full Unicode range\r\n            // - TLDs are mandatory unless `allowLocal` is true\r\n            // - protocols have been restricted to ftp, http and https only as requested\r\n            //\r\n            // Changes:\r\n            //\r\n            // - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255\r\n            //   first and last IP address of each class is considered invalid\r\n            //   (since they are broadcast/network addresses)\r\n            //\r\n            // - Added exclusion of private, reserved and/or local networks ranges\r\n            //   unless `allowLocal` is true\r\n            //\r\n            // - Added possibility of choosing a custom protocol\r\n            //\r\n            // - Add option to validate without protocol\r\n            //\r\n            var allowLocal         = options.allowLocal === true || options.allowLocal === 'true',\r\n                allowEmptyProtocol = options.allowEmptyProtocol === true || options.allowEmptyProtocol === 'true',\r\n                protocol           = (options.protocol || 'http, https, ftp').split(',').join('|').replace(/\\s/g, ''),\r\n                urlExp             = new RegExp(\r\n                    \"^\" +\r\n                    // protocol identifier\r\n                    \"(?:(?:\" + protocol + \")://)\" +\r\n                    // allow empty protocol\r\n                    (allowEmptyProtocol ? '?' : '') +\r\n                    // user:pass authentication\r\n                    \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n                    \"(?:\" +\r\n                    // IP address exclusion\r\n                    // private & local networks\r\n                    (allowLocal\r\n                        ? ''\r\n                        : (\"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n                           \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n                           \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\")) +\r\n                    // IP address dotted notation octets\r\n                    // excludes loopback network 0.0.0.0\r\n                    // excludes reserved space >= 224.0.0.0\r\n                    // excludes network & broadcast addresses\r\n                    // (first & last IP address of each class)\r\n                    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n                    \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n                    \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n                    \"|\" +\r\n                    // host name\r\n                    \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n                    // domain name\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-?)*[a-z\\\\u00a1-\\\\uffff0-9])*\" +\r\n                    // TLD identifier\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n                    // Allow intranet sites (no TLD) if `allowLocal` is true\r\n                    (allowLocal ? '?' : '') +\r\n                    \")\" +\r\n                    // port number\r\n                    \"(?::\\\\d{2,5})?\" +\r\n                    // resource path\r\n                    \"(?:/[^\\\\s]*)?\" +\r\n                    \"$\", \"i\"\r\n                );\r\n\r\n            return urlExp.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            uuid: {\r\n                'default': 'Please enter a valid UUID number',\r\n                version: 'Please enter a valid UUID version %s number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.uuid = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            version: 'version'\r\n        },\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid UUID string\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - version: Can be 3, 4, 5, null\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'uuid');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions\r\n            var locale   = validator.getLocale(),\r\n                patterns = {\r\n                    '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n                    '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n                    '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n                    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\r\n                },\r\n                version = options.version ? (options.version + '') : 'all';\r\n            return {\r\n                valid: (null === patterns[version]) ? true : patterns[version].test(value),\r\n                message: options.version\r\n                            ? FormValidation.Helper.format(options.message || FormValidation.I18n[locale].uuid.version, options.version)\r\n                            : (options.message || FormValidation.I18n[locale].uuid['default'])\r\n            };\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            vat: {\r\n                'default': 'Please enter a valid VAT number',\r\n                country: 'Please enter a valid VAT number in %s',\r\n                countries: {\r\n                    AT: 'Austria',\r\n                    BE: 'Belgium',\r\n                    BG: 'Bulgaria',\r\n                    BR: 'Brazil',\r\n                    CH: 'Switzerland',\r\n                    CY: 'Cyprus',\r\n                    CZ: 'Czech Republic',\r\n                    DE: 'Germany',\r\n                    DK: 'Denmark',\r\n                    EE: 'Estonia',\r\n                    ES: 'Spain',\r\n                    FI: 'Finland',\r\n                    FR: 'France',\r\n                    GB: 'United Kingdom',\r\n                    GR: 'Greek',\r\n                    EL: 'Greek',\r\n                    HU: 'Hungary',\r\n                    HR: 'Croatia',\r\n                    IE: 'Ireland',\r\n                    IS: 'Iceland',\r\n                    IT: 'Italy',\r\n                    LT: 'Lithuania',\r\n                    LU: 'Luxembourg',\r\n                    LV: 'Latvia',\r\n                    MT: 'Malta',\r\n                    NL: 'Netherlands',\r\n                    NO: 'Norway',\r\n                    PL: 'Poland',\r\n                    PT: 'Portugal',\r\n                    RO: 'Romania',\r\n                    RU: 'Russia',\r\n                    RS: 'Serbia',\r\n                    SE: 'Sweden',\r\n                    SI: 'Slovenia',\r\n                    SK: 'Slovakia',\r\n                    VE: 'Venezuela',\r\n                    ZA: 'South Africa'\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.vat = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // Supported country codes\r\n        COUNTRY_CODES: [\r\n            'AT', 'BE', 'BG', 'BR', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'EL', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU',\r\n            'IE', 'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SE', 'SK', 'SI', 'VE',\r\n            'ZA'\r\n        ],\r\n\r\n        /**\r\n         * Validate an European VAT number\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - One of country code defined in COUNTRY_CODES\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'vat');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var locale  = validator.getLocale(),\r\n                country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                return true;\r\n            }\r\n\r\n            var method  = ['_', country.toLowerCase()].join('');\r\n            return this[method](value)\r\n                ? true\r\n                : {\r\n                    valid: false,\r\n                    message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].vat.country, FormValidation.I18n[locale].vat.countries[country.toUpperCase()])\r\n                };\r\n        },\r\n\r\n        // VAT validators\r\n\r\n        /**\r\n         * Validate Austrian VAT number\r\n         * Example:\r\n         * - Valid: ATU13585627\r\n         * - Invalid: ATU13585626\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _at: function(value) {\r\n            if (/^ATU[0-9]{8}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^U[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(1);\r\n            var sum    = 0,\r\n                weight = [1, 2, 1, 2, 1, 2, 1],\r\n                temp   = 0;\r\n            for (var i = 0; i < 7; i++) {\r\n                temp = parseInt(value.charAt(i), 10) * weight[i];\r\n                if (temp > 9) {\r\n                    temp = Math.floor(temp / 10) + temp % 10;\r\n                }\r\n                sum += temp;\r\n            }\r\n\r\n            sum = 10 - (sum + 4) % 10;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n\r\n            return (sum + '' === value.substr(7, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Belgian VAT number\r\n         * Example:\r\n         * - Valid: BE0428759497\r\n         * - Invalid: BE431150351\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _be: function(value) {\r\n            if (/^BE[0]{0,1}[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0]{0,1}[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (value.length === 9) {\r\n                value = '0' + value;\r\n            }\r\n            if (value.substr(1, 1) === '0') {\r\n                return false;\r\n            }\r\n\r\n            var sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);\r\n            return (sum % 97 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Bulgarian VAT number\r\n         * Example:\r\n         * - Valid: BG175074752,\r\n         * BG7523169263, BG8032056031,\r\n         * BG7542011030,\r\n         * BG7111042925\r\n         * - Invalid: BG175074753, BG7552A10004, BG7111042922\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _bg: function(value) {\r\n            if (/^BG[0-9]{9,10}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum = 0, i = 0;\r\n\r\n            // Legal entities\r\n            if (value.length === 9) {\r\n                for (i = 0; i < 8; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (i + 1);\r\n                }\r\n                sum = sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                    for (i = 0; i < 8; i++) {\r\n                        sum += parseInt(value.charAt(i), 10) * (i + 3);\r\n                    }\r\n                }\r\n                sum = sum % 10;\r\n                return (sum + '' === value.substr(8));\r\n            }\r\n            // Physical persons, foreigners and others\r\n            else if (value.length === 10) {\r\n                // Validate Bulgarian national identification numbers\r\n                var egn = function(value) {\r\n                        // Check the birth date\r\n                        var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                            month = parseInt(value.substr(2, 2), 10),\r\n                            day   = parseInt(value.substr(4, 2), 10);\r\n                        if (month > 40) {\r\n                            year += 100;\r\n                            month -= 40;\r\n                        } else if (month > 20) {\r\n                            year -= 100;\r\n                            month -= 20;\r\n                        }\r\n\r\n                        if (!FormValidation.Helper.date(year, month, day)) {\r\n                            return false;\r\n                        }\r\n\r\n                        var sum    = 0,\r\n                            weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = (sum % 11) % 10;\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    },\r\n                    // Validate Bulgarian personal number of a foreigner\r\n                    pnf = function(value) {\r\n                        var sum    = 0,\r\n                            weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = sum % 10;\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    },\r\n                    // Finally, consider it as a VAT number\r\n                    vat = function(value) {\r\n                        var sum    = 0,\r\n                            weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = 11 - sum % 11;\r\n                        if (sum === 10) {\r\n                            return false;\r\n                        }\r\n                        if (sum === 11) {\r\n                            sum = 0;\r\n                        }\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    };\r\n                return (egn(value) || pnf(value) || vat(value));\r\n            }\r\n\r\n            return false;\r\n        },\r\n        \r\n        /**\r\n         * Validate Brazilian VAT number (CNPJ)\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _br: function(value) {\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            var cnpj = value.replace(/[^\\d]+/g, '');\r\n            if (cnpj === '' || cnpj.length !== 14) {\r\n                return false;\r\n            }\r\n\r\n            // Remove invalids CNPJs\r\n            if (cnpj === '00000000000000' || cnpj === '11111111111111' || cnpj === '22222222222222' ||\r\n                cnpj === '33333333333333' || cnpj === '44444444444444' || cnpj === '55555555555555' ||\r\n                cnpj === '66666666666666' || cnpj === '77777777777777' || cnpj === '88888888888888' ||\r\n                cnpj === '99999999999999')\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // Validate verification digits\r\n            var length  = cnpj.length - 2,\r\n                numbers = cnpj.substring(0, length),\r\n                digits  = cnpj.substring(length),\r\n                sum     = 0,\r\n                pos     = length - 7;\r\n\r\n            for (var i = length; i >= 1; i--) {\r\n                sum += parseInt(numbers.charAt(length - i), 10) * pos--;\r\n                if (pos < 2) {\r\n                    pos = 9;\r\n                }\r\n            }\r\n\r\n            var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r\n            if (result !== parseInt(digits.charAt(0), 10)) {\r\n                return false;\r\n            }\r\n\r\n            length  = length + 1;\r\n            numbers = cnpj.substring(0, length);\r\n            sum     = 0;\r\n            pos     = length - 7;\r\n            for (i = length; i >= 1; i--) {\r\n                sum += parseInt(numbers.charAt(length - i), 10) * pos--;\r\n                if (pos < 2) {\r\n                    pos = 9;\r\n                }\r\n            }\r\n\r\n            result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r\n            return (result === parseInt(digits.charAt(1), 10));\r\n        },\r\n\r\n        /**\r\n         * Validate Swiss VAT number\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ch: function(value) {\r\n            if (/^CHE[0-9]{9}(MWST)?$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^E[0-9]{9}(MWST)?$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(1);\r\n            var sum    = 0,\r\n                weight = [5, 4, 3, 2, 7, 6, 5, 4];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10) {\r\n                return false;\r\n            }\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            }\r\n\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Cypriot VAT number\r\n         * Examples:\r\n         * - Valid: CY10259033P\r\n         * - Invalid: CY10259033Z\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _cy: function(value) {\r\n            if (/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Do not allow to start with \"12\"\r\n            if (value.substr(0, 2) === '12') {\r\n                return false;\r\n            }\r\n\r\n            // Extract the next digit and multiply by the counter.\r\n            var sum         = 0,\r\n                translation = {\r\n                    '0': 1,  '1': 0,  '2': 5,  '3': 7,  '4': 9,\r\n                    '5': 13, '6': 15, '7': 17, '8': 19, '9': 21\r\n                };\r\n            for (var i = 0; i < 8; i++) {\r\n                var temp = parseInt(value.charAt(i), 10);\r\n                if (i % 2 === 0) {\r\n                    temp = translation[temp + ''];\r\n                }\r\n                sum += temp;\r\n            }\r\n\r\n            sum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Czech Republic VAT number\r\n         * Can be:\r\n         * i) Legal entities (8 digit numbers)\r\n         * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)\r\n         * iii) Individuals without a RC (9 digit numbers beginning with 6)\r\n         *\r\n         * Examples:\r\n         * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926\r\n         * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _cz: function(value) {\r\n            if (/^CZ[0-9]{8,10}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{8,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum = 0,\r\n                i   = 0;\r\n            if (value.length === 8) {\r\n                // Do not allow to start with '9'\r\n                if (value.charAt(0) + '' === '9') {\r\n                    return false;\r\n                }\r\n\r\n                sum = 0;\r\n                for (i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum = 11 - sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                }\r\n                if (sum === 11) {\r\n                    sum = 1;\r\n                }\r\n\r\n                return (sum + '' === value.substr(7, 1));\r\n            } else if (value.length === 9 && (value.charAt(0) + '' === '6')) {\r\n                sum = 0;\r\n                // Skip the first (which is 6)\r\n                for (i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i + 1), 10) * (8 - i);\r\n                }\r\n                sum = 11 - sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                }\r\n                if (sum === 11) {\r\n                    sum = 1;\r\n                }\r\n                sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\r\n                return (sum + '' === value.substr(8, 1));\r\n            } else if (value.length === 9 || value.length === 10) {\r\n                // Validate Czech birth number (Rodné číslo), which is also national identifier\r\n                var year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n                    month = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n                    day   = parseInt(value.substr(4, 2), 10);\r\n                if (value.length === 9) {\r\n                    if (year >= 1980) {\r\n                        year -= 100;\r\n                    }\r\n                    if (year > 1953) {\r\n                        return false;\r\n                    }\r\n                } else if (year < 1954) {\r\n                    year += 100;\r\n                }\r\n\r\n                if (!FormValidation.Helper.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n\r\n                // Check that the birth date is not in the future\r\n                if (value.length === 10) {\r\n                    var check = parseInt(value.substr(0, 9), 10) % 11;\r\n                    if (year < 1985) {\r\n                        check = check % 10;\r\n                    }\r\n                    return (check + '' === value.substr(9, 1));\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate German VAT number\r\n         * Examples:\r\n         * - Valid: DE136695976\r\n         * - Invalid: DE136695978\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _de: function(value) {\r\n            if (/^DE[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            return FormValidation.Helper.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Danish VAT number\r\n         * Example:\r\n         * - Valid: DK13585628\r\n         * - Invalid: DK13585627\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _dk: function(value) {\r\n            if (/^DK[0-9]{8}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [2, 7, 6, 5, 4, 3, 2, 1];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Estonian VAT number\r\n         * Examples:\r\n         * - Valid: EE100931558, EE100594102\r\n         * - Invalid: EE100594103\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ee: function(value) {\r\n            if (/^EE[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\r\n            for (var i = 0; i < 9; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 10 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\r\n         * Can be:\r\n         * i) DNI (Documento nacional de identidad), for Spaniards\r\n         * ii) NIE (Número de Identificación de Extranjeros), for foreigners\r\n         * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\r\n         *\r\n         * Examples:\r\n         * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838\r\n         * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _es: function(value) {\r\n            if (/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var dni = function(value) {\r\n                    var check = parseInt(value.substr(0, 8), 10);\r\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                    return (check + '' === value.substr(8, 1));\r\n                },\r\n                nie = function(value) {\r\n                    var check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');\r\n                    check = parseInt(check, 10);\r\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                    return (check + '' === value.substr(8, 1));\r\n                },\r\n                cif = function(value) {\r\n                    var first = value.charAt(0), check;\r\n                    if ('KLM'.indexOf(first) !== -1) {\r\n                        // K: Spanish younger than 14 year old\r\n                        // L: Spanish living outside Spain without DNI\r\n                        // M: Granted the tax to foreigners who have no NIE\r\n                        check = parseInt(value.substr(1, 8), 10);\r\n                        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                        return (check + '' === value.substr(8, 1));\r\n                    } else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {\r\n                        var sum    = 0,\r\n                            weight = [2, 1, 2, 1, 2, 1, 2],\r\n                            temp   = 0;\r\n\r\n                        for (var i = 0; i < 7; i++) {\r\n                            temp = parseInt(value.charAt(i + 1), 10) * weight[i];\r\n                            if (temp > 9) {\r\n                                temp = Math.floor(temp / 10) + temp % 10;\r\n                            }\r\n                            sum += temp;\r\n                        }\r\n                        sum = 10 - sum % 10;\r\n                        return (sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1));\r\n                    }\r\n\r\n                    return false;\r\n                };\r\n\r\n            var first = value.charAt(0);\r\n            if (/^[0-9]$/.test(first)) {\r\n                return dni(value);\r\n            } else if (/^[XYZ]$/.test(first)) {\r\n                return nie(value);\r\n            } else {\r\n                return cif(value);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Finnish VAT number\r\n         * Examples:\r\n         * - Valid: FI20774740\r\n         * - Invalid: FI20774741\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _fi: function(value) {\r\n            if (/^FI[0-9]{8}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [7, 9, 10, 5, 8, 4, 2, 1];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\r\n         * It's constructed by a SIREN number, prefixed by two characters.\r\n         *\r\n         * Examples:\r\n         * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782\r\n         * - Invalid: FR84323140391\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _fr: function(value) {\r\n            if (/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (!FormValidation.Helper.luhn(value.substr(2))) {\r\n                return false;\r\n            }\r\n\r\n            if (/^[0-9]{2}$/.test(value.substr(0, 2))) {\r\n                // First two characters are digits\r\n                return value.substr(0, 2) === (parseInt(value.substr(2) + '12', 10) % 97 + '');\r\n            } else {\r\n                // The first characters cann't be O and I\r\n                var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',\r\n                    check;\r\n                // First one is digit\r\n                if (/^[0-9]{1}$/.test(value.charAt(0))) {\r\n                    check = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;\r\n                } else {\r\n                    check = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;\r\n                }\r\n                return ((parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11) === (check % 11);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate United Kingdom VAT number\r\n         * Example:\r\n         * - Valid: GB980780684\r\n         * - Invalid: GB802311781\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _gb: function(value) {\r\n            if (/^GB[0-9]{9}$/.test(value)             /* Standard */\r\n                || /^GB[0-9]{12}$/.test(value)         /* Branches */\r\n                || /^GBGD[0-9]{3}$/.test(value)        /* Government department */\r\n                || /^GBHA[0-9]{3}$/.test(value)        /* Health authority */\r\n                || /^GB(GD|HA)8888[0-9]{5}$/.test(value))\r\n            {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)\r\n                && !/^[0-9]{12}$/.test(value)\r\n                && !/^GD[0-9]{3}$/.test(value)\r\n                && !/^HA[0-9]{3}$/.test(value)\r\n                && !/^(GD|HA)8888[0-9]{5}$/.test(value))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            var length = value.length;\r\n            if (length === 5) {\r\n                var firstTwo  = value.substr(0, 2),\r\n                    lastThree = parseInt(value.substr(2), 10);\r\n                return ('GD' === firstTwo && lastThree < 500) || ('HA' === firstTwo && lastThree >= 500);\r\n            } else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {\r\n                if (('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500)\r\n                    || ('HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500))\r\n                {\r\n                    return false;\r\n                }\r\n                return (parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10));\r\n            } else if (length === 9 || length === 12) {\r\n                var sum    = 0,\r\n                    weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\r\n                for (var i = 0; i < 9; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 97;\r\n\r\n                if (parseInt(value.substr(0, 3), 10) >= 100) {\r\n                    return (sum === 0 || sum === 42 || sum === 55);\r\n                } else {\r\n                    return (sum === 0);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Greek VAT number\r\n         * Examples:\r\n         * - Valid: GR023456780, EL094259216\r\n         * - Invalid: EL123456781\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _gr: function(value) {\r\n            if (/^(GR|EL)[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (value.length === 8) {\r\n                value = '0' + value;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [256, 128, 64, 32, 16, 8, 4, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum % 11) % 10;\r\n\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        // EL is traditionally prefix of Greek VAT numbers\r\n        _el: function(value) {\r\n            return this._gr(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Hungarian VAT number\r\n         * Examples:\r\n         * - Valid: HU12892312\r\n         * - Invalid: HU12892313\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _hu: function(value) {\r\n            if (/^HU[0-9]{8}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [9, 7, 3, 1, 9, 7, 3, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 10 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Croatian VAT number\r\n         * Examples:\r\n         * - Valid: HR33392005961\r\n         * - Invalid: HR33392005962\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _hr: function(value) {\r\n            if (/^HR[0-9]{11}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            return FormValidation.Helper.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Irish VAT number\r\n         * Examples:\r\n         * - Valid: IE6433435F, IE6433435OA, IE8D79739I\r\n         * - Invalid: IE8D79738J\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ie: function(value) {\r\n            if (/^IE[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var getCheckDigit = function(value) {\r\n                while (value.length < 7) {\r\n                    value = '0' + value;\r\n                }\r\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n                    sum      = 0;\r\n                for (var i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum += 9 * alphabet.indexOf(value.substr(7));\r\n                return alphabet[sum % 23];\r\n            };\r\n\r\n            // The first 7 characters are digits\r\n            if (/^[0-9]+$/.test(value.substr(0, 7))) {\r\n                // New system\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n            } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {\r\n                // Old system\r\n                return value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Icelandic VAT (VSK) number\r\n         * Examples:\r\n         * - Valid: 12345, 123456\r\n         * - Invalid: 1234567\r\n         *\r\n         * @params {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _is: function(value) {\r\n            if (/^IS[0-9]{5,6}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            return /^[0-9]{5,6}$/.test(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Italian VAT number, which consists of 11 digits.\r\n         * - First 7 digits are a company identifier\r\n         * - Next 3 are the province of residence\r\n         * - The last one is a check digit\r\n         *\r\n         * Examples:\r\n         * - Valid: IT00743110157\r\n         * - Invalid: IT00743110158\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _it: function(value) {\r\n            if (/^IT[0-9]{11}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (parseInt(value.substr(0, 7), 10) === 0) {\r\n                return false;\r\n            }\r\n\r\n            var lastThree = parseInt(value.substr(7, 3), 10);\r\n            if ((lastThree < 1) || (lastThree > 201) && lastThree !== 999 && lastThree !== 888) {\r\n                return false;\r\n            }\r\n\r\n            return FormValidation.Helper.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Lithuanian VAT number\r\n         * It can be:\r\n         * - 9 digits, for legal entities\r\n         * - 12 digits, for temporarily registered taxpayers\r\n         *\r\n         * Examples:\r\n         * - Valid: LT119511515, LT100001919017, LT100004801610\r\n         * - Invalid: LT100001919018\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lt: function(value) {\r\n            if (/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var length = value.length,\r\n                sum    = 0,\r\n                i;\r\n            for (i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * (1 + i % 9);\r\n            }\r\n            var check = sum % 11;\r\n            if (check === 10) {\r\n                sum = 0;\r\n                for (i = 0; i < length - 1; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);\r\n                }\r\n            }\r\n            check = check % 11 % 10;\r\n            return (check + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Luxembourg VAT number\r\n         * Examples:\r\n         * - Valid: LU15027442\r\n         * - Invalid: LU15027443\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lu: function(value) {\r\n            if (/^LU[0-9]{8}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            return ((parseInt(value.substr(0, 6), 10) % 89) + '' === value.substr(6, 2));\r\n        },\r\n\r\n        /**\r\n         * Validate Latvian VAT number\r\n         * Examples:\r\n         * - Valid: LV40003521600, LV16117519997\r\n         * - Invalid: LV40003521601, LV16137519997\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lv: function(value) {\r\n            if (/^LV[0-9]{11}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var first  = parseInt(value.charAt(0), 10),\r\n                sum    = 0,\r\n                weight = [],\r\n                i,\r\n                length = value.length;\r\n            if (first > 3) {\r\n                // Legal entity\r\n                sum    = 0;\r\n                weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\r\n                for (i = 0; i < length; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 11;\r\n                return (sum === 3);\r\n            } else {\r\n                // Check birth date\r\n                var day   = parseInt(value.substr(0, 2), 10),\r\n                    month = parseInt(value.substr(2, 2), 10),\r\n                    year  = parseInt(value.substr(4, 2), 10);\r\n                year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n                if (!FormValidation.Helper.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n\r\n                // Check personal code\r\n                sum    = 0;\r\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n                for (i = 0; i < length - 1; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = (sum + 1) % 11 % 10;\r\n                return (sum + '' === value.charAt(length - 1));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Maltese VAT number\r\n         * Examples:\r\n         * - Valid: MT11679112\r\n         * - Invalid: MT11679113\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _mt: function(value) {\r\n            if (/^MT[0-9]{8}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [3, 4, 6, 7, 8, 9, 10, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 37 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Dutch VAT number\r\n         * Examples:\r\n         * - Valid: NL004495445B01\r\n         * - Invalid: NL123456789B90\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _nl: function(value) {\r\n            if (/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {\r\n               value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}B[0-9]{2}$/.test(value)) {\r\n               return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = sum % 11;\r\n            if (sum > 9) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Norwegian VAT number\r\n         *\r\n         * @see http://www.brreg.no/english/coordination/number.html\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _no: function(value) {\r\n            if (/^NO[0-9]{9}$/.test(value)) {\r\n               value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)) {\r\n               return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Polish VAT number\r\n         * Examples:\r\n         * - Valid: PL8567346215\r\n         * - Invalid: PL8567346216\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _pl: function(value) {\r\n            if (/^PL[0-9]{10}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\r\n\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Portuguese VAT number\r\n         * Examples:\r\n         * - Valid: PT501964843\r\n         * - Invalid: PT501964842\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _pt: function(value) {\r\n            if (/^PT[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum > 9) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Romanian VAT number\r\n         * Examples:\r\n         * - Valid: RO18547290\r\n         * - Invalid: RO18547291\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ro: function(value) {\r\n            if (/^RO[1-9][0-9]{1,9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[1-9][0-9]{1,9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var length = value.length,\r\n                weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),\r\n                sum    = 0;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = (10 * sum) % 11 % 10;\r\n            return (sum + '' === value.substr(length - 1, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Russian VAT number (Taxpayer Identification Number - INN)\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ru: function(value) {\r\n            if (/^RU([0-9]{10}|[0-9]{12})$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^([0-9]{10}|[0-9]{12})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var i = 0;\r\n            if (value.length === 10) {\r\n                var sum    = 0,\r\n                    weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n                for (i = 0; i < 10; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 11;\r\n                if (sum > 9) {\r\n                    sum = sum % 10;\r\n                }\r\n\r\n                return (sum + '' === value.substr(9, 1));\r\n            } else if (value.length === 12) {\r\n                var sum1    = 0,\r\n                    weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\r\n                    sum2    = 0,\r\n                    weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n\r\n                for (i = 0; i < 11; i++) {\r\n                    sum1 += parseInt(value.charAt(i), 10) * weight1[i];\r\n                    sum2 += parseInt(value.charAt(i), 10) * weight2[i];\r\n                }\r\n                sum1 = sum1 % 11;\r\n                if (sum1 > 9) {\r\n                    sum1 = sum1 % 10;\r\n                }\r\n                sum2 = sum2 % 11;\r\n                if (sum2 > 9) {\r\n                    sum2 = sum2 % 10;\r\n                }\r\n\r\n                return (sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1));\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate Serbian VAT number\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _rs: function(value) {\r\n            if (/^RS[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum  = 10,\r\n                temp = 0;\r\n            for (var i = 0; i < 8; i++) {\r\n                temp = (parseInt(value.charAt(i), 10) + sum) % 10;\r\n                if (temp === 0) {\r\n                    temp = 10;\r\n                }\r\n                sum = (2 * temp) % 11;\r\n            }\r\n\r\n            return ((sum + parseInt(value.substr(8, 1), 10)) % 10 === 1);\r\n        },\r\n\r\n        /**\r\n         * Validate Swedish VAT number\r\n         * Examples:\r\n         * - Valid: SE123456789701\r\n         * - Invalid: SE123456789101\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _se: function(value) {\r\n            if (/^SE[0-9]{10}01$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[0-9]{10}01$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(0, 10);\r\n            return FormValidation.Helper.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Slovenian VAT number\r\n         * Examples:\r\n         * - Valid: SI50223054\r\n         * - Invalid: SI50223055\r\n         * - Invalid: SI09999990\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _si: function(value) {\r\n            // The Slovenian VAT numbers don't start with zero\r\n            var res = value.match(/^(SI)?([1-9][0-9]{7})$/);\r\n            if (!res) {\r\n                return false;\r\n            }\r\n            if (res[1]) {\r\n                value = value.substr(2);\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [8, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 7; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(7, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Slovak VAT number\r\n         * Examples:\r\n         * - Valid: SK2022749619\r\n         * - Invalid: SK2022749618\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _sk: function(value) {\r\n            if (/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            return (parseInt(value, 10) % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Venezuelan VAT number (RIF)\r\n         * Examples:\r\n         * - Valid: VEJ309272292, VEV242818101, VEJ000126518, VEJ000458324, J309272292, V242818101, J000126518, J000458324\r\n         * - Invalid: VEJ309272293, VEV242818100, J000126519, J000458323\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ve: function(value) {\r\n            if (/^VE[VEJPG][0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n            if (!/^[VEJPG][0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var types  = {\r\n                    'V': 4,\r\n                    'E': 8,\r\n                    'J': 12,\r\n                    'P': 16,\r\n                    'G': 20\r\n                },\r\n                sum    = types[value.charAt(0)],\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i + 1), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11 || sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(9, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate South African VAT number\r\n         * Examples:\r\n         * - Valid: 4012345678\r\n         * - Invalid: 40123456789, 3012345678\r\n         *\r\n         * @params {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n         _za: function(value) {\r\n            if (/^ZA4[0-9]{9}$/.test(value)) {\r\n                value = value.substr(2);\r\n            }\r\n\r\n            return /^4[0-9]{9}$/.test(value);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            vin: {\r\n                'default': 'Please enter a valid VIN number'\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.vin = {\r\n        /**\r\n         * Validate an US VIN (Vehicle Identification Number)\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'vin');\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Don't accept I, O, Q characters\r\n            if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            var chars   = {\r\n                    A: 1,   B: 2,   C: 3,   D: 4,   E: 5,   F: 6,   G: 7,   H: 8,\r\n                    J: 1,   K: 2,   L: 3,   M: 4,   N: 5,           P: 7,           R: 9,\r\n                            S: 2,   T: 3,   U: 4,   V: 5,   W: 6,   X: 7,   Y: 8,   Z: 9,\r\n                    '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0\r\n                },\r\n                weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\r\n                sum     = 0,\r\n                length  = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                sum += chars[value.charAt(i) + ''] * weights[i];\r\n            }\r\n\r\n            var reminder = sum % 11;\r\n            if (reminder === 10) {\r\n                reminder = 'X';\r\n            }\r\n\r\n            return (reminder + '') === value.charAt(8);\r\n        }\r\n    };\r\n}(jQuery));\r\n;(function($) {\r\n    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {\r\n        'en_US': {\r\n            zipCode: {\r\n                'default': 'Please enter a valid postal code',\r\n                country: 'Please enter a valid postal code in %s',\r\n                countries: {\r\n                    AT: 'Austria',\r\n                    BR: 'Brazil',\r\n                    CA: 'Canada',\r\n                    CH: 'Switzerland',\r\n                    CZ: 'Czech Republic',\r\n                    DE: 'Germany',\r\n                    DK: 'Denmark',\r\n                    ES: 'Spain',\r\n                    FR: 'France',\r\n                    GB: 'United Kingdom',\r\n                    IE: 'Ireland',\r\n                    IN: 'India',\r\n                    IT: 'Italy',\r\n                    MA: 'Morocco',\r\n                    NL: 'Netherlands',\r\n                    PT: 'Portugal',\r\n                    RO: 'Romania',\r\n                    RU: 'Russia',\r\n                    SE: 'Sweden',\r\n                    SG: 'Singapore',\r\n                    SK: 'Slovakia',\r\n                    US: 'USA'\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    FormValidation.Validator.zipCode = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        COUNTRY_CODES: ['AT', 'BR', 'CA', 'CH', 'CZ', 'DE', 'DK', 'ES', 'FR', 'GB', 'IE', 'IN', 'IT', 'MA', 'NL', 'PT', 'RO', 'RU', 'SE', 'SG', 'SK', 'US'],\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid country zip code\r\n         *\r\n         * @param {FormValidation.Base} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The country\r\n         *\r\n         * The country can be defined by:\r\n         * - An ISO 3166 country code\r\n         * - Name of field which its value defines the country code\r\n         * - Name of callback function that returns the country code\r\n         * - A callback function that returns the country code\r\n         *\r\n         *  callback: function(value, validator, $field) {\r\n         *      // value is the value of field\r\n         *      // validator is the BootstrapValidator instance\r\n         *      // $field is jQuery element representing the field\r\n         *  }\r\n         *\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = validator.getFieldValue($field, 'zipCode');\r\n            if (value === '' || !options.country) {\r\n                return true;\r\n            }\r\n\r\n            var locale  = validator.getLocale(),\r\n                country = options.country;\r\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                // Try to determine the country\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                return true;\r\n            }\r\n\r\n            var isValid = false;\r\n            country = country.toUpperCase();\r\n            switch (country) {\r\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Austria\r\n                case 'AT':\r\n                    isValid = /^([1-9]{1})(\\d{3})$/.test(value);\r\n                    break;\r\n\r\n                case 'BR':\r\n                    isValid = /^(\\d{2})([\\.]?)(\\d{3})([\\-]?)(\\d{3})$/.test(value);\r\n                    break;\r\n\r\n                case 'CA':\r\n                    isValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);\r\n                    break;\r\n\r\n                case 'CH':\r\n                    isValid = /^([1-9]{1})(\\d{3})$/.test(value);\r\n                    break;\r\n\r\n                case 'CZ':\r\n                    // Test: http://regexr.com/39hhr\r\n                    isValid = /^(\\d{3})([ ]?)(\\d{2})$/.test(value);\r\n                    break;\r\n\r\n                // http://stackoverflow.com/questions/7926687/regular-expression-german-zip-codes\r\n                case 'DE':\r\n                    isValid = /^(?!01000|99999)(0[1-9]\\d{3}|[1-9]\\d{4})$/.test(value);\r\n                    break;\r\n\r\n                case 'DK':\r\n                    isValid = /^(DK(-|\\s)?)?\\d{4}$/i.test(value);\r\n                    break;\r\n\r\n                // Zip codes in Spain go from 01XXX to 52XXX.\r\n                // Test: http://refiddle.com/1ufo\r\n                case 'ES':\r\n                    isValid = /^(?:0[1-9]|[1-4][0-9]|5[0-2])\\d{3}$/.test(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/Postal_codes_in_France\r\n                case 'FR':\r\n                    isValid = /^[0-9]{5}$/i.test(value);\r\n                    break;\r\n\r\n                case 'GB':\r\n                    isValid = this._gb(value);\r\n                    break;\r\n\r\n                // Indian PIN (Postal Index Number) validation\r\n                // http://en.wikipedia.org/wiki/Postal_Index_Number\r\n                // Test: http://regex101.com/r/kV0vH3/1\r\n                case 'IN':\r\n                    isValid = /^\\d{3}\\s?\\d{3}$/.test(value);\r\n                    break;\r\n\r\n                // http://www.eircode.ie/docs/default-source/Common/prepare-your-business-for-eircode---published-v2.pdf?sfvrsn=2\r\n                // Test: http://refiddle.com/1kpl\r\n                case 'IE':\r\n                    isValid = /^(D6W|[ACDEFHKNPRTVWXY]\\d{2})\\s[0-9ACDEFHKNPRTVWXY]{4}$/.test(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy\r\n                case 'IT':\r\n                    isValid = /^(I-|IT-)?\\d{5}$/i.test(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Morocco\r\n                case 'MA':\r\n                    isValid = /^[1-9][0-9]{4}$/i.test(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands\r\n                case 'NL':\r\n                    isValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);\r\n                    break;\r\n\r\n                // Test: http://refiddle.com/1l2t\r\n                case 'PT':\r\n                    isValid = /^[1-9]\\d{3}-\\d{3}$/.test(value);\r\n                    break;\r\n\r\n                case 'RO':\r\n                    isValid = /^(0[1-8]{1}|[1-9]{1}[0-5]{1})?[0-9]{4}$/i.test(value);\r\n                    break;\r\n\r\n                case 'RU':\r\n                    isValid = /^[0-9]{6}$/i.test(value);\r\n                    break;\r\n\r\n                case 'SE':\r\n                    isValid = /^(S-)?\\d{3}\\s?\\d{2}$/i.test(value);\r\n                    break;\r\n\r\n                case 'SG':\r\n                    isValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\\d{4})$/i.test(value);\r\n                    break;\r\n\r\n                case 'SK':\r\n                    // Test: http://regexr.com/39hhr\r\n                    isValid = /^(\\d{3})([ ]?)(\\d{2})$/.test(value);\r\n                    break;\r\n\r\n                case 'US':\r\n                /* falls through */\r\n                default:\r\n                    isValid = /^\\d{4,5}([\\-]?\\d{4})?$/.test(value);\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].zipCode.country, FormValidation.I18n[locale].zipCode.countries[country])\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Validate United Kingdom postcode\r\n         * Examples:\r\n         * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT\r\n         * - Special cases:\r\n         * AI-2640, ASCN 1ZZ, GIR 0AA\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom\r\n         * @param {String} value The postcode\r\n         * @returns {Boolean}\r\n         */\r\n        _gb: function(value) {\r\n            var firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX\r\n                secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ\r\n                thirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',\r\n                fourthChar = '[ABEHMNPRVWXY]',\r\n                fifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',\r\n                regexps    = [\r\n                    // AN NAA, ANN NAA, AAN NAA, AANN NAA format\r\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n                    // ANA NAA\r\n                    new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n                    // AANA NAA\r\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n\r\n                    new RegExp('^(BF1)(\\\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes\r\n                    /^(GIR)(\\s*)(0AA)$/i,                       // Special postcode GIR 0AA\r\n                    /^(BFPO)(\\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers\r\n                    /^(BFPO)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i,        // c/o BFPO numbers\r\n                    /^([A-Z]{4})(\\s*)(1ZZ)$/i,                  // Overseas Territories\r\n                    /^(AI-2640)$/i                              // Anguilla\r\n                ];\r\n            for (var i = 0; i < regexps.length; i++) {\r\n                if (regexps[i].test(value)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(jQuery));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/js/lib/formValidation/formValidation.js\n// module id = 10\n// module chunks = 1"],"sourceRoot":""}